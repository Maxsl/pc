// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CldNewsShuJu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CldNewsShuJu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

namespace {

const ::google::protobuf::Descriptor* NewsDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewsDataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockNews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockNews_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfNews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfNews_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewsClassData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewsClassData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnouncemtDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnouncemtDataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockAnnouncemt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockAnnouncemt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfAnnouncemt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfAnnouncemt_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerNewsDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerNewsDataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerAnnouncemtDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerAnnouncemtDataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerReportDataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerReportDataItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CldNewsShuJu_2eproto() {
  protobuf_AddDesc_CldNewsShuJu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CldNewsShuJu.proto");
  GOOGLE_CHECK(file != NULL);
  NewsDataItem_descriptor_ = file->message_type(0);
  static const int NewsDataItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, newsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, source_),
  };
  NewsDataItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewsDataItem_descriptor_,
      NewsDataItem::default_instance_,
      NewsDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(NewsDataItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsDataItem, _internal_metadata_),
      -1);
  StockNews_descriptor_ = file->message_type(1);
  static const int StockNews_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockNews, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockNews, data_),
  };
  StockNews_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockNews_descriptor_,
      StockNews::default_instance_,
      StockNews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockNews, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockNews),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockNews, _internal_metadata_),
      -1);
  SelfNews_descriptor_ = file->message_type(2);
  static const int SelfNews_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, newsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, source_),
  };
  SelfNews_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelfNews_descriptor_,
      SelfNews::default_instance_,
      SelfNews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, _has_bits_[0]),
      -1,
      -1,
      sizeof(SelfNews),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfNews, _internal_metadata_),
      -1);
  NewsClassData_descriptor_ = file->message_type(3);
  static const int NewsClassData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsClassData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsClassData, classmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsClassData, data_),
  };
  NewsClassData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewsClassData_descriptor_,
      NewsClassData::default_instance_,
      NewsClassData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsClassData, _has_bits_[0]),
      -1,
      -1,
      sizeof(NewsClassData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsClassData, _internal_metadata_),
      -1);
  AnnouncemtDataItem_descriptor_ = file->message_type(4);
  static const int AnnouncemtDataItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, announcemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, type_),
  };
  AnnouncemtDataItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnnouncemtDataItem_descriptor_,
      AnnouncemtDataItem::default_instance_,
      AnnouncemtDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(AnnouncemtDataItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncemtDataItem, _internal_metadata_),
      -1);
  StockAnnouncemt_descriptor_ = file->message_type(5);
  static const int StockAnnouncemt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAnnouncemt, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAnnouncemt, data_),
  };
  StockAnnouncemt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockAnnouncemt_descriptor_,
      StockAnnouncemt::default_instance_,
      StockAnnouncemt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAnnouncemt, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockAnnouncemt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAnnouncemt, _internal_metadata_),
      -1);
  SelfAnnouncemt_descriptor_ = file->message_type(6);
  static const int SelfAnnouncemt_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, announcemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, type_),
  };
  SelfAnnouncemt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelfAnnouncemt_descriptor_,
      SelfAnnouncemt::default_instance_,
      SelfAnnouncemt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, _has_bits_[0]),
      -1,
      -1,
      sizeof(SelfAnnouncemt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfAnnouncemt, _internal_metadata_),
      -1);
  InnerNewsDataItem_descriptor_ = file->message_type(7);
  static const int InnerNewsDataItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerNewsDataItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerNewsDataItem, data_),
  };
  InnerNewsDataItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnerNewsDataItem_descriptor_,
      InnerNewsDataItem::default_instance_,
      InnerNewsDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerNewsDataItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnerNewsDataItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerNewsDataItem, _internal_metadata_),
      -1);
  InnerAnnouncemtDataItem_descriptor_ = file->message_type(8);
  static const int InnerAnnouncemtDataItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerAnnouncemtDataItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerAnnouncemtDataItem, data_),
  };
  InnerAnnouncemtDataItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnerAnnouncemtDataItem_descriptor_,
      InnerAnnouncemtDataItem::default_instance_,
      InnerAnnouncemtDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerAnnouncemtDataItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnerAnnouncemtDataItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerAnnouncemtDataItem, _internal_metadata_),
      -1);
  ReportDataItem_descriptor_ = file->message_type(9);
  static const int ReportDataItem_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, organization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, rateclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, ratedirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, hightprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, lowprice_),
  };
  ReportDataItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportDataItem_descriptor_,
      ReportDataItem::default_instance_,
      ReportDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReportDataItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDataItem, _internal_metadata_),
      -1);
  StockReport_descriptor_ = file->message_type(10);
  static const int StockReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockReport, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockReport, data_),
  };
  StockReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockReport_descriptor_,
      StockReport::default_instance_,
      StockReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockReport, _internal_metadata_),
      -1);
  SelfReport_descriptor_ = file->message_type(11);
  static const int SelfReport_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, organization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, rateclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, ratedirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, hightprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, lowprice_),
  };
  SelfReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelfReport_descriptor_,
      SelfReport::default_instance_,
      SelfReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(SelfReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfReport, _internal_metadata_),
      -1);
  InnerReportDataItem_descriptor_ = file->message_type(12);
  static const int InnerReportDataItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerReportDataItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerReportDataItem, data_),
  };
  InnerReportDataItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnerReportDataItem_descriptor_,
      InnerReportDataItem::default_instance_,
      InnerReportDataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerReportDataItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnerReportDataItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerReportDataItem, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CldNewsShuJu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewsDataItem_descriptor_, &NewsDataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockNews_descriptor_, &StockNews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelfNews_descriptor_, &SelfNews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewsClassData_descriptor_, &NewsClassData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnnouncemtDataItem_descriptor_, &AnnouncemtDataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockAnnouncemt_descriptor_, &StockAnnouncemt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelfAnnouncemt_descriptor_, &SelfAnnouncemt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnerNewsDataItem_descriptor_, &InnerNewsDataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnerAnnouncemtDataItem_descriptor_, &InnerAnnouncemtDataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportDataItem_descriptor_, &ReportDataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockReport_descriptor_, &StockReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelfReport_descriptor_, &SelfReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnerReportDataItem_descriptor_, &InnerReportDataItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CldNewsShuJu_2eproto() {
  delete NewsDataItem::default_instance_;
  delete NewsDataItem_reflection_;
  delete StockNews::default_instance_;
  delete StockNews_reflection_;
  delete SelfNews::default_instance_;
  delete SelfNews_reflection_;
  delete NewsClassData::default_instance_;
  delete NewsClassData_reflection_;
  delete AnnouncemtDataItem::default_instance_;
  delete AnnouncemtDataItem_reflection_;
  delete StockAnnouncemt::default_instance_;
  delete StockAnnouncemt_reflection_;
  delete SelfAnnouncemt::default_instance_;
  delete SelfAnnouncemt_reflection_;
  delete InnerNewsDataItem::default_instance_;
  delete InnerNewsDataItem_reflection_;
  delete InnerAnnouncemtDataItem::default_instance_;
  delete InnerAnnouncemtDataItem_reflection_;
  delete ReportDataItem::default_instance_;
  delete ReportDataItem_reflection_;
  delete StockReport::default_instance_;
  delete StockReport_reflection_;
  delete SelfReport::default_instance_;
  delete SelfReport_reflection_;
  delete InnerReportDataItem::default_instance_;
  delete InnerReportDataItem_reflection_;
}

void protobuf_AddDesc_CldNewsShuJu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CldNewsShuJu.proto\022\006dzhyun\"\\\n\014NewsData"
    "Item\022\016\n\006NewsId\030\001 \001(\003\022\014\n\004Date\030\002 \001(\t\022\r\n\005Ti"
    "tle\030\003 \001(\t\022\017\n\007Context\030\004 \001(\t\022\016\n\006Source\030\005 \001"
    "(\t\"<\n\tStockNews\022\013\n\003Obj\030\001 \002(\t\022\"\n\004Data\030\002 \003"
    "(\0132\024.dzhyun.NewsDataItem\"e\n\010SelfNews\022\013\n\003"
    "Obj\030\001 \002(\t\022\016\n\006NewsId\030\002 \001(\003\022\014\n\004Date\030\003 \001(\t\022"
    "\r\n\005Title\030\004 \001(\t\022\017\n\007Context\030\005 \001(\t\022\016\n\006Sourc"
    "e\030\006 \001(\t\"W\n\rNewsClassData\022\017\n\007Version\030\001 \002("
    "\003\022\021\n\tClassMask\030\002 \001(\003\022\"\n\004Data\030\003 \001(\0132\024.dzh"
    "yun.NewsDataItem\"e\n\022AnnouncemtDataItem\022\014"
    "\n\004Date\030\001 \001(\t\022\023\n\013AnnouncemId\030\002 \002(\003\022\r\n\005Tit"
    "le\030\003 \001(\t\022\017\n\007Context\030\004 \001(\t\022\014\n\004type\030\005 \001(\t\""
    "H\n\017StockAnnouncemt\022\013\n\003Obj\030\001 \002(\t\022(\n\004Data\030"
    "\002 \003(\0132\032.dzhyun.AnnouncemtDataItem\"n\n\016Sel"
    "fAnnouncemt\022\013\n\003Obj\030\001 \002(\t\022\014\n\004Date\030\002 \001(\t\022\023"
    "\n\013AnnouncemId\030\003 \002(\003\022\r\n\005Title\030\004 \001(\t\022\017\n\007Co"
    "ntext\030\005 \001(\t\022\014\n\004type\030\006 \001(\t\"H\n\021InnerNewsDa"
    "taItem\022\017\n\007Version\030\001 \002(\003\022\"\n\004Data\030\002 \001(\0132\024."
    "dzhyun.NewsDataItem\"T\n\027InnerAnnouncemtDa"
    "taItem\022\017\n\007Version\030\001 \002(\003\022(\n\004Data\030\002 \001(\0132\032."
    "dzhyun.AnnouncemtDataItem\"\316\001\n\016ReportData"
    "Item\022\n\n\002Id\030\001 \001(\003\022\014\n\004Date\030\002 \001(\t\022\r\n\005Title\030"
    "\003 \001(\t\022\024\n\014Organization\030\004 \001(\t\022\017\n\007Context\030\005"
    " \001(\t\022\014\n\004type\030\006 \001(\t\022\021\n\tRateClass\030\007 \001(\t\022\025\n"
    "\rRateDirection\030\010 \001(\t\022\016\n\006Author\030\t \001(\t\022\022\n\n"
    "HightPrice\030\n \001(\003\022\020\n\010LowPrice\030\013 \001(\003\"@\n\013St"
    "ockReport\022\013\n\003Obj\030\001 \002(\t\022$\n\004Data\030\002 \003(\0132\026.d"
    "zhyun.ReportDataItem\"\327\001\n\nSelfReport\022\013\n\003O"
    "bj\030\001 \002(\t\022\n\n\002Id\030\002 \001(\003\022\014\n\004Date\030\003 \001(\t\022\r\n\005Ti"
    "tle\030\004 \001(\t\022\024\n\014Organization\030\005 \001(\t\022\017\n\007Conte"
    "xt\030\006 \001(\t\022\014\n\004type\030\007 \001(\t\022\021\n\tRateClass\030\010 \001("
    "\t\022\025\n\rRateDirection\030\t \001(\t\022\016\n\006Author\030\n \001(\t"
    "\022\022\n\nHightPrice\030\013 \001(\003\022\020\n\010LowPrice\030\014 \001(\003\"L"
    "\n\023InnerReportDataItem\022\017\n\007Version\030\001 \002(\003\022$"
    "\n\004Data\030\002 \001(\0132\026.dzhyun.ReportDataItemB\022\n\020"
    "com.dzhyun.proto", 1416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CldNewsShuJu.proto", &protobuf_RegisterTypes);
  NewsDataItem::default_instance_ = new NewsDataItem();
  StockNews::default_instance_ = new StockNews();
  SelfNews::default_instance_ = new SelfNews();
  NewsClassData::default_instance_ = new NewsClassData();
  AnnouncemtDataItem::default_instance_ = new AnnouncemtDataItem();
  StockAnnouncemt::default_instance_ = new StockAnnouncemt();
  SelfAnnouncemt::default_instance_ = new SelfAnnouncemt();
  InnerNewsDataItem::default_instance_ = new InnerNewsDataItem();
  InnerAnnouncemtDataItem::default_instance_ = new InnerAnnouncemtDataItem();
  ReportDataItem::default_instance_ = new ReportDataItem();
  StockReport::default_instance_ = new StockReport();
  SelfReport::default_instance_ = new SelfReport();
  InnerReportDataItem::default_instance_ = new InnerReportDataItem();
  NewsDataItem::default_instance_->InitAsDefaultInstance();
  StockNews::default_instance_->InitAsDefaultInstance();
  SelfNews::default_instance_->InitAsDefaultInstance();
  NewsClassData::default_instance_->InitAsDefaultInstance();
  AnnouncemtDataItem::default_instance_->InitAsDefaultInstance();
  StockAnnouncemt::default_instance_->InitAsDefaultInstance();
  SelfAnnouncemt::default_instance_->InitAsDefaultInstance();
  InnerNewsDataItem::default_instance_->InitAsDefaultInstance();
  InnerAnnouncemtDataItem::default_instance_->InitAsDefaultInstance();
  ReportDataItem::default_instance_->InitAsDefaultInstance();
  StockReport::default_instance_->InitAsDefaultInstance();
  SelfReport::default_instance_->InitAsDefaultInstance();
  InnerReportDataItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CldNewsShuJu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CldNewsShuJu_2eproto {
  StaticDescriptorInitializer_CldNewsShuJu_2eproto() {
    protobuf_AddDesc_CldNewsShuJu_2eproto();
  }
} static_descriptor_initializer_CldNewsShuJu_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewsDataItem::kNewsIdFieldNumber;
const int NewsDataItem::kDateFieldNumber;
const int NewsDataItem::kTitleFieldNumber;
const int NewsDataItem::kContextFieldNumber;
const int NewsDataItem::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewsDataItem::NewsDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.NewsDataItem)
}

void NewsDataItem::InitAsDefaultInstance() {
}

NewsDataItem::NewsDataItem(const NewsDataItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.NewsDataItem)
}

void NewsDataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  newsid_ = GOOGLE_LONGLONG(0);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewsDataItem::~NewsDataItem() {
  // @@protoc_insertion_point(destructor:dzhyun.NewsDataItem)
  SharedDtor();
}

void NewsDataItem::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewsDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewsDataItem_descriptor_;
}

const NewsDataItem& NewsDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

NewsDataItem* NewsDataItem::default_instance_ = NULL;

NewsDataItem* NewsDataItem::New(::google::protobuf::Arena* arena) const {
  NewsDataItem* n = new NewsDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewsDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.NewsDataItem)
  if (_has_bits_[0 / 32] & 31u) {
    newsid_ = GOOGLE_LONGLONG(0);
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NewsDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.NewsDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 NewsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newsid_)));
          set_has_newsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Date;
        break;
      }

      // optional string Date = 2;
      case 2: {
        if (tag == 18) {
         parse_Date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.NewsDataItem.Date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Title;
        break;
      }

      // optional string Title = 3;
      case 3: {
        if (tag == 26) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.NewsDataItem.Title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Context;
        break;
      }

      // optional string Context = 4;
      case 4: {
        if (tag == 34) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.NewsDataItem.Context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Source;
        break;
      }

      // optional string Source = 5;
      case 5: {
        if (tag == 42) {
         parse_Source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.NewsDataItem.Source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.NewsDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.NewsDataItem)
  return false;
#undef DO_
}

void NewsDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.NewsDataItem)
  // optional int64 NewsId = 1;
  if (has_newsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->newsid(), output);
  }

  // optional string Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional string Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string Context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->context(), output);
  }

  // optional string Source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.NewsDataItem)
}

::google::protobuf::uint8* NewsDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.NewsDataItem)
  // optional int64 NewsId = 1;
  if (has_newsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->newsid(), target);
  }

  // optional string Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string Context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->context(), target);
  }

  // optional string Source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.NewsDataItem.Source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.NewsDataItem)
  return target;
}

int NewsDataItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.NewsDataItem)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 NewsId = 1;
    if (has_newsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newsid());
    }

    // optional string Date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string Source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.NewsDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NewsDataItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewsDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.NewsDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.NewsDataItem)
    MergeFrom(*source);
  }
}

void NewsDataItem::MergeFrom(const NewsDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.NewsDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newsid()) {
      set_newsid(from.newsid());
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NewsDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.NewsDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsDataItem::CopyFrom(const NewsDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.NewsDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsDataItem::IsInitialized() const {

  return true;
}

void NewsDataItem::Swap(NewsDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewsDataItem::InternalSwap(NewsDataItem* other) {
  std::swap(newsid_, other->newsid_);
  date_.Swap(&other->date_);
  title_.Swap(&other->title_);
  context_.Swap(&other->context_);
  source_.Swap(&other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewsDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewsDataItem_descriptor_;
  metadata.reflection = NewsDataItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewsDataItem

// optional int64 NewsId = 1;
bool NewsDataItem::has_newsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewsDataItem::set_has_newsid() {
  _has_bits_[0] |= 0x00000001u;
}
void NewsDataItem::clear_has_newsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewsDataItem::clear_newsid() {
  newsid_ = GOOGLE_LONGLONG(0);
  clear_has_newsid();
}
 ::google::protobuf::int64 NewsDataItem::newsid() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.NewsId)
  return newsid_;
}
 void NewsDataItem::set_newsid(::google::protobuf::int64 value) {
  set_has_newsid();
  newsid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.NewsId)
}

// optional string Date = 2;
bool NewsDataItem::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewsDataItem::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
void NewsDataItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewsDataItem::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& NewsDataItem::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Date)
}
 void NewsDataItem::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Date)
}
 void NewsDataItem::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Date)
}
 ::std::string* NewsDataItem::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewsDataItem::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Date)
}

// optional string Title = 3;
bool NewsDataItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewsDataItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void NewsDataItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewsDataItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& NewsDataItem::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Title)
}
 void NewsDataItem::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Title)
}
 void NewsDataItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Title)
}
 ::std::string* NewsDataItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewsDataItem::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Title)
}

// optional string Context = 4;
bool NewsDataItem::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewsDataItem::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
void NewsDataItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewsDataItem::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& NewsDataItem::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Context)
}
 void NewsDataItem::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Context)
}
 void NewsDataItem::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Context)
}
 ::std::string* NewsDataItem::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewsDataItem::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Context)
}

// optional string Source = 5;
bool NewsDataItem::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewsDataItem::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
void NewsDataItem::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewsDataItem::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& NewsDataItem::source() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Source)
}
 void NewsDataItem::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Source)
}
 void NewsDataItem::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Source)
}
 ::std::string* NewsDataItem::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewsDataItem::release_source() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewsDataItem::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockNews::kObjFieldNumber;
const int StockNews::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockNews::StockNews()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.StockNews)
}

void StockNews::InitAsDefaultInstance() {
}

StockNews::StockNews(const StockNews& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.StockNews)
}

void StockNews::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockNews::~StockNews() {
  // @@protoc_insertion_point(destructor:dzhyun.StockNews)
  SharedDtor();
}

void StockNews::SharedDtor() {
  obj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockNews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockNews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockNews_descriptor_;
}

const StockNews& StockNews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

StockNews* StockNews::default_instance_ = NULL;

StockNews* StockNews::New(::google::protobuf::Arena* arena) const {
  StockNews* n = new StockNews;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockNews::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.StockNews)
  if (has_obj()) {
    obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockNews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.StockNews)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.StockNews.Obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.NewsDataItem Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.StockNews)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.StockNews)
  return false;
#undef DO_
}

void StockNews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.StockNews)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockNews.Obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj(), output);
  }

  // repeated .dzhyun.NewsDataItem Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.StockNews)
}

::google::protobuf::uint8* StockNews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.StockNews)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockNews.Obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  // repeated .dzhyun.NewsDataItem Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.StockNews)
  return target;
}

int StockNews::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.StockNews)
  int total_size = 0;

  // required string Obj = 1;
  if (has_obj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());
  }
  // repeated .dzhyun.NewsDataItem Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockNews::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.StockNews)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockNews* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockNews>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.StockNews)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.StockNews)
    MergeFrom(*source);
  }
}

void StockNews::MergeFrom(const StockNews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.StockNews)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_has_obj();
      obj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockNews::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.StockNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockNews::CopyFrom(const StockNews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.StockNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockNews::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockNews::Swap(StockNews* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockNews::InternalSwap(StockNews* other) {
  obj_.Swap(&other->obj_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockNews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockNews_descriptor_;
  metadata.reflection = StockNews_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockNews

// required string Obj = 1;
bool StockNews::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockNews::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
void StockNews::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockNews::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
 const ::std::string& StockNews::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockNews.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockNews::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockNews.Obj)
}
 void StockNews::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockNews.Obj)
}
 void StockNews::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockNews.Obj)
}
 ::std::string* StockNews::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockNews.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockNews::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.StockNews.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockNews::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockNews.Obj)
}

// repeated .dzhyun.NewsDataItem Data = 2;
int StockNews::data_size() const {
  return data_.size();
}
void StockNews::clear_data() {
  data_.Clear();
}
const ::dzhyun::NewsDataItem& StockNews::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockNews.Data)
  return data_.Get(index);
}
::dzhyun::NewsDataItem* StockNews::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockNews.Data)
  return data_.Mutable(index);
}
::dzhyun::NewsDataItem* StockNews::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockNews.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem >*
StockNews::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockNews.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem >&
StockNews::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockNews.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfNews::kObjFieldNumber;
const int SelfNews::kNewsIdFieldNumber;
const int SelfNews::kDateFieldNumber;
const int SelfNews::kTitleFieldNumber;
const int SelfNews::kContextFieldNumber;
const int SelfNews::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfNews::SelfNews()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.SelfNews)
}

void SelfNews::InitAsDefaultInstance() {
}

SelfNews::SelfNews(const SelfNews& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.SelfNews)
}

void SelfNews::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newsid_ = GOOGLE_LONGLONG(0);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfNews::~SelfNews() {
  // @@protoc_insertion_point(destructor:dzhyun.SelfNews)
  SharedDtor();
}

void SelfNews::SharedDtor() {
  obj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SelfNews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfNews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfNews_descriptor_;
}

const SelfNews& SelfNews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

SelfNews* SelfNews::default_instance_ = NULL;

SelfNews* SelfNews::New(::google::protobuf::Arena* arena) const {
  SelfNews* n = new SelfNews;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelfNews::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.SelfNews)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_obj()) {
      obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    newsid_ = GOOGLE_LONGLONG(0);
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SelfNews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.SelfNews)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfNews.Obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NewsId;
        break;
      }

      // optional int64 NewsId = 2;
      case 2: {
        if (tag == 16) {
         parse_NewsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newsid_)));
          set_has_newsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Date;
        break;
      }

      // optional string Date = 3;
      case 3: {
        if (tag == 26) {
         parse_Date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfNews.Date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Title;
        break;
      }

      // optional string Title = 4;
      case 4: {
        if (tag == 34) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfNews.Title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Context;
        break;
      }

      // optional string Context = 5;
      case 5: {
        if (tag == 42) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfNews.Context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Source;
        break;
      }

      // optional string Source = 6;
      case 6: {
        if (tag == 50) {
         parse_Source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfNews.Source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.SelfNews)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.SelfNews)
  return false;
#undef DO_
}

void SelfNews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.SelfNews)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj(), output);
  }

  // optional int64 NewsId = 2;
  if (has_newsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->newsid(), output);
  }

  // optional string Date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // optional string Title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string Context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->context(), output);
  }

  // optional string Source = 6;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.SelfNews)
}

::google::protobuf::uint8* SelfNews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.SelfNews)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  // optional int64 NewsId = 2;
  if (has_newsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->newsid(), target);
  }

  // optional string Date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  // optional string Title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string Context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->context(), target);
  }

  // optional string Source = 6;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfNews.Source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.SelfNews)
  return target;
}

int SelfNews::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.SelfNews)
  int total_size = 0;

  // required string Obj = 1;
  if (has_obj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional int64 NewsId = 2;
    if (has_newsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newsid());
    }

    // optional string Date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Context = 5;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string Source = 6;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfNews::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.SelfNews)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SelfNews* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelfNews>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.SelfNews)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.SelfNews)
    MergeFrom(*source);
  }
}

void SelfNews::MergeFrom(const SelfNews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.SelfNews)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_has_obj();
      obj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_);
    }
    if (from.has_newsid()) {
      set_newsid(from.newsid());
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SelfNews::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.SelfNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfNews::CopyFrom(const SelfNews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.SelfNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfNews::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SelfNews::Swap(SelfNews* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfNews::InternalSwap(SelfNews* other) {
  obj_.Swap(&other->obj_);
  std::swap(newsid_, other->newsid_);
  date_.Swap(&other->date_);
  title_.Swap(&other->title_);
  context_.Swap(&other->context_);
  source_.Swap(&other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelfNews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfNews_descriptor_;
  metadata.reflection = SelfNews_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelfNews

// required string Obj = 1;
bool SelfNews::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SelfNews::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
void SelfNews::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
void SelfNews::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
 const ::std::string& SelfNews::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Obj)
}
 void SelfNews::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Obj)
}
 void SelfNews::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Obj)
}
 ::std::string* SelfNews::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfNews::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Obj)
}

// optional int64 NewsId = 2;
bool SelfNews::has_newsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SelfNews::set_has_newsid() {
  _has_bits_[0] |= 0x00000002u;
}
void SelfNews::clear_has_newsid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SelfNews::clear_newsid() {
  newsid_ = GOOGLE_LONGLONG(0);
  clear_has_newsid();
}
 ::google::protobuf::int64 SelfNews::newsid() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.NewsId)
  return newsid_;
}
 void SelfNews::set_newsid(::google::protobuf::int64 value) {
  set_has_newsid();
  newsid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.NewsId)
}

// optional string Date = 3;
bool SelfNews::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SelfNews::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
void SelfNews::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void SelfNews::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& SelfNews::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Date)
}
 void SelfNews::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Date)
}
 void SelfNews::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Date)
}
 ::std::string* SelfNews::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfNews::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Date)
}

// optional string Title = 4;
bool SelfNews::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SelfNews::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void SelfNews::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void SelfNews::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& SelfNews::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Title)
}
 void SelfNews::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Title)
}
 void SelfNews::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Title)
}
 ::std::string* SelfNews::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfNews::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Title)
}

// optional string Context = 5;
bool SelfNews::has_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SelfNews::set_has_context() {
  _has_bits_[0] |= 0x00000010u;
}
void SelfNews::clear_has_context() {
  _has_bits_[0] &= ~0x00000010u;
}
void SelfNews::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& SelfNews::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Context)
}
 void SelfNews::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Context)
}
 void SelfNews::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Context)
}
 ::std::string* SelfNews::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfNews::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Context)
}

// optional string Source = 6;
bool SelfNews::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SelfNews::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
void SelfNews::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
void SelfNews::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
 const ::std::string& SelfNews::source() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Source)
}
 void SelfNews::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Source)
}
 void SelfNews::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Source)
}
 ::std::string* SelfNews::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfNews::release_source() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfNews::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewsClassData::kVersionFieldNumber;
const int NewsClassData::kClassMaskFieldNumber;
const int NewsClassData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewsClassData::NewsClassData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.NewsClassData)
}

void NewsClassData::InitAsDefaultInstance() {
  data_ = const_cast< ::dzhyun::NewsDataItem*>(&::dzhyun::NewsDataItem::default_instance());
}

NewsClassData::NewsClassData(const NewsClassData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.NewsClassData)
}

void NewsClassData::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  classmask_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewsClassData::~NewsClassData() {
  // @@protoc_insertion_point(destructor:dzhyun.NewsClassData)
  SharedDtor();
}

void NewsClassData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void NewsClassData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsClassData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewsClassData_descriptor_;
}

const NewsClassData& NewsClassData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

NewsClassData* NewsClassData::default_instance_ = NULL;

NewsClassData* NewsClassData::New(::google::protobuf::Arena* arena) const {
  NewsClassData* n = new NewsClassData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewsClassData::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.NewsClassData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NewsClassData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NewsClassData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, classmask_);
    if (has_data()) {
      if (data_ != NULL) data_->::dzhyun::NewsDataItem::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NewsClassData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.NewsClassData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ClassMask;
        break;
      }

      // optional int64 ClassMask = 2;
      case 2: {
        if (tag == 16) {
         parse_ClassMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &classmask_)));
          set_has_classmask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }

      // optional .dzhyun.NewsDataItem Data = 3;
      case 3: {
        if (tag == 26) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.NewsClassData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.NewsClassData)
  return false;
#undef DO_
}

void NewsClassData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.NewsClassData)
  // required int64 Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // optional int64 ClassMask = 2;
  if (has_classmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->classmask(), output);
  }

  // optional .dzhyun.NewsDataItem Data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.NewsClassData)
}

::google::protobuf::uint8* NewsClassData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.NewsClassData)
  // required int64 Version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->version(), target);
  }

  // optional int64 ClassMask = 2;
  if (has_classmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->classmask(), target);
  }

  // optional .dzhyun.NewsDataItem Data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.NewsClassData)
  return target;
}

int NewsClassData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.NewsClassData)
  int total_size = 0;

  // required int64 Version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int64 ClassMask = 2;
    if (has_classmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->classmask());
    }

    // optional .dzhyun.NewsDataItem Data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsClassData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.NewsClassData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NewsClassData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewsClassData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.NewsClassData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.NewsClassData)
    MergeFrom(*source);
  }
}

void NewsClassData::MergeFrom(const NewsClassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.NewsClassData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_classmask()) {
      set_classmask(from.classmask());
    }
    if (from.has_data()) {
      mutable_data()->::dzhyun::NewsDataItem::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NewsClassData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.NewsClassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsClassData::CopyFrom(const NewsClassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.NewsClassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsClassData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NewsClassData::Swap(NewsClassData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewsClassData::InternalSwap(NewsClassData* other) {
  std::swap(version_, other->version_);
  std::swap(classmask_, other->classmask_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewsClassData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewsClassData_descriptor_;
  metadata.reflection = NewsClassData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewsClassData

// required int64 Version = 1;
bool NewsClassData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewsClassData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void NewsClassData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewsClassData::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::int64 NewsClassData::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsClassData.Version)
  return version_;
}
 void NewsClassData::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.NewsClassData.Version)
}

// optional int64 ClassMask = 2;
bool NewsClassData::has_classmask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewsClassData::set_has_classmask() {
  _has_bits_[0] |= 0x00000002u;
}
void NewsClassData::clear_has_classmask() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewsClassData::clear_classmask() {
  classmask_ = GOOGLE_LONGLONG(0);
  clear_has_classmask();
}
 ::google::protobuf::int64 NewsClassData::classmask() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsClassData.ClassMask)
  return classmask_;
}
 void NewsClassData::set_classmask(::google::protobuf::int64 value) {
  set_has_classmask();
  classmask_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.NewsClassData.ClassMask)
}

// optional .dzhyun.NewsDataItem Data = 3;
bool NewsClassData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewsClassData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void NewsClassData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewsClassData::clear_data() {
  if (data_ != NULL) data_->::dzhyun::NewsDataItem::Clear();
  clear_has_data();
}
const ::dzhyun::NewsDataItem& NewsClassData::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsClassData.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::dzhyun::NewsDataItem* NewsClassData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::NewsDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsClassData.Data)
  return data_;
}
::dzhyun::NewsDataItem* NewsClassData::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsClassData.Data)
  clear_has_data();
  ::dzhyun::NewsDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
void NewsClassData::set_allocated_data(::dzhyun::NewsDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsClassData.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnouncemtDataItem::kDateFieldNumber;
const int AnnouncemtDataItem::kAnnouncemIdFieldNumber;
const int AnnouncemtDataItem::kTitleFieldNumber;
const int AnnouncemtDataItem::kContextFieldNumber;
const int AnnouncemtDataItem::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnouncemtDataItem::AnnouncemtDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.AnnouncemtDataItem)
}

void AnnouncemtDataItem::InitAsDefaultInstance() {
}

AnnouncemtDataItem::AnnouncemtDataItem(const AnnouncemtDataItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.AnnouncemtDataItem)
}

void AnnouncemtDataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcemid_ = GOOGLE_LONGLONG(0);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnouncemtDataItem::~AnnouncemtDataItem() {
  // @@protoc_insertion_point(destructor:dzhyun.AnnouncemtDataItem)
  SharedDtor();
}

void AnnouncemtDataItem::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AnnouncemtDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnouncemtDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnouncemtDataItem_descriptor_;
}

const AnnouncemtDataItem& AnnouncemtDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

AnnouncemtDataItem* AnnouncemtDataItem::default_instance_ = NULL;

AnnouncemtDataItem* AnnouncemtDataItem::New(::google::protobuf::Arena* arena) const {
  AnnouncemtDataItem* n = new AnnouncemtDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnouncemtDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.AnnouncemtDataItem)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    announcemid_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AnnouncemtDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.AnnouncemtDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.AnnouncemtDataItem.Date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AnnouncemId;
        break;
      }

      // required int64 AnnouncemId = 2;
      case 2: {
        if (tag == 16) {
         parse_AnnouncemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &announcemid_)));
          set_has_announcemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Title;
        break;
      }

      // optional string Title = 3;
      case 3: {
        if (tag == 26) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.AnnouncemtDataItem.Title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Context;
        break;
      }

      // optional string Context = 4;
      case 4: {
        if (tag == 34) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.AnnouncemtDataItem.Context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // optional string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.AnnouncemtDataItem.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.AnnouncemtDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.AnnouncemtDataItem)
  return false;
#undef DO_
}

void AnnouncemtDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.AnnouncemtDataItem)
  // optional string Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->date(), output);
  }

  // required int64 AnnouncemId = 2;
  if (has_announcemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->announcemid(), output);
  }

  // optional string Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string Context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->context(), output);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.AnnouncemtDataItem)
}

::google::protobuf::uint8* AnnouncemtDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.AnnouncemtDataItem)
  // optional string Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date(), target);
  }

  // required int64 AnnouncemId = 2;
  if (has_announcemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->announcemid(), target);
  }

  // optional string Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string Context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->context(), target);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.AnnouncemtDataItem.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.AnnouncemtDataItem)
  return target;
}

int AnnouncemtDataItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.AnnouncemtDataItem)
  int total_size = 0;

  // required int64 AnnouncemId = 2;
  if (has_announcemid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->announcemid());
  }
  if (_has_bits_[0 / 32] & 29u) {
    // optional string Date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnouncemtDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.AnnouncemtDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnnouncemtDataItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnouncemtDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.AnnouncemtDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.AnnouncemtDataItem)
    MergeFrom(*source);
  }
}

void AnnouncemtDataItem::MergeFrom(const AnnouncemtDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.AnnouncemtDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_announcemid()) {
      set_announcemid(from.announcemid());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AnnouncemtDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.AnnouncemtDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnouncemtDataItem::CopyFrom(const AnnouncemtDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.AnnouncemtDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnouncemtDataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void AnnouncemtDataItem::Swap(AnnouncemtDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnouncemtDataItem::InternalSwap(AnnouncemtDataItem* other) {
  date_.Swap(&other->date_);
  std::swap(announcemid_, other->announcemid_);
  title_.Swap(&other->title_);
  context_.Swap(&other->context_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnouncemtDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnouncemtDataItem_descriptor_;
  metadata.reflection = AnnouncemtDataItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnouncemtDataItem

// optional string Date = 1;
bool AnnouncemtDataItem::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnnouncemtDataItem::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void AnnouncemtDataItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnnouncemtDataItem::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& AnnouncemtDataItem::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.Date)
}
 void AnnouncemtDataItem::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.Date)
}
 void AnnouncemtDataItem::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.Date)
}
 ::std::string* AnnouncemtDataItem::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AnnouncemtDataItem::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.Date)
}

// required int64 AnnouncemId = 2;
bool AnnouncemtDataItem::has_announcemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnnouncemtDataItem::set_has_announcemid() {
  _has_bits_[0] |= 0x00000002u;
}
void AnnouncemtDataItem::clear_has_announcemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnnouncemtDataItem::clear_announcemid() {
  announcemid_ = GOOGLE_LONGLONG(0);
  clear_has_announcemid();
}
 ::google::protobuf::int64 AnnouncemtDataItem::announcemid() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.AnnouncemId)
  return announcemid_;
}
 void AnnouncemtDataItem::set_announcemid(::google::protobuf::int64 value) {
  set_has_announcemid();
  announcemid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.AnnouncemId)
}

// optional string Title = 3;
bool AnnouncemtDataItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AnnouncemtDataItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void AnnouncemtDataItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void AnnouncemtDataItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& AnnouncemtDataItem::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.Title)
}
 void AnnouncemtDataItem::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.Title)
}
 void AnnouncemtDataItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.Title)
}
 ::std::string* AnnouncemtDataItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AnnouncemtDataItem::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.Title)
}

// optional string Context = 4;
bool AnnouncemtDataItem::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AnnouncemtDataItem::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
void AnnouncemtDataItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
void AnnouncemtDataItem::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& AnnouncemtDataItem::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.Context)
}
 void AnnouncemtDataItem::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.Context)
}
 void AnnouncemtDataItem::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.Context)
}
 ::std::string* AnnouncemtDataItem::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AnnouncemtDataItem::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.Context)
}

// optional string type = 5;
bool AnnouncemtDataItem::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AnnouncemtDataItem::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void AnnouncemtDataItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void AnnouncemtDataItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& AnnouncemtDataItem::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.type)
}
 void AnnouncemtDataItem::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.type)
}
 void AnnouncemtDataItem::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.type)
}
 ::std::string* AnnouncemtDataItem::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AnnouncemtDataItem::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AnnouncemtDataItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockAnnouncemt::kObjFieldNumber;
const int StockAnnouncemt::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockAnnouncemt::StockAnnouncemt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.StockAnnouncemt)
}

void StockAnnouncemt::InitAsDefaultInstance() {
}

StockAnnouncemt::StockAnnouncemt(const StockAnnouncemt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.StockAnnouncemt)
}

void StockAnnouncemt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockAnnouncemt::~StockAnnouncemt() {
  // @@protoc_insertion_point(destructor:dzhyun.StockAnnouncemt)
  SharedDtor();
}

void StockAnnouncemt::SharedDtor() {
  obj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockAnnouncemt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockAnnouncemt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockAnnouncemt_descriptor_;
}

const StockAnnouncemt& StockAnnouncemt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

StockAnnouncemt* StockAnnouncemt::default_instance_ = NULL;

StockAnnouncemt* StockAnnouncemt::New(::google::protobuf::Arena* arena) const {
  StockAnnouncemt* n = new StockAnnouncemt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockAnnouncemt::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.StockAnnouncemt)
  if (has_obj()) {
    obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockAnnouncemt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.StockAnnouncemt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.StockAnnouncemt.Obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.AnnouncemtDataItem Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.StockAnnouncemt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.StockAnnouncemt)
  return false;
#undef DO_
}

void StockAnnouncemt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.StockAnnouncemt)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockAnnouncemt.Obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj(), output);
  }

  // repeated .dzhyun.AnnouncemtDataItem Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.StockAnnouncemt)
}

::google::protobuf::uint8* StockAnnouncemt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.StockAnnouncemt)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockAnnouncemt.Obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  // repeated .dzhyun.AnnouncemtDataItem Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.StockAnnouncemt)
  return target;
}

int StockAnnouncemt::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.StockAnnouncemt)
  int total_size = 0;

  // required string Obj = 1;
  if (has_obj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());
  }
  // repeated .dzhyun.AnnouncemtDataItem Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockAnnouncemt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.StockAnnouncemt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockAnnouncemt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockAnnouncemt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.StockAnnouncemt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.StockAnnouncemt)
    MergeFrom(*source);
  }
}

void StockAnnouncemt::MergeFrom(const StockAnnouncemt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.StockAnnouncemt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_has_obj();
      obj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockAnnouncemt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.StockAnnouncemt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockAnnouncemt::CopyFrom(const StockAnnouncemt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.StockAnnouncemt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockAnnouncemt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void StockAnnouncemt::Swap(StockAnnouncemt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockAnnouncemt::InternalSwap(StockAnnouncemt* other) {
  obj_.Swap(&other->obj_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockAnnouncemt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockAnnouncemt_descriptor_;
  metadata.reflection = StockAnnouncemt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockAnnouncemt

// required string Obj = 1;
bool StockAnnouncemt::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockAnnouncemt::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
void StockAnnouncemt::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockAnnouncemt::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
 const ::std::string& StockAnnouncemt::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockAnnouncemt.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockAnnouncemt::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockAnnouncemt.Obj)
}
 void StockAnnouncemt::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockAnnouncemt.Obj)
}
 void StockAnnouncemt::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockAnnouncemt.Obj)
}
 ::std::string* StockAnnouncemt::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockAnnouncemt.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockAnnouncemt::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.StockAnnouncemt.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockAnnouncemt::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockAnnouncemt.Obj)
}

// repeated .dzhyun.AnnouncemtDataItem Data = 2;
int StockAnnouncemt::data_size() const {
  return data_.size();
}
void StockAnnouncemt::clear_data() {
  data_.Clear();
}
const ::dzhyun::AnnouncemtDataItem& StockAnnouncemt::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockAnnouncemt.Data)
  return data_.Get(index);
}
::dzhyun::AnnouncemtDataItem* StockAnnouncemt::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockAnnouncemt.Data)
  return data_.Mutable(index);
}
::dzhyun::AnnouncemtDataItem* StockAnnouncemt::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockAnnouncemt.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem >*
StockAnnouncemt::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockAnnouncemt.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem >&
StockAnnouncemt::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockAnnouncemt.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfAnnouncemt::kObjFieldNumber;
const int SelfAnnouncemt::kDateFieldNumber;
const int SelfAnnouncemt::kAnnouncemIdFieldNumber;
const int SelfAnnouncemt::kTitleFieldNumber;
const int SelfAnnouncemt::kContextFieldNumber;
const int SelfAnnouncemt::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfAnnouncemt::SelfAnnouncemt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.SelfAnnouncemt)
}

void SelfAnnouncemt::InitAsDefaultInstance() {
}

SelfAnnouncemt::SelfAnnouncemt(const SelfAnnouncemt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.SelfAnnouncemt)
}

void SelfAnnouncemt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcemid_ = GOOGLE_LONGLONG(0);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfAnnouncemt::~SelfAnnouncemt() {
  // @@protoc_insertion_point(destructor:dzhyun.SelfAnnouncemt)
  SharedDtor();
}

void SelfAnnouncemt::SharedDtor() {
  obj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SelfAnnouncemt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfAnnouncemt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfAnnouncemt_descriptor_;
}

const SelfAnnouncemt& SelfAnnouncemt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

SelfAnnouncemt* SelfAnnouncemt::default_instance_ = NULL;

SelfAnnouncemt* SelfAnnouncemt::New(::google::protobuf::Arena* arena) const {
  SelfAnnouncemt* n = new SelfAnnouncemt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelfAnnouncemt::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.SelfAnnouncemt)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_obj()) {
      obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    announcemid_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SelfAnnouncemt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.SelfAnnouncemt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfAnnouncemt.Obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Date;
        break;
      }

      // optional string Date = 2;
      case 2: {
        if (tag == 18) {
         parse_Date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfAnnouncemt.Date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AnnouncemId;
        break;
      }

      // required int64 AnnouncemId = 3;
      case 3: {
        if (tag == 24) {
         parse_AnnouncemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &announcemid_)));
          set_has_announcemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Title;
        break;
      }

      // optional string Title = 4;
      case 4: {
        if (tag == 34) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfAnnouncemt.Title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Context;
        break;
      }

      // optional string Context = 5;
      case 5: {
        if (tag == 42) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfAnnouncemt.Context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (tag == 50) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfAnnouncemt.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.SelfAnnouncemt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.SelfAnnouncemt)
  return false;
#undef DO_
}

void SelfAnnouncemt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.SelfAnnouncemt)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj(), output);
  }

  // optional string Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // required int64 AnnouncemId = 3;
  if (has_announcemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->announcemid(), output);
  }

  // optional string Title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string Context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->context(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.SelfAnnouncemt)
}

::google::protobuf::uint8* SelfAnnouncemt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.SelfAnnouncemt)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  // optional string Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // required int64 AnnouncemId = 3;
  if (has_announcemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->announcemid(), target);
  }

  // optional string Title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string Context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->context(), target);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfAnnouncemt.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.SelfAnnouncemt)
  return target;
}

int SelfAnnouncemt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dzhyun.SelfAnnouncemt)
  int total_size = 0;

  if (has_obj()) {
    // required string Obj = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());
  }

  if (has_announcemid()) {
    // required int64 AnnouncemId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->announcemid());
  }

  return total_size;
}
int SelfAnnouncemt::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.SelfAnnouncemt)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string Obj = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());

    // required int64 AnnouncemId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->announcemid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 58u) {
    // optional string Date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Context = 5;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfAnnouncemt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.SelfAnnouncemt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SelfAnnouncemt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelfAnnouncemt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.SelfAnnouncemt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.SelfAnnouncemt)
    MergeFrom(*source);
  }
}

void SelfAnnouncemt::MergeFrom(const SelfAnnouncemt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.SelfAnnouncemt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_has_obj();
      obj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_);
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_announcemid()) {
      set_announcemid(from.announcemid());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SelfAnnouncemt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.SelfAnnouncemt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfAnnouncemt::CopyFrom(const SelfAnnouncemt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.SelfAnnouncemt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfAnnouncemt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void SelfAnnouncemt::Swap(SelfAnnouncemt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfAnnouncemt::InternalSwap(SelfAnnouncemt* other) {
  obj_.Swap(&other->obj_);
  date_.Swap(&other->date_);
  std::swap(announcemid_, other->announcemid_);
  title_.Swap(&other->title_);
  context_.Swap(&other->context_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelfAnnouncemt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfAnnouncemt_descriptor_;
  metadata.reflection = SelfAnnouncemt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelfAnnouncemt

// required string Obj = 1;
bool SelfAnnouncemt::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SelfAnnouncemt::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
void SelfAnnouncemt::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
void SelfAnnouncemt::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
 const ::std::string& SelfAnnouncemt::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Obj)
}
 void SelfAnnouncemt::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Obj)
}
 void SelfAnnouncemt::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Obj)
}
 ::std::string* SelfAnnouncemt::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfAnnouncemt::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Obj)
}

// optional string Date = 2;
bool SelfAnnouncemt::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SelfAnnouncemt::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
void SelfAnnouncemt::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void SelfAnnouncemt::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& SelfAnnouncemt::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Date)
}
 void SelfAnnouncemt::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Date)
}
 void SelfAnnouncemt::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Date)
}
 ::std::string* SelfAnnouncemt::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfAnnouncemt::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Date)
}

// required int64 AnnouncemId = 3;
bool SelfAnnouncemt::has_announcemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SelfAnnouncemt::set_has_announcemid() {
  _has_bits_[0] |= 0x00000004u;
}
void SelfAnnouncemt::clear_has_announcemid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SelfAnnouncemt::clear_announcemid() {
  announcemid_ = GOOGLE_LONGLONG(0);
  clear_has_announcemid();
}
 ::google::protobuf::int64 SelfAnnouncemt::announcemid() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.AnnouncemId)
  return announcemid_;
}
 void SelfAnnouncemt::set_announcemid(::google::protobuf::int64 value) {
  set_has_announcemid();
  announcemid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.AnnouncemId)
}

// optional string Title = 4;
bool SelfAnnouncemt::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SelfAnnouncemt::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void SelfAnnouncemt::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void SelfAnnouncemt::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& SelfAnnouncemt::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Title)
}
 void SelfAnnouncemt::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Title)
}
 void SelfAnnouncemt::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Title)
}
 ::std::string* SelfAnnouncemt::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfAnnouncemt::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Title)
}

// optional string Context = 5;
bool SelfAnnouncemt::has_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SelfAnnouncemt::set_has_context() {
  _has_bits_[0] |= 0x00000010u;
}
void SelfAnnouncemt::clear_has_context() {
  _has_bits_[0] &= ~0x00000010u;
}
void SelfAnnouncemt::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& SelfAnnouncemt::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Context)
}
 void SelfAnnouncemt::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Context)
}
 void SelfAnnouncemt::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Context)
}
 ::std::string* SelfAnnouncemt::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfAnnouncemt::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Context)
}

// optional string type = 6;
bool SelfAnnouncemt::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SelfAnnouncemt::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SelfAnnouncemt::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SelfAnnouncemt::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& SelfAnnouncemt::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.type)
}
 void SelfAnnouncemt::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.type)
}
 void SelfAnnouncemt::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.type)
}
 ::std::string* SelfAnnouncemt::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfAnnouncemt::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfAnnouncemt::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerNewsDataItem::kVersionFieldNumber;
const int InnerNewsDataItem::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerNewsDataItem::InnerNewsDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.InnerNewsDataItem)
}

void InnerNewsDataItem::InitAsDefaultInstance() {
  data_ = const_cast< ::dzhyun::NewsDataItem*>(&::dzhyun::NewsDataItem::default_instance());
}

InnerNewsDataItem::InnerNewsDataItem(const InnerNewsDataItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.InnerNewsDataItem)
}

void InnerNewsDataItem::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerNewsDataItem::~InnerNewsDataItem() {
  // @@protoc_insertion_point(destructor:dzhyun.InnerNewsDataItem)
  SharedDtor();
}

void InnerNewsDataItem::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void InnerNewsDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerNewsDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerNewsDataItem_descriptor_;
}

const InnerNewsDataItem& InnerNewsDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

InnerNewsDataItem* InnerNewsDataItem::default_instance_ = NULL;

InnerNewsDataItem* InnerNewsDataItem::New(::google::protobuf::Arena* arena) const {
  InnerNewsDataItem* n = new InnerNewsDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerNewsDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.InnerNewsDataItem)
  if (_has_bits_[0 / 32] & 3u) {
    version_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::dzhyun::NewsDataItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnerNewsDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.InnerNewsDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional .dzhyun.NewsDataItem Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.InnerNewsDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.InnerNewsDataItem)
  return false;
#undef DO_
}

void InnerNewsDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.InnerNewsDataItem)
  // required int64 Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // optional .dzhyun.NewsDataItem Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.InnerNewsDataItem)
}

::google::protobuf::uint8* InnerNewsDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.InnerNewsDataItem)
  // required int64 Version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->version(), target);
  }

  // optional .dzhyun.NewsDataItem Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.InnerNewsDataItem)
  return target;
}

int InnerNewsDataItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.InnerNewsDataItem)
  int total_size = 0;

  // required int64 Version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }
  // optional .dzhyun.NewsDataItem Data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerNewsDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.InnerNewsDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InnerNewsDataItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerNewsDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.InnerNewsDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.InnerNewsDataItem)
    MergeFrom(*source);
  }
}

void InnerNewsDataItem::MergeFrom(const InnerNewsDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.InnerNewsDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_data()) {
      mutable_data()->::dzhyun::NewsDataItem::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnerNewsDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.InnerNewsDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerNewsDataItem::CopyFrom(const InnerNewsDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.InnerNewsDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerNewsDataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InnerNewsDataItem::Swap(InnerNewsDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerNewsDataItem::InternalSwap(InnerNewsDataItem* other) {
  std::swap(version_, other->version_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerNewsDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerNewsDataItem_descriptor_;
  metadata.reflection = InnerNewsDataItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerNewsDataItem

// required int64 Version = 1;
bool InnerNewsDataItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerNewsDataItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerNewsDataItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerNewsDataItem::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::int64 InnerNewsDataItem::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerNewsDataItem.Version)
  return version_;
}
 void InnerNewsDataItem::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.InnerNewsDataItem.Version)
}

// optional .dzhyun.NewsDataItem Data = 2;
bool InnerNewsDataItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerNewsDataItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerNewsDataItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerNewsDataItem::clear_data() {
  if (data_ != NULL) data_->::dzhyun::NewsDataItem::Clear();
  clear_has_data();
}
const ::dzhyun::NewsDataItem& InnerNewsDataItem::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerNewsDataItem.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::dzhyun::NewsDataItem* InnerNewsDataItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::NewsDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.InnerNewsDataItem.Data)
  return data_;
}
::dzhyun::NewsDataItem* InnerNewsDataItem::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.InnerNewsDataItem.Data)
  clear_has_data();
  ::dzhyun::NewsDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
void InnerNewsDataItem::set_allocated_data(::dzhyun::NewsDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.InnerNewsDataItem.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerAnnouncemtDataItem::kVersionFieldNumber;
const int InnerAnnouncemtDataItem::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerAnnouncemtDataItem::InnerAnnouncemtDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.InnerAnnouncemtDataItem)
}

void InnerAnnouncemtDataItem::InitAsDefaultInstance() {
  data_ = const_cast< ::dzhyun::AnnouncemtDataItem*>(&::dzhyun::AnnouncemtDataItem::default_instance());
}

InnerAnnouncemtDataItem::InnerAnnouncemtDataItem(const InnerAnnouncemtDataItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.InnerAnnouncemtDataItem)
}

void InnerAnnouncemtDataItem::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerAnnouncemtDataItem::~InnerAnnouncemtDataItem() {
  // @@protoc_insertion_point(destructor:dzhyun.InnerAnnouncemtDataItem)
  SharedDtor();
}

void InnerAnnouncemtDataItem::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void InnerAnnouncemtDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerAnnouncemtDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerAnnouncemtDataItem_descriptor_;
}

const InnerAnnouncemtDataItem& InnerAnnouncemtDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

InnerAnnouncemtDataItem* InnerAnnouncemtDataItem::default_instance_ = NULL;

InnerAnnouncemtDataItem* InnerAnnouncemtDataItem::New(::google::protobuf::Arena* arena) const {
  InnerAnnouncemtDataItem* n = new InnerAnnouncemtDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerAnnouncemtDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.InnerAnnouncemtDataItem)
  if (_has_bits_[0 / 32] & 3u) {
    version_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::dzhyun::AnnouncemtDataItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnerAnnouncemtDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.InnerAnnouncemtDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional .dzhyun.AnnouncemtDataItem Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.InnerAnnouncemtDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.InnerAnnouncemtDataItem)
  return false;
#undef DO_
}

void InnerAnnouncemtDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.InnerAnnouncemtDataItem)
  // required int64 Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // optional .dzhyun.AnnouncemtDataItem Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.InnerAnnouncemtDataItem)
}

::google::protobuf::uint8* InnerAnnouncemtDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.InnerAnnouncemtDataItem)
  // required int64 Version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->version(), target);
  }

  // optional .dzhyun.AnnouncemtDataItem Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.InnerAnnouncemtDataItem)
  return target;
}

int InnerAnnouncemtDataItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.InnerAnnouncemtDataItem)
  int total_size = 0;

  // required int64 Version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }
  // optional .dzhyun.AnnouncemtDataItem Data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerAnnouncemtDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.InnerAnnouncemtDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InnerAnnouncemtDataItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerAnnouncemtDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.InnerAnnouncemtDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.InnerAnnouncemtDataItem)
    MergeFrom(*source);
  }
}

void InnerAnnouncemtDataItem::MergeFrom(const InnerAnnouncemtDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.InnerAnnouncemtDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_data()) {
      mutable_data()->::dzhyun::AnnouncemtDataItem::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnerAnnouncemtDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.InnerAnnouncemtDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerAnnouncemtDataItem::CopyFrom(const InnerAnnouncemtDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.InnerAnnouncemtDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerAnnouncemtDataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void InnerAnnouncemtDataItem::Swap(InnerAnnouncemtDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerAnnouncemtDataItem::InternalSwap(InnerAnnouncemtDataItem* other) {
  std::swap(version_, other->version_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerAnnouncemtDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerAnnouncemtDataItem_descriptor_;
  metadata.reflection = InnerAnnouncemtDataItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerAnnouncemtDataItem

// required int64 Version = 1;
bool InnerAnnouncemtDataItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerAnnouncemtDataItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerAnnouncemtDataItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerAnnouncemtDataItem::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::int64 InnerAnnouncemtDataItem::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerAnnouncemtDataItem.Version)
  return version_;
}
 void InnerAnnouncemtDataItem::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.InnerAnnouncemtDataItem.Version)
}

// optional .dzhyun.AnnouncemtDataItem Data = 2;
bool InnerAnnouncemtDataItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerAnnouncemtDataItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerAnnouncemtDataItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerAnnouncemtDataItem::clear_data() {
  if (data_ != NULL) data_->::dzhyun::AnnouncemtDataItem::Clear();
  clear_has_data();
}
const ::dzhyun::AnnouncemtDataItem& InnerAnnouncemtDataItem::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerAnnouncemtDataItem.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::dzhyun::AnnouncemtDataItem* InnerAnnouncemtDataItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::AnnouncemtDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.InnerAnnouncemtDataItem.Data)
  return data_;
}
::dzhyun::AnnouncemtDataItem* InnerAnnouncemtDataItem::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.InnerAnnouncemtDataItem.Data)
  clear_has_data();
  ::dzhyun::AnnouncemtDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
void InnerAnnouncemtDataItem::set_allocated_data(::dzhyun::AnnouncemtDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.InnerAnnouncemtDataItem.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportDataItem::kIdFieldNumber;
const int ReportDataItem::kDateFieldNumber;
const int ReportDataItem::kTitleFieldNumber;
const int ReportDataItem::kOrganizationFieldNumber;
const int ReportDataItem::kContextFieldNumber;
const int ReportDataItem::kTypeFieldNumber;
const int ReportDataItem::kRateClassFieldNumber;
const int ReportDataItem::kRateDirectionFieldNumber;
const int ReportDataItem::kAuthorFieldNumber;
const int ReportDataItem::kHightPriceFieldNumber;
const int ReportDataItem::kLowPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportDataItem::ReportDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.ReportDataItem)
}

void ReportDataItem::InitAsDefaultInstance() {
}

ReportDataItem::ReportDataItem(const ReportDataItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.ReportDataItem)
}

void ReportDataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rateclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ratedirection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hightprice_ = GOOGLE_LONGLONG(0);
  lowprice_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDataItem::~ReportDataItem() {
  // @@protoc_insertion_point(destructor:dzhyun.ReportDataItem)
  SharedDtor();
}

void ReportDataItem::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rateclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ratedirection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReportDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDataItem_descriptor_;
}

const ReportDataItem& ReportDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

ReportDataItem* ReportDataItem::default_instance_ = NULL;

ReportDataItem* ReportDataItem::New(::google::protobuf::Arena* arena) const {
  ReportDataItem* n = new ReportDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.ReportDataItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReportDataItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReportDataItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_organization()) {
      organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rateclass()) {
      rateclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ratedirection()) {
      ratedirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(hightprice_, lowprice_);
    if (has_author()) {
      author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReportDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.ReportDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Date;
        break;
      }

      // optional string Date = 2;
      case 2: {
        if (tag == 18) {
         parse_Date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.Date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Title;
        break;
      }

      // optional string Title = 3;
      case 3: {
        if (tag == 26) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.Title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Organization;
        break;
      }

      // optional string Organization = 4;
      case 4: {
        if (tag == 34) {
         parse_Organization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->organization().data(), this->organization().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.Organization");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Context;
        break;
      }

      // optional string Context = 5;
      case 5: {
        if (tag == 42) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.Context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (tag == 50) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RateClass;
        break;
      }

      // optional string RateClass = 7;
      case 7: {
        if (tag == 58) {
         parse_RateClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rateclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rateclass().data(), this->rateclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.RateClass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RateDirection;
        break;
      }

      // optional string RateDirection = 8;
      case 8: {
        if (tag == 66) {
         parse_RateDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ratedirection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ratedirection().data(), this->ratedirection().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.RateDirection");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Author;
        break;
      }

      // optional string Author = 9;
      case 9: {
        if (tag == 74) {
         parse_Author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.ReportDataItem.Author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HightPrice;
        break;
      }

      // optional int64 HightPrice = 10;
      case 10: {
        if (tag == 80) {
         parse_HightPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hightprice_)));
          set_has_hightprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LowPrice;
        break;
      }

      // optional int64 LowPrice = 11;
      case 11: {
        if (tag == 88) {
         parse_LowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowprice_)));
          set_has_lowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.ReportDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.ReportDataItem)
  return false;
#undef DO_
}

void ReportDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.ReportDataItem)
  // optional int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional string Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string Organization = 4;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Organization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->organization(), output);
  }

  // optional string Context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->context(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // optional string RateClass = 7;
  if (has_rateclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rateclass().data(), this->rateclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.RateClass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rateclass(), output);
  }

  // optional string RateDirection = 8;
  if (has_ratedirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ratedirection().data(), this->ratedirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.RateDirection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ratedirection(), output);
  }

  // optional string Author = 9;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->author(), output);
  }

  // optional int64 HightPrice = 10;
  if (has_hightprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->hightprice(), output);
  }

  // optional int64 LowPrice = 11;
  if (has_lowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lowprice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.ReportDataItem)
}

::google::protobuf::uint8* ReportDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.ReportDataItem)
  // optional int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string Organization = 4;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Organization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->organization(), target);
  }

  // optional string Context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->context(), target);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // optional string RateClass = 7;
  if (has_rateclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rateclass().data(), this->rateclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.RateClass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rateclass(), target);
  }

  // optional string RateDirection = 8;
  if (has_ratedirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ratedirection().data(), this->ratedirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.RateDirection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ratedirection(), target);
  }

  // optional string Author = 9;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.ReportDataItem.Author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->author(), target);
  }

  // optional int64 HightPrice = 10;
  if (has_hightprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->hightprice(), target);
  }

  // optional int64 LowPrice = 11;
  if (has_lowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->lowprice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.ReportDataItem)
  return target;
}

int ReportDataItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.ReportDataItem)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string Date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Organization = 4;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->organization());
    }

    // optional string Context = 5;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string RateClass = 7;
    if (has_rateclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rateclass());
    }

    // optional string RateDirection = 8;
    if (has_ratedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ratedirection());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string Author = 9;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional int64 HightPrice = 10;
    if (has_hightprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hightprice());
    }

    // optional int64 LowPrice = 11;
    if (has_lowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowprice());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.ReportDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReportDataItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.ReportDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.ReportDataItem)
    MergeFrom(*source);
  }
}

void ReportDataItem::MergeFrom(const ReportDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.ReportDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_organization()) {
      set_has_organization();
      organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_rateclass()) {
      set_has_rateclass();
      rateclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rateclass_);
    }
    if (from.has_ratedirection()) {
      set_has_ratedirection();
      ratedirection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ratedirection_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_author()) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
    if (from.has_hightprice()) {
      set_hightprice(from.hightprice());
    }
    if (from.has_lowprice()) {
      set_lowprice(from.lowprice());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReportDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.ReportDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDataItem::CopyFrom(const ReportDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.ReportDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDataItem::IsInitialized() const {

  return true;
}

void ReportDataItem::Swap(ReportDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportDataItem::InternalSwap(ReportDataItem* other) {
  std::swap(id_, other->id_);
  date_.Swap(&other->date_);
  title_.Swap(&other->title_);
  organization_.Swap(&other->organization_);
  context_.Swap(&other->context_);
  type_.Swap(&other->type_);
  rateclass_.Swap(&other->rateclass_);
  ratedirection_.Swap(&other->ratedirection_);
  author_.Swap(&other->author_);
  std::swap(hightprice_, other->hightprice_);
  std::swap(lowprice_, other->lowprice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDataItem_descriptor_;
  metadata.reflection = ReportDataItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportDataItem

// optional int64 Id = 1;
bool ReportDataItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportDataItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportDataItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportDataItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 ReportDataItem::id() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Id)
  return id_;
}
 void ReportDataItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Id)
}

// optional string Date = 2;
bool ReportDataItem::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReportDataItem::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
void ReportDataItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReportDataItem::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& ReportDataItem::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Date)
}
 void ReportDataItem::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Date)
}
 void ReportDataItem::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Date)
}
 ::std::string* ReportDataItem::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Date)
}

// optional string Title = 3;
bool ReportDataItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReportDataItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void ReportDataItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReportDataItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& ReportDataItem::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Title)
}
 void ReportDataItem::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Title)
}
 void ReportDataItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Title)
}
 ::std::string* ReportDataItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Title)
}

// optional string Organization = 4;
bool ReportDataItem::has_organization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReportDataItem::set_has_organization() {
  _has_bits_[0] |= 0x00000008u;
}
void ReportDataItem::clear_has_organization() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReportDataItem::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_organization();
}
 const ::std::string& ReportDataItem::organization() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Organization)
  return organization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_organization(const ::std::string& value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Organization)
}
 void ReportDataItem::set_organization(const char* value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Organization)
}
 void ReportDataItem::set_organization(const char* value, size_t size) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Organization)
}
 ::std::string* ReportDataItem::mutable_organization() {
  set_has_organization();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_organization() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Organization)
  clear_has_organization();
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    set_has_organization();
  } else {
    clear_has_organization();
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Organization)
}

// optional string Context = 5;
bool ReportDataItem::has_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReportDataItem::set_has_context() {
  _has_bits_[0] |= 0x00000010u;
}
void ReportDataItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReportDataItem::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& ReportDataItem::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Context)
}
 void ReportDataItem::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Context)
}
 void ReportDataItem::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Context)
}
 ::std::string* ReportDataItem::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Context)
}

// optional string type = 6;
bool ReportDataItem::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReportDataItem::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void ReportDataItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReportDataItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& ReportDataItem::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.type)
}
 void ReportDataItem::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.type)
}
 void ReportDataItem::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.type)
}
 ::std::string* ReportDataItem::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.type)
}

// optional string RateClass = 7;
bool ReportDataItem::has_rateclass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReportDataItem::set_has_rateclass() {
  _has_bits_[0] |= 0x00000040u;
}
void ReportDataItem::clear_has_rateclass() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReportDataItem::clear_rateclass() {
  rateclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rateclass();
}
 const ::std::string& ReportDataItem::rateclass() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.RateClass)
  return rateclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_rateclass(const ::std::string& value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.RateClass)
}
 void ReportDataItem::set_rateclass(const char* value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.RateClass)
}
 void ReportDataItem::set_rateclass(const char* value, size_t size) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.RateClass)
}
 ::std::string* ReportDataItem::mutable_rateclass() {
  set_has_rateclass();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.RateClass)
  return rateclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_rateclass() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.RateClass)
  clear_has_rateclass();
  return rateclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_rateclass(::std::string* rateclass) {
  if (rateclass != NULL) {
    set_has_rateclass();
  } else {
    clear_has_rateclass();
  }
  rateclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rateclass);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.RateClass)
}

// optional string RateDirection = 8;
bool ReportDataItem::has_ratedirection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReportDataItem::set_has_ratedirection() {
  _has_bits_[0] |= 0x00000080u;
}
void ReportDataItem::clear_has_ratedirection() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReportDataItem::clear_ratedirection() {
  ratedirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ratedirection();
}
 const ::std::string& ReportDataItem::ratedirection() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.RateDirection)
  return ratedirection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_ratedirection(const ::std::string& value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.RateDirection)
}
 void ReportDataItem::set_ratedirection(const char* value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.RateDirection)
}
 void ReportDataItem::set_ratedirection(const char* value, size_t size) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.RateDirection)
}
 ::std::string* ReportDataItem::mutable_ratedirection() {
  set_has_ratedirection();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.RateDirection)
  return ratedirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_ratedirection() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.RateDirection)
  clear_has_ratedirection();
  return ratedirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_ratedirection(::std::string* ratedirection) {
  if (ratedirection != NULL) {
    set_has_ratedirection();
  } else {
    clear_has_ratedirection();
  }
  ratedirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratedirection);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.RateDirection)
}

// optional string Author = 9;
bool ReportDataItem::has_author() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ReportDataItem::set_has_author() {
  _has_bits_[0] |= 0x00000100u;
}
void ReportDataItem::clear_has_author() {
  _has_bits_[0] &= ~0x00000100u;
}
void ReportDataItem::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
 const ::std::string& ReportDataItem::author() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Author)
}
 void ReportDataItem::set_author(const char* value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Author)
}
 void ReportDataItem::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Author)
}
 ::std::string* ReportDataItem::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportDataItem::release_author() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportDataItem::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Author)
}

// optional int64 HightPrice = 10;
bool ReportDataItem::has_hightprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ReportDataItem::set_has_hightprice() {
  _has_bits_[0] |= 0x00000200u;
}
void ReportDataItem::clear_has_hightprice() {
  _has_bits_[0] &= ~0x00000200u;
}
void ReportDataItem::clear_hightprice() {
  hightprice_ = GOOGLE_LONGLONG(0);
  clear_has_hightprice();
}
 ::google::protobuf::int64 ReportDataItem::hightprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.HightPrice)
  return hightprice_;
}
 void ReportDataItem::set_hightprice(::google::protobuf::int64 value) {
  set_has_hightprice();
  hightprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.HightPrice)
}

// optional int64 LowPrice = 11;
bool ReportDataItem::has_lowprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ReportDataItem::set_has_lowprice() {
  _has_bits_[0] |= 0x00000400u;
}
void ReportDataItem::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000400u;
}
void ReportDataItem::clear_lowprice() {
  lowprice_ = GOOGLE_LONGLONG(0);
  clear_has_lowprice();
}
 ::google::protobuf::int64 ReportDataItem::lowprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.LowPrice)
  return lowprice_;
}
 void ReportDataItem::set_lowprice(::google::protobuf::int64 value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.LowPrice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockReport::kObjFieldNumber;
const int StockReport::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockReport::StockReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.StockReport)
}

void StockReport::InitAsDefaultInstance() {
}

StockReport::StockReport(const StockReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.StockReport)
}

void StockReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockReport::~StockReport() {
  // @@protoc_insertion_point(destructor:dzhyun.StockReport)
  SharedDtor();
}

void StockReport::SharedDtor() {
  obj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockReport_descriptor_;
}

const StockReport& StockReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

StockReport* StockReport::default_instance_ = NULL;

StockReport* StockReport::New(::google::protobuf::Arena* arena) const {
  StockReport* n = new StockReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockReport::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.StockReport)
  if (has_obj()) {
    obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.StockReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.StockReport.Obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.ReportDataItem Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.StockReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.StockReport)
  return false;
#undef DO_
}

void StockReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.StockReport)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockReport.Obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj(), output);
  }

  // repeated .dzhyun.ReportDataItem Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.StockReport)
}

::google::protobuf::uint8* StockReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.StockReport)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockReport.Obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  // repeated .dzhyun.ReportDataItem Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.StockReport)
  return target;
}

int StockReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.StockReport)
  int total_size = 0;

  // required string Obj = 1;
  if (has_obj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());
  }
  // repeated .dzhyun.ReportDataItem Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.StockReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.StockReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.StockReport)
    MergeFrom(*source);
  }
}

void StockReport::MergeFrom(const StockReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.StockReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_has_obj();
      obj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.StockReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockReport::CopyFrom(const StockReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.StockReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockReport::Swap(StockReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockReport::InternalSwap(StockReport* other) {
  obj_.Swap(&other->obj_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockReport_descriptor_;
  metadata.reflection = StockReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockReport

// required string Obj = 1;
bool StockReport::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockReport::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
void StockReport::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockReport::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
 const ::std::string& StockReport::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockReport.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockReport::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockReport.Obj)
}
 void StockReport::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockReport.Obj)
}
 void StockReport::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockReport.Obj)
}
 ::std::string* StockReport::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockReport.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockReport::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.StockReport.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockReport::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockReport.Obj)
}

// repeated .dzhyun.ReportDataItem Data = 2;
int StockReport::data_size() const {
  return data_.size();
}
void StockReport::clear_data() {
  data_.Clear();
}
const ::dzhyun::ReportDataItem& StockReport::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockReport.Data)
  return data_.Get(index);
}
::dzhyun::ReportDataItem* StockReport::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockReport.Data)
  return data_.Mutable(index);
}
::dzhyun::ReportDataItem* StockReport::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockReport.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem >*
StockReport::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockReport.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem >&
StockReport::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockReport.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfReport::kObjFieldNumber;
const int SelfReport::kIdFieldNumber;
const int SelfReport::kDateFieldNumber;
const int SelfReport::kTitleFieldNumber;
const int SelfReport::kOrganizationFieldNumber;
const int SelfReport::kContextFieldNumber;
const int SelfReport::kTypeFieldNumber;
const int SelfReport::kRateClassFieldNumber;
const int SelfReport::kRateDirectionFieldNumber;
const int SelfReport::kAuthorFieldNumber;
const int SelfReport::kHightPriceFieldNumber;
const int SelfReport::kLowPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfReport::SelfReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.SelfReport)
}

void SelfReport::InitAsDefaultInstance() {
}

SelfReport::SelfReport(const SelfReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.SelfReport)
}

void SelfReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rateclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ratedirection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hightprice_ = GOOGLE_LONGLONG(0);
  lowprice_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfReport::~SelfReport() {
  // @@protoc_insertion_point(destructor:dzhyun.SelfReport)
  SharedDtor();
}

void SelfReport::SharedDtor() {
  obj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rateclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ratedirection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SelfReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfReport_descriptor_;
}

const SelfReport& SelfReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

SelfReport* SelfReport::default_instance_ = NULL;

SelfReport* SelfReport::New(::google::protobuf::Arena* arena) const {
  SelfReport* n = new SelfReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelfReport::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.SelfReport)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SelfReport, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SelfReport*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_obj()) {
      obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = GOOGLE_LONGLONG(0);
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_organization()) {
      organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rateclass()) {
      rateclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(hightprice_, lowprice_);
    if (has_ratedirection()) {
      ratedirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_author()) {
      author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SelfReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.SelfReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.Obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (tag == 16) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Date;
        break;
      }

      // optional string Date = 3;
      case 3: {
        if (tag == 26) {
         parse_Date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.Date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Title;
        break;
      }

      // optional string Title = 4;
      case 4: {
        if (tag == 34) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.Title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Organization;
        break;
      }

      // optional string Organization = 5;
      case 5: {
        if (tag == 42) {
         parse_Organization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->organization().data(), this->organization().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.Organization");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Context;
        break;
      }

      // optional string Context = 6;
      case 6: {
        if (tag == 50) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.Context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // optional string type = 7;
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RateClass;
        break;
      }

      // optional string RateClass = 8;
      case 8: {
        if (tag == 66) {
         parse_RateClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rateclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rateclass().data(), this->rateclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.RateClass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RateDirection;
        break;
      }

      // optional string RateDirection = 9;
      case 9: {
        if (tag == 74) {
         parse_RateDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ratedirection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ratedirection().data(), this->ratedirection().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.RateDirection");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Author;
        break;
      }

      // optional string Author = 10;
      case 10: {
        if (tag == 82) {
         parse_Author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.SelfReport.Author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_HightPrice;
        break;
      }

      // optional int64 HightPrice = 11;
      case 11: {
        if (tag == 88) {
         parse_HightPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hightprice_)));
          set_has_hightprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_LowPrice;
        break;
      }

      // optional int64 LowPrice = 12;
      case 12: {
        if (tag == 96) {
         parse_LowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowprice_)));
          set_has_lowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.SelfReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.SelfReport)
  return false;
#undef DO_
}

void SelfReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.SelfReport)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional string Date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // optional string Title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string Organization = 5;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Organization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->organization(), output);
  }

  // optional string Context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->context(), output);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->type(), output);
  }

  // optional string RateClass = 8;
  if (has_rateclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rateclass().data(), this->rateclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.RateClass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rateclass(), output);
  }

  // optional string RateDirection = 9;
  if (has_ratedirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ratedirection().data(), this->ratedirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.RateDirection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ratedirection(), output);
  }

  // optional string Author = 10;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->author(), output);
  }

  // optional int64 HightPrice = 11;
  if (has_hightprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->hightprice(), output);
  }

  // optional int64 LowPrice = 12;
  if (has_lowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->lowprice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.SelfReport)
}

::google::protobuf::uint8* SelfReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.SelfReport)
  // required string Obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional string Date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  // optional string Title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string Organization = 5;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Organization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->organization(), target);
  }

  // optional string Context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->context(), target);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->type(), target);
  }

  // optional string RateClass = 8;
  if (has_rateclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rateclass().data(), this->rateclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.RateClass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rateclass(), target);
  }

  // optional string RateDirection = 9;
  if (has_ratedirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ratedirection().data(), this->ratedirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.RateDirection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ratedirection(), target);
  }

  // optional string Author = 10;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.SelfReport.Author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->author(), target);
  }

  // optional int64 HightPrice = 11;
  if (has_hightprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->hightprice(), target);
  }

  // optional int64 LowPrice = 12;
  if (has_lowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->lowprice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.SelfReport)
  return target;
}

int SelfReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.SelfReport)
  int total_size = 0;

  // required string Obj = 1;
  if (has_obj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string Date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Organization = 5;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->organization());
    }

    // optional string Context = 6;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string RateClass = 8;
    if (has_rateclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rateclass());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string RateDirection = 9;
    if (has_ratedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ratedirection());
    }

    // optional string Author = 10;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional int64 HightPrice = 11;
    if (has_hightprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hightprice());
    }

    // optional int64 LowPrice = 12;
    if (has_lowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowprice());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.SelfReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SelfReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelfReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.SelfReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.SelfReport)
    MergeFrom(*source);
  }
}

void SelfReport::MergeFrom(const SelfReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.SelfReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_has_obj();
      obj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_organization()) {
      set_has_organization();
      organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_rateclass()) {
      set_has_rateclass();
      rateclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rateclass_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ratedirection()) {
      set_has_ratedirection();
      ratedirection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ratedirection_);
    }
    if (from.has_author()) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
    if (from.has_hightprice()) {
      set_hightprice(from.hightprice());
    }
    if (from.has_lowprice()) {
      set_lowprice(from.lowprice());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SelfReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.SelfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfReport::CopyFrom(const SelfReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.SelfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SelfReport::Swap(SelfReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfReport::InternalSwap(SelfReport* other) {
  obj_.Swap(&other->obj_);
  std::swap(id_, other->id_);
  date_.Swap(&other->date_);
  title_.Swap(&other->title_);
  organization_.Swap(&other->organization_);
  context_.Swap(&other->context_);
  type_.Swap(&other->type_);
  rateclass_.Swap(&other->rateclass_);
  ratedirection_.Swap(&other->ratedirection_);
  author_.Swap(&other->author_);
  std::swap(hightprice_, other->hightprice_);
  std::swap(lowprice_, other->lowprice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelfReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfReport_descriptor_;
  metadata.reflection = SelfReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelfReport

// required string Obj = 1;
bool SelfReport::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SelfReport::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
void SelfReport::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
void SelfReport::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
 const ::std::string& SelfReport::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Obj)
}
 void SelfReport::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Obj)
}
 void SelfReport::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Obj)
}
 ::std::string* SelfReport::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Obj)
}

// optional int64 Id = 2;
bool SelfReport::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SelfReport::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SelfReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SelfReport::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 SelfReport::id() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Id)
  return id_;
}
 void SelfReport::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Id)
}

// optional string Date = 3;
bool SelfReport::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SelfReport::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
void SelfReport::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void SelfReport::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& SelfReport::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Date)
}
 void SelfReport::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Date)
}
 void SelfReport::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Date)
}
 ::std::string* SelfReport::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Date)
}

// optional string Title = 4;
bool SelfReport::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SelfReport::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void SelfReport::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void SelfReport::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& SelfReport::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Title)
}
 void SelfReport::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Title)
}
 void SelfReport::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Title)
}
 ::std::string* SelfReport::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Title)
}

// optional string Organization = 5;
bool SelfReport::has_organization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SelfReport::set_has_organization() {
  _has_bits_[0] |= 0x00000010u;
}
void SelfReport::clear_has_organization() {
  _has_bits_[0] &= ~0x00000010u;
}
void SelfReport::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_organization();
}
 const ::std::string& SelfReport::organization() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Organization)
  return organization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_organization(const ::std::string& value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Organization)
}
 void SelfReport::set_organization(const char* value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Organization)
}
 void SelfReport::set_organization(const char* value, size_t size) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Organization)
}
 ::std::string* SelfReport::mutable_organization() {
  set_has_organization();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_organization() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Organization)
  clear_has_organization();
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    set_has_organization();
  } else {
    clear_has_organization();
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Organization)
}

// optional string Context = 6;
bool SelfReport::has_context() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SelfReport::set_has_context() {
  _has_bits_[0] |= 0x00000020u;
}
void SelfReport::clear_has_context() {
  _has_bits_[0] &= ~0x00000020u;
}
void SelfReport::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& SelfReport::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Context)
}
 void SelfReport::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Context)
}
 void SelfReport::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Context)
}
 ::std::string* SelfReport::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Context)
}

// optional string type = 7;
bool SelfReport::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SelfReport::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SelfReport::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SelfReport::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& SelfReport::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.type)
}
 void SelfReport::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.type)
}
 void SelfReport::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.type)
}
 ::std::string* SelfReport::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.type)
}

// optional string RateClass = 8;
bool SelfReport::has_rateclass() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SelfReport::set_has_rateclass() {
  _has_bits_[0] |= 0x00000080u;
}
void SelfReport::clear_has_rateclass() {
  _has_bits_[0] &= ~0x00000080u;
}
void SelfReport::clear_rateclass() {
  rateclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rateclass();
}
 const ::std::string& SelfReport::rateclass() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.RateClass)
  return rateclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_rateclass(const ::std::string& value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.RateClass)
}
 void SelfReport::set_rateclass(const char* value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.RateClass)
}
 void SelfReport::set_rateclass(const char* value, size_t size) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.RateClass)
}
 ::std::string* SelfReport::mutable_rateclass() {
  set_has_rateclass();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.RateClass)
  return rateclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_rateclass() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.RateClass)
  clear_has_rateclass();
  return rateclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_rateclass(::std::string* rateclass) {
  if (rateclass != NULL) {
    set_has_rateclass();
  } else {
    clear_has_rateclass();
  }
  rateclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rateclass);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.RateClass)
}

// optional string RateDirection = 9;
bool SelfReport::has_ratedirection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SelfReport::set_has_ratedirection() {
  _has_bits_[0] |= 0x00000100u;
}
void SelfReport::clear_has_ratedirection() {
  _has_bits_[0] &= ~0x00000100u;
}
void SelfReport::clear_ratedirection() {
  ratedirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ratedirection();
}
 const ::std::string& SelfReport::ratedirection() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.RateDirection)
  return ratedirection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_ratedirection(const ::std::string& value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.RateDirection)
}
 void SelfReport::set_ratedirection(const char* value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.RateDirection)
}
 void SelfReport::set_ratedirection(const char* value, size_t size) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.RateDirection)
}
 ::std::string* SelfReport::mutable_ratedirection() {
  set_has_ratedirection();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.RateDirection)
  return ratedirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_ratedirection() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.RateDirection)
  clear_has_ratedirection();
  return ratedirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_ratedirection(::std::string* ratedirection) {
  if (ratedirection != NULL) {
    set_has_ratedirection();
  } else {
    clear_has_ratedirection();
  }
  ratedirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratedirection);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.RateDirection)
}

// optional string Author = 10;
bool SelfReport::has_author() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SelfReport::set_has_author() {
  _has_bits_[0] |= 0x00000200u;
}
void SelfReport::clear_has_author() {
  _has_bits_[0] &= ~0x00000200u;
}
void SelfReport::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
 const ::std::string& SelfReport::author() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Author)
}
 void SelfReport::set_author(const char* value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Author)
}
 void SelfReport::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Author)
}
 ::std::string* SelfReport::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfReport::release_author() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfReport::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Author)
}

// optional int64 HightPrice = 11;
bool SelfReport::has_hightprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SelfReport::set_has_hightprice() {
  _has_bits_[0] |= 0x00000400u;
}
void SelfReport::clear_has_hightprice() {
  _has_bits_[0] &= ~0x00000400u;
}
void SelfReport::clear_hightprice() {
  hightprice_ = GOOGLE_LONGLONG(0);
  clear_has_hightprice();
}
 ::google::protobuf::int64 SelfReport::hightprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.HightPrice)
  return hightprice_;
}
 void SelfReport::set_hightprice(::google::protobuf::int64 value) {
  set_has_hightprice();
  hightprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.HightPrice)
}

// optional int64 LowPrice = 12;
bool SelfReport::has_lowprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SelfReport::set_has_lowprice() {
  _has_bits_[0] |= 0x00000800u;
}
void SelfReport::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000800u;
}
void SelfReport::clear_lowprice() {
  lowprice_ = GOOGLE_LONGLONG(0);
  clear_has_lowprice();
}
 ::google::protobuf::int64 SelfReport::lowprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.LowPrice)
  return lowprice_;
}
 void SelfReport::set_lowprice(::google::protobuf::int64 value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.LowPrice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerReportDataItem::kVersionFieldNumber;
const int InnerReportDataItem::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerReportDataItem::InnerReportDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.InnerReportDataItem)
}

void InnerReportDataItem::InitAsDefaultInstance() {
  data_ = const_cast< ::dzhyun::ReportDataItem*>(&::dzhyun::ReportDataItem::default_instance());
}

InnerReportDataItem::InnerReportDataItem(const InnerReportDataItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.InnerReportDataItem)
}

void InnerReportDataItem::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerReportDataItem::~InnerReportDataItem() {
  // @@protoc_insertion_point(destructor:dzhyun.InnerReportDataItem)
  SharedDtor();
}

void InnerReportDataItem::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void InnerReportDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerReportDataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerReportDataItem_descriptor_;
}

const InnerReportDataItem& InnerReportDataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldNewsShuJu_2eproto();
  return *default_instance_;
}

InnerReportDataItem* InnerReportDataItem::default_instance_ = NULL;

InnerReportDataItem* InnerReportDataItem::New(::google::protobuf::Arena* arena) const {
  InnerReportDataItem* n = new InnerReportDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerReportDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.InnerReportDataItem)
  if (_has_bits_[0 / 32] & 3u) {
    version_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::dzhyun::ReportDataItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnerReportDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.InnerReportDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional .dzhyun.ReportDataItem Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.InnerReportDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.InnerReportDataItem)
  return false;
#undef DO_
}

void InnerReportDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.InnerReportDataItem)
  // required int64 Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // optional .dzhyun.ReportDataItem Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.InnerReportDataItem)
}

::google::protobuf::uint8* InnerReportDataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.InnerReportDataItem)
  // required int64 Version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->version(), target);
  }

  // optional .dzhyun.ReportDataItem Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.InnerReportDataItem)
  return target;
}

int InnerReportDataItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.InnerReportDataItem)
  int total_size = 0;

  // required int64 Version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }
  // optional .dzhyun.ReportDataItem Data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerReportDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.InnerReportDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InnerReportDataItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerReportDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.InnerReportDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.InnerReportDataItem)
    MergeFrom(*source);
  }
}

void InnerReportDataItem::MergeFrom(const InnerReportDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.InnerReportDataItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_data()) {
      mutable_data()->::dzhyun::ReportDataItem::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnerReportDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.InnerReportDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerReportDataItem::CopyFrom(const InnerReportDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.InnerReportDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerReportDataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InnerReportDataItem::Swap(InnerReportDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerReportDataItem::InternalSwap(InnerReportDataItem* other) {
  std::swap(version_, other->version_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerReportDataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerReportDataItem_descriptor_;
  metadata.reflection = InnerReportDataItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerReportDataItem

// required int64 Version = 1;
bool InnerReportDataItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerReportDataItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerReportDataItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerReportDataItem::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::int64 InnerReportDataItem::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerReportDataItem.Version)
  return version_;
}
 void InnerReportDataItem::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.InnerReportDataItem.Version)
}

// optional .dzhyun.ReportDataItem Data = 2;
bool InnerReportDataItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerReportDataItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerReportDataItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerReportDataItem::clear_data() {
  if (data_ != NULL) data_->::dzhyun::ReportDataItem::Clear();
  clear_has_data();
}
const ::dzhyun::ReportDataItem& InnerReportDataItem::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerReportDataItem.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::dzhyun::ReportDataItem* InnerReportDataItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::ReportDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.InnerReportDataItem.Data)
  return data_;
}
::dzhyun::ReportDataItem* InnerReportDataItem::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.InnerReportDataItem.Data)
  clear_has_data();
  ::dzhyun::ReportDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
void InnerReportDataItem::set_allocated_data(::dzhyun::ReportDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.InnerReportDataItem.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)
