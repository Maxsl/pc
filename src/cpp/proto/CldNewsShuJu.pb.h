// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CldNewsShuJu.proto

#ifndef PROTOBUF_CldNewsShuJu_2eproto__INCLUDED
#define PROTOBUF_CldNewsShuJu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CldNewsShuJu_2eproto();
void protobuf_AssignDesc_CldNewsShuJu_2eproto();
void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

class AnnouncemtDataItem;
class InnerAnnouncemtDataItem;
class InnerNewsDataItem;
class InnerReportDataItem;
class NewsClassData;
class NewsDataItem;
class ReportDataItem;
class SelfAnnouncemt;
class SelfNews;
class SelfReport;
class StockAnnouncemt;
class StockNews;
class StockReport;

// ===================================================================

class NewsDataItem : public ::google::protobuf::Message {
 public:
  NewsDataItem();
  virtual ~NewsDataItem();

  NewsDataItem(const NewsDataItem& from);

  inline NewsDataItem& operator=(const NewsDataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewsDataItem& default_instance();

  void Swap(NewsDataItem* other);

  // implements Message ----------------------------------------------

  inline NewsDataItem* New() const { return New(NULL); }

  NewsDataItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewsDataItem& from);
  void MergeFrom(const NewsDataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewsDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 NewsId = 1;
  bool has_newsid() const;
  void clear_newsid();
  static const int kNewsIdFieldNumber = 1;
  ::google::protobuf::int64 newsid() const;
  void set_newsid(::google::protobuf::int64 value);

  // optional string Date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string Title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Context = 4;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string Source = 5;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 5;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:dzhyun.NewsDataItem)
 private:
  inline void set_has_newsid();
  inline void clear_has_newsid();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 newsid_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static NewsDataItem* default_instance_;
};
// -------------------------------------------------------------------

class StockNews : public ::google::protobuf::Message {
 public:
  StockNews();
  virtual ~StockNews();

  StockNews(const StockNews& from);

  inline StockNews& operator=(const StockNews& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockNews& default_instance();

  void Swap(StockNews* other);

  // implements Message ----------------------------------------------

  inline StockNews* New() const { return New(NULL); }

  StockNews* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockNews& from);
  void MergeFrom(const StockNews& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockNews* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // repeated .dzhyun.NewsDataItem Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::NewsDataItem& data(int index) const;
  ::dzhyun::NewsDataItem* mutable_data(int index);
  ::dzhyun::NewsDataItem* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.StockNews)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem > data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static StockNews* default_instance_;
};
// -------------------------------------------------------------------

class SelfNews : public ::google::protobuf::Message {
 public:
  SelfNews();
  virtual ~SelfNews();

  SelfNews(const SelfNews& from);

  inline SelfNews& operator=(const SelfNews& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfNews& default_instance();

  void Swap(SelfNews* other);

  // implements Message ----------------------------------------------

  inline SelfNews* New() const { return New(NULL); }

  SelfNews* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfNews& from);
  void MergeFrom(const SelfNews& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelfNews* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // optional int64 NewsId = 2;
  bool has_newsid() const;
  void clear_newsid();
  static const int kNewsIdFieldNumber = 2;
  ::google::protobuf::int64 newsid() const;
  void set_newsid(::google::protobuf::int64 value);

  // optional string Date = 3;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string Title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Context = 5;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 5;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string Source = 6;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 6;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:dzhyun.SelfNews)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_newsid();
  inline void clear_has_newsid();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::int64 newsid_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static SelfNews* default_instance_;
};
// -------------------------------------------------------------------

class NewsClassData : public ::google::protobuf::Message {
 public:
  NewsClassData();
  virtual ~NewsClassData();

  NewsClassData(const NewsClassData& from);

  inline NewsClassData& operator=(const NewsClassData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewsClassData& default_instance();

  void Swap(NewsClassData* other);

  // implements Message ----------------------------------------------

  inline NewsClassData* New() const { return New(NULL); }

  NewsClassData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewsClassData& from);
  void MergeFrom(const NewsClassData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewsClassData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 Version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // optional int64 ClassMask = 2;
  bool has_classmask() const;
  void clear_classmask();
  static const int kClassMaskFieldNumber = 2;
  ::google::protobuf::int64 classmask() const;
  void set_classmask(::google::protobuf::int64 value);

  // optional .dzhyun.NewsDataItem Data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::dzhyun::NewsDataItem& data() const;
  ::dzhyun::NewsDataItem* mutable_data();
  ::dzhyun::NewsDataItem* release_data();
  void set_allocated_data(::dzhyun::NewsDataItem* data);

  // @@protoc_insertion_point(class_scope:dzhyun.NewsClassData)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_classmask();
  inline void clear_has_classmask();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::int64 classmask_;
  ::dzhyun::NewsDataItem* data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static NewsClassData* default_instance_;
};
// -------------------------------------------------------------------

class AnnouncemtDataItem : public ::google::protobuf::Message {
 public:
  AnnouncemtDataItem();
  virtual ~AnnouncemtDataItem();

  AnnouncemtDataItem(const AnnouncemtDataItem& from);

  inline AnnouncemtDataItem& operator=(const AnnouncemtDataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnouncemtDataItem& default_instance();

  void Swap(AnnouncemtDataItem* other);

  // implements Message ----------------------------------------------

  inline AnnouncemtDataItem* New() const { return New(NULL); }

  AnnouncemtDataItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnouncemtDataItem& from);
  void MergeFrom(const AnnouncemtDataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnouncemtDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // required int64 AnnouncemId = 2;
  bool has_announcemid() const;
  void clear_announcemid();
  static const int kAnnouncemIdFieldNumber = 2;
  ::google::protobuf::int64 announcemid() const;
  void set_announcemid(::google::protobuf::int64 value);

  // optional string Title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Context = 4;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:dzhyun.AnnouncemtDataItem)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_announcemid();
  inline void clear_has_announcemid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::int64 announcemid_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static AnnouncemtDataItem* default_instance_;
};
// -------------------------------------------------------------------

class StockAnnouncemt : public ::google::protobuf::Message {
 public:
  StockAnnouncemt();
  virtual ~StockAnnouncemt();

  StockAnnouncemt(const StockAnnouncemt& from);

  inline StockAnnouncemt& operator=(const StockAnnouncemt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockAnnouncemt& default_instance();

  void Swap(StockAnnouncemt* other);

  // implements Message ----------------------------------------------

  inline StockAnnouncemt* New() const { return New(NULL); }

  StockAnnouncemt* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockAnnouncemt& from);
  void MergeFrom(const StockAnnouncemt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockAnnouncemt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // repeated .dzhyun.AnnouncemtDataItem Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::AnnouncemtDataItem& data(int index) const;
  ::dzhyun::AnnouncemtDataItem* mutable_data(int index);
  ::dzhyun::AnnouncemtDataItem* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.StockAnnouncemt)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem > data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static StockAnnouncemt* default_instance_;
};
// -------------------------------------------------------------------

class SelfAnnouncemt : public ::google::protobuf::Message {
 public:
  SelfAnnouncemt();
  virtual ~SelfAnnouncemt();

  SelfAnnouncemt(const SelfAnnouncemt& from);

  inline SelfAnnouncemt& operator=(const SelfAnnouncemt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfAnnouncemt& default_instance();

  void Swap(SelfAnnouncemt* other);

  // implements Message ----------------------------------------------

  inline SelfAnnouncemt* New() const { return New(NULL); }

  SelfAnnouncemt* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfAnnouncemt& from);
  void MergeFrom(const SelfAnnouncemt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelfAnnouncemt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // optional string Date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // required int64 AnnouncemId = 3;
  bool has_announcemid() const;
  void clear_announcemid();
  static const int kAnnouncemIdFieldNumber = 3;
  ::google::protobuf::int64 announcemid() const;
  void set_announcemid(::google::protobuf::int64 value);

  // optional string Title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Context = 5;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 5;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:dzhyun.SelfAnnouncemt)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_announcemid();
  inline void clear_has_announcemid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::int64 announcemid_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static SelfAnnouncemt* default_instance_;
};
// -------------------------------------------------------------------

class InnerNewsDataItem : public ::google::protobuf::Message {
 public:
  InnerNewsDataItem();
  virtual ~InnerNewsDataItem();

  InnerNewsDataItem(const InnerNewsDataItem& from);

  inline InnerNewsDataItem& operator=(const InnerNewsDataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerNewsDataItem& default_instance();

  void Swap(InnerNewsDataItem* other);

  // implements Message ----------------------------------------------

  inline InnerNewsDataItem* New() const { return New(NULL); }

  InnerNewsDataItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerNewsDataItem& from);
  void MergeFrom(const InnerNewsDataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InnerNewsDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 Version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // optional .dzhyun.NewsDataItem Data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::NewsDataItem& data() const;
  ::dzhyun::NewsDataItem* mutable_data();
  ::dzhyun::NewsDataItem* release_data();
  void set_allocated_data(::dzhyun::NewsDataItem* data);

  // @@protoc_insertion_point(class_scope:dzhyun.InnerNewsDataItem)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 version_;
  ::dzhyun::NewsDataItem* data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static InnerNewsDataItem* default_instance_;
};
// -------------------------------------------------------------------

class InnerAnnouncemtDataItem : public ::google::protobuf::Message {
 public:
  InnerAnnouncemtDataItem();
  virtual ~InnerAnnouncemtDataItem();

  InnerAnnouncemtDataItem(const InnerAnnouncemtDataItem& from);

  inline InnerAnnouncemtDataItem& operator=(const InnerAnnouncemtDataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerAnnouncemtDataItem& default_instance();

  void Swap(InnerAnnouncemtDataItem* other);

  // implements Message ----------------------------------------------

  inline InnerAnnouncemtDataItem* New() const { return New(NULL); }

  InnerAnnouncemtDataItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerAnnouncemtDataItem& from);
  void MergeFrom(const InnerAnnouncemtDataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InnerAnnouncemtDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 Version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // optional .dzhyun.AnnouncemtDataItem Data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::AnnouncemtDataItem& data() const;
  ::dzhyun::AnnouncemtDataItem* mutable_data();
  ::dzhyun::AnnouncemtDataItem* release_data();
  void set_allocated_data(::dzhyun::AnnouncemtDataItem* data);

  // @@protoc_insertion_point(class_scope:dzhyun.InnerAnnouncemtDataItem)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 version_;
  ::dzhyun::AnnouncemtDataItem* data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static InnerAnnouncemtDataItem* default_instance_;
};
// -------------------------------------------------------------------

class ReportDataItem : public ::google::protobuf::Message {
 public:
  ReportDataItem();
  virtual ~ReportDataItem();

  ReportDataItem(const ReportDataItem& from);

  inline ReportDataItem& operator=(const ReportDataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportDataItem& default_instance();

  void Swap(ReportDataItem* other);

  // implements Message ----------------------------------------------

  inline ReportDataItem* New() const { return New(NULL); }

  ReportDataItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportDataItem& from);
  void MergeFrom(const ReportDataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string Date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string Title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Organization = 4;
  bool has_organization() const;
  void clear_organization();
  static const int kOrganizationFieldNumber = 4;
  const ::std::string& organization() const;
  void set_organization(const ::std::string& value);
  void set_organization(const char* value);
  void set_organization(const char* value, size_t size);
  ::std::string* mutable_organization();
  ::std::string* release_organization();
  void set_allocated_organization(::std::string* organization);

  // optional string Context = 5;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 5;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string RateClass = 7;
  bool has_rateclass() const;
  void clear_rateclass();
  static const int kRateClassFieldNumber = 7;
  const ::std::string& rateclass() const;
  void set_rateclass(const ::std::string& value);
  void set_rateclass(const char* value);
  void set_rateclass(const char* value, size_t size);
  ::std::string* mutable_rateclass();
  ::std::string* release_rateclass();
  void set_allocated_rateclass(::std::string* rateclass);

  // optional string RateDirection = 8;
  bool has_ratedirection() const;
  void clear_ratedirection();
  static const int kRateDirectionFieldNumber = 8;
  const ::std::string& ratedirection() const;
  void set_ratedirection(const ::std::string& value);
  void set_ratedirection(const char* value);
  void set_ratedirection(const char* value, size_t size);
  ::std::string* mutable_ratedirection();
  ::std::string* release_ratedirection();
  void set_allocated_ratedirection(::std::string* ratedirection);

  // optional string Author = 9;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 9;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // optional int64 HightPrice = 10;
  bool has_hightprice() const;
  void clear_hightprice();
  static const int kHightPriceFieldNumber = 10;
  ::google::protobuf::int64 hightprice() const;
  void set_hightprice(::google::protobuf::int64 value);

  // optional int64 LowPrice = 11;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 11;
  ::google::protobuf::int64 lowprice() const;
  void set_lowprice(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.ReportDataItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_organization();
  inline void clear_has_organization();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rateclass();
  inline void clear_has_rateclass();
  inline void set_has_ratedirection();
  inline void clear_has_ratedirection();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_hightprice();
  inline void clear_has_hightprice();
  inline void set_has_lowprice();
  inline void clear_has_lowprice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr organization_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr rateclass_;
  ::google::protobuf::internal::ArenaStringPtr ratedirection_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::int64 hightprice_;
  ::google::protobuf::int64 lowprice_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static ReportDataItem* default_instance_;
};
// -------------------------------------------------------------------

class StockReport : public ::google::protobuf::Message {
 public:
  StockReport();
  virtual ~StockReport();

  StockReport(const StockReport& from);

  inline StockReport& operator=(const StockReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockReport& default_instance();

  void Swap(StockReport* other);

  // implements Message ----------------------------------------------

  inline StockReport* New() const { return New(NULL); }

  StockReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockReport& from);
  void MergeFrom(const StockReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // repeated .dzhyun.ReportDataItem Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::ReportDataItem& data(int index) const;
  ::dzhyun::ReportDataItem* mutable_data(int index);
  ::dzhyun::ReportDataItem* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.StockReport)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem > data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static StockReport* default_instance_;
};
// -------------------------------------------------------------------

class SelfReport : public ::google::protobuf::Message {
 public:
  SelfReport();
  virtual ~SelfReport();

  SelfReport(const SelfReport& from);

  inline SelfReport& operator=(const SelfReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfReport& default_instance();

  void Swap(SelfReport* other);

  // implements Message ----------------------------------------------

  inline SelfReport* New() const { return New(NULL); }

  SelfReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfReport& from);
  void MergeFrom(const SelfReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelfReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // optional int64 Id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string Date = 3;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string Title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Organization = 5;
  bool has_organization() const;
  void clear_organization();
  static const int kOrganizationFieldNumber = 5;
  const ::std::string& organization() const;
  void set_organization(const ::std::string& value);
  void set_organization(const char* value);
  void set_organization(const char* value, size_t size);
  ::std::string* mutable_organization();
  ::std::string* release_organization();
  void set_allocated_organization(::std::string* organization);

  // optional string Context = 6;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 6;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string RateClass = 8;
  bool has_rateclass() const;
  void clear_rateclass();
  static const int kRateClassFieldNumber = 8;
  const ::std::string& rateclass() const;
  void set_rateclass(const ::std::string& value);
  void set_rateclass(const char* value);
  void set_rateclass(const char* value, size_t size);
  ::std::string* mutable_rateclass();
  ::std::string* release_rateclass();
  void set_allocated_rateclass(::std::string* rateclass);

  // optional string RateDirection = 9;
  bool has_ratedirection() const;
  void clear_ratedirection();
  static const int kRateDirectionFieldNumber = 9;
  const ::std::string& ratedirection() const;
  void set_ratedirection(const ::std::string& value);
  void set_ratedirection(const char* value);
  void set_ratedirection(const char* value, size_t size);
  ::std::string* mutable_ratedirection();
  ::std::string* release_ratedirection();
  void set_allocated_ratedirection(::std::string* ratedirection);

  // optional string Author = 10;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 10;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // optional int64 HightPrice = 11;
  bool has_hightprice() const;
  void clear_hightprice();
  static const int kHightPriceFieldNumber = 11;
  ::google::protobuf::int64 hightprice() const;
  void set_hightprice(::google::protobuf::int64 value);

  // optional int64 LowPrice = 12;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 12;
  ::google::protobuf::int64 lowprice() const;
  void set_lowprice(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.SelfReport)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_organization();
  inline void clear_has_organization();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rateclass();
  inline void clear_has_rateclass();
  inline void set_has_ratedirection();
  inline void clear_has_ratedirection();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_hightprice();
  inline void clear_has_hightprice();
  inline void set_has_lowprice();
  inline void clear_has_lowprice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr organization_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr rateclass_;
  ::google::protobuf::internal::ArenaStringPtr ratedirection_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::int64 hightprice_;
  ::google::protobuf::int64 lowprice_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static SelfReport* default_instance_;
};
// -------------------------------------------------------------------

class InnerReportDataItem : public ::google::protobuf::Message {
 public:
  InnerReportDataItem();
  virtual ~InnerReportDataItem();

  InnerReportDataItem(const InnerReportDataItem& from);

  inline InnerReportDataItem& operator=(const InnerReportDataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerReportDataItem& default_instance();

  void Swap(InnerReportDataItem* other);

  // implements Message ----------------------------------------------

  inline InnerReportDataItem* New() const { return New(NULL); }

  InnerReportDataItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerReportDataItem& from);
  void MergeFrom(const InnerReportDataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InnerReportDataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 Version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // optional .dzhyun.ReportDataItem Data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::ReportDataItem& data() const;
  ::dzhyun::ReportDataItem* mutable_data();
  ::dzhyun::ReportDataItem* release_data();
  void set_allocated_data(::dzhyun::ReportDataItem* data);

  // @@protoc_insertion_point(class_scope:dzhyun.InnerReportDataItem)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 version_;
  ::dzhyun::ReportDataItem* data_;
  friend void  protobuf_AddDesc_CldNewsShuJu_2eproto();
  friend void protobuf_AssignDesc_CldNewsShuJu_2eproto();
  friend void protobuf_ShutdownFile_CldNewsShuJu_2eproto();

  void InitAsDefaultInstance();
  static InnerReportDataItem* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NewsDataItem

// optional int64 NewsId = 1;
inline bool NewsDataItem::has_newsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewsDataItem::set_has_newsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewsDataItem::clear_has_newsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewsDataItem::clear_newsid() {
  newsid_ = GOOGLE_LONGLONG(0);
  clear_has_newsid();
}
inline ::google::protobuf::int64 NewsDataItem::newsid() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.NewsId)
  return newsid_;
}
inline void NewsDataItem::set_newsid(::google::protobuf::int64 value) {
  set_has_newsid();
  newsid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.NewsId)
}

// optional string Date = 2;
inline bool NewsDataItem::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewsDataItem::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewsDataItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewsDataItem::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& NewsDataItem::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Date)
}
inline void NewsDataItem::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Date)
}
inline void NewsDataItem::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Date)
}
inline ::std::string* NewsDataItem::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsDataItem::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Date)
}

// optional string Title = 3;
inline bool NewsDataItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewsDataItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewsDataItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewsDataItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& NewsDataItem::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Title)
}
inline void NewsDataItem::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Title)
}
inline void NewsDataItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Title)
}
inline ::std::string* NewsDataItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsDataItem::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Title)
}

// optional string Context = 4;
inline bool NewsDataItem::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewsDataItem::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewsDataItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewsDataItem::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& NewsDataItem::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Context)
}
inline void NewsDataItem::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Context)
}
inline void NewsDataItem::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Context)
}
inline ::std::string* NewsDataItem::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsDataItem::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Context)
}

// optional string Source = 5;
inline bool NewsDataItem::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewsDataItem::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewsDataItem::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewsDataItem::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& NewsDataItem::source() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsDataItem.Source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewsDataItem.Source)
}
inline void NewsDataItem::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewsDataItem.Source)
}
inline void NewsDataItem::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewsDataItem.Source)
}
inline ::std::string* NewsDataItem::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsDataItem.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsDataItem::release_source() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsDataItem.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsDataItem::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsDataItem.Source)
}

// -------------------------------------------------------------------

// StockNews

// required string Obj = 1;
inline bool StockNews::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockNews::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockNews::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockNews::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& StockNews::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockNews.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockNews::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockNews.Obj)
}
inline void StockNews::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockNews.Obj)
}
inline void StockNews::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockNews.Obj)
}
inline ::std::string* StockNews::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockNews.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockNews::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.StockNews.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockNews::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockNews.Obj)
}

// repeated .dzhyun.NewsDataItem Data = 2;
inline int StockNews::data_size() const {
  return data_.size();
}
inline void StockNews::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::NewsDataItem& StockNews::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockNews.Data)
  return data_.Get(index);
}
inline ::dzhyun::NewsDataItem* StockNews::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockNews.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::NewsDataItem* StockNews::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockNews.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem >*
StockNews::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockNews.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::NewsDataItem >&
StockNews::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockNews.Data)
  return data_;
}

// -------------------------------------------------------------------

// SelfNews

// required string Obj = 1;
inline bool SelfNews::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelfNews::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelfNews::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelfNews::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& SelfNews::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Obj)
}
inline void SelfNews::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Obj)
}
inline void SelfNews::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Obj)
}
inline ::std::string* SelfNews::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfNews::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Obj)
}

// optional int64 NewsId = 2;
inline bool SelfNews::has_newsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelfNews::set_has_newsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelfNews::clear_has_newsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelfNews::clear_newsid() {
  newsid_ = GOOGLE_LONGLONG(0);
  clear_has_newsid();
}
inline ::google::protobuf::int64 SelfNews::newsid() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.NewsId)
  return newsid_;
}
inline void SelfNews::set_newsid(::google::protobuf::int64 value) {
  set_has_newsid();
  newsid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.NewsId)
}

// optional string Date = 3;
inline bool SelfNews::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelfNews::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelfNews::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelfNews::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& SelfNews::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Date)
}
inline void SelfNews::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Date)
}
inline void SelfNews::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Date)
}
inline ::std::string* SelfNews::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfNews::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Date)
}

// optional string Title = 4;
inline bool SelfNews::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelfNews::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelfNews::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelfNews::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SelfNews::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Title)
}
inline void SelfNews::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Title)
}
inline void SelfNews::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Title)
}
inline ::std::string* SelfNews::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfNews::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Title)
}

// optional string Context = 5;
inline bool SelfNews::has_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelfNews::set_has_context() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelfNews::clear_has_context() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelfNews::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& SelfNews::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Context)
}
inline void SelfNews::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Context)
}
inline void SelfNews::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Context)
}
inline ::std::string* SelfNews::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfNews::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Context)
}

// optional string Source = 6;
inline bool SelfNews::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SelfNews::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SelfNews::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SelfNews::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& SelfNews::source() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfNews.Source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfNews.Source)
}
inline void SelfNews::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfNews.Source)
}
inline void SelfNews::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfNews.Source)
}
inline ::std::string* SelfNews::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfNews.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfNews::release_source() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfNews.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfNews::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfNews.Source)
}

// -------------------------------------------------------------------

// NewsClassData

// required int64 Version = 1;
inline bool NewsClassData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewsClassData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewsClassData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewsClassData::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 NewsClassData::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsClassData.Version)
  return version_;
}
inline void NewsClassData::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.NewsClassData.Version)
}

// optional int64 ClassMask = 2;
inline bool NewsClassData::has_classmask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewsClassData::set_has_classmask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewsClassData::clear_has_classmask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewsClassData::clear_classmask() {
  classmask_ = GOOGLE_LONGLONG(0);
  clear_has_classmask();
}
inline ::google::protobuf::int64 NewsClassData::classmask() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsClassData.ClassMask)
  return classmask_;
}
inline void NewsClassData::set_classmask(::google::protobuf::int64 value) {
  set_has_classmask();
  classmask_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.NewsClassData.ClassMask)
}

// optional .dzhyun.NewsDataItem Data = 3;
inline bool NewsClassData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewsClassData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewsClassData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewsClassData::clear_data() {
  if (data_ != NULL) data_->::dzhyun::NewsDataItem::Clear();
  clear_has_data();
}
inline const ::dzhyun::NewsDataItem& NewsClassData::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewsClassData.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::dzhyun::NewsDataItem* NewsClassData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::NewsDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.NewsClassData.Data)
  return data_;
}
inline ::dzhyun::NewsDataItem* NewsClassData::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.NewsClassData.Data)
  clear_has_data();
  ::dzhyun::NewsDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
inline void NewsClassData::set_allocated_data(::dzhyun::NewsDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewsClassData.Data)
}

// -------------------------------------------------------------------

// AnnouncemtDataItem

// optional string Date = 1;
inline bool AnnouncemtDataItem::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnouncemtDataItem::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnouncemtDataItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnouncemtDataItem::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& AnnouncemtDataItem::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.Date)
}
inline void AnnouncemtDataItem::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.Date)
}
inline void AnnouncemtDataItem::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.Date)
}
inline ::std::string* AnnouncemtDataItem::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnouncemtDataItem::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.Date)
}

// required int64 AnnouncemId = 2;
inline bool AnnouncemtDataItem::has_announcemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnouncemtDataItem::set_has_announcemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnouncemtDataItem::clear_has_announcemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnouncemtDataItem::clear_announcemid() {
  announcemid_ = GOOGLE_LONGLONG(0);
  clear_has_announcemid();
}
inline ::google::protobuf::int64 AnnouncemtDataItem::announcemid() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.AnnouncemId)
  return announcemid_;
}
inline void AnnouncemtDataItem::set_announcemid(::google::protobuf::int64 value) {
  set_has_announcemid();
  announcemid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.AnnouncemId)
}

// optional string Title = 3;
inline bool AnnouncemtDataItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnnouncemtDataItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnnouncemtDataItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnnouncemtDataItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& AnnouncemtDataItem::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.Title)
}
inline void AnnouncemtDataItem::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.Title)
}
inline void AnnouncemtDataItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.Title)
}
inline ::std::string* AnnouncemtDataItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnouncemtDataItem::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.Title)
}

// optional string Context = 4;
inline bool AnnouncemtDataItem::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnnouncemtDataItem::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnnouncemtDataItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnnouncemtDataItem::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& AnnouncemtDataItem::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.Context)
}
inline void AnnouncemtDataItem::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.Context)
}
inline void AnnouncemtDataItem::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.Context)
}
inline ::std::string* AnnouncemtDataItem::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnouncemtDataItem::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.Context)
}

// optional string type = 5;
inline bool AnnouncemtDataItem::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnnouncemtDataItem::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnnouncemtDataItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnnouncemtDataItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& AnnouncemtDataItem::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.AnnouncemtDataItem.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.AnnouncemtDataItem.type)
}
inline void AnnouncemtDataItem::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.AnnouncemtDataItem.type)
}
inline void AnnouncemtDataItem::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.AnnouncemtDataItem.type)
}
inline ::std::string* AnnouncemtDataItem::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.AnnouncemtDataItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnouncemtDataItem::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.AnnouncemtDataItem.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnouncemtDataItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.AnnouncemtDataItem.type)
}

// -------------------------------------------------------------------

// StockAnnouncemt

// required string Obj = 1;
inline bool StockAnnouncemt::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockAnnouncemt::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockAnnouncemt::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockAnnouncemt::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& StockAnnouncemt::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockAnnouncemt.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockAnnouncemt::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockAnnouncemt.Obj)
}
inline void StockAnnouncemt::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockAnnouncemt.Obj)
}
inline void StockAnnouncemt::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockAnnouncemt.Obj)
}
inline ::std::string* StockAnnouncemt::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockAnnouncemt.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockAnnouncemt::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.StockAnnouncemt.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockAnnouncemt::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockAnnouncemt.Obj)
}

// repeated .dzhyun.AnnouncemtDataItem Data = 2;
inline int StockAnnouncemt::data_size() const {
  return data_.size();
}
inline void StockAnnouncemt::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::AnnouncemtDataItem& StockAnnouncemt::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockAnnouncemt.Data)
  return data_.Get(index);
}
inline ::dzhyun::AnnouncemtDataItem* StockAnnouncemt::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockAnnouncemt.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::AnnouncemtDataItem* StockAnnouncemt::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockAnnouncemt.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem >*
StockAnnouncemt::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockAnnouncemt.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::AnnouncemtDataItem >&
StockAnnouncemt::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockAnnouncemt.Data)
  return data_;
}

// -------------------------------------------------------------------

// SelfAnnouncemt

// required string Obj = 1;
inline bool SelfAnnouncemt::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelfAnnouncemt::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelfAnnouncemt::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelfAnnouncemt::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& SelfAnnouncemt::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Obj)
}
inline void SelfAnnouncemt::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Obj)
}
inline void SelfAnnouncemt::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Obj)
}
inline ::std::string* SelfAnnouncemt::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfAnnouncemt::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Obj)
}

// optional string Date = 2;
inline bool SelfAnnouncemt::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelfAnnouncemt::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelfAnnouncemt::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelfAnnouncemt::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& SelfAnnouncemt::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Date)
}
inline void SelfAnnouncemt::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Date)
}
inline void SelfAnnouncemt::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Date)
}
inline ::std::string* SelfAnnouncemt::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfAnnouncemt::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Date)
}

// required int64 AnnouncemId = 3;
inline bool SelfAnnouncemt::has_announcemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelfAnnouncemt::set_has_announcemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelfAnnouncemt::clear_has_announcemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelfAnnouncemt::clear_announcemid() {
  announcemid_ = GOOGLE_LONGLONG(0);
  clear_has_announcemid();
}
inline ::google::protobuf::int64 SelfAnnouncemt::announcemid() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.AnnouncemId)
  return announcemid_;
}
inline void SelfAnnouncemt::set_announcemid(::google::protobuf::int64 value) {
  set_has_announcemid();
  announcemid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.AnnouncemId)
}

// optional string Title = 4;
inline bool SelfAnnouncemt::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelfAnnouncemt::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelfAnnouncemt::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelfAnnouncemt::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SelfAnnouncemt::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Title)
}
inline void SelfAnnouncemt::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Title)
}
inline void SelfAnnouncemt::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Title)
}
inline ::std::string* SelfAnnouncemt::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfAnnouncemt::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Title)
}

// optional string Context = 5;
inline bool SelfAnnouncemt::has_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelfAnnouncemt::set_has_context() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelfAnnouncemt::clear_has_context() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelfAnnouncemt::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& SelfAnnouncemt::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.Context)
}
inline void SelfAnnouncemt::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.Context)
}
inline void SelfAnnouncemt::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.Context)
}
inline ::std::string* SelfAnnouncemt::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfAnnouncemt::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.Context)
}

// optional string type = 6;
inline bool SelfAnnouncemt::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SelfAnnouncemt::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SelfAnnouncemt::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SelfAnnouncemt::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SelfAnnouncemt::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfAnnouncemt.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfAnnouncemt.type)
}
inline void SelfAnnouncemt::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfAnnouncemt.type)
}
inline void SelfAnnouncemt::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfAnnouncemt.type)
}
inline ::std::string* SelfAnnouncemt::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfAnnouncemt.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfAnnouncemt::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfAnnouncemt.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAnnouncemt::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfAnnouncemt.type)
}

// -------------------------------------------------------------------

// InnerNewsDataItem

// required int64 Version = 1;
inline bool InnerNewsDataItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerNewsDataItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerNewsDataItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerNewsDataItem::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 InnerNewsDataItem::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerNewsDataItem.Version)
  return version_;
}
inline void InnerNewsDataItem::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.InnerNewsDataItem.Version)
}

// optional .dzhyun.NewsDataItem Data = 2;
inline bool InnerNewsDataItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerNewsDataItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerNewsDataItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerNewsDataItem::clear_data() {
  if (data_ != NULL) data_->::dzhyun::NewsDataItem::Clear();
  clear_has_data();
}
inline const ::dzhyun::NewsDataItem& InnerNewsDataItem::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerNewsDataItem.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::dzhyun::NewsDataItem* InnerNewsDataItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::NewsDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.InnerNewsDataItem.Data)
  return data_;
}
inline ::dzhyun::NewsDataItem* InnerNewsDataItem::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.InnerNewsDataItem.Data)
  clear_has_data();
  ::dzhyun::NewsDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InnerNewsDataItem::set_allocated_data(::dzhyun::NewsDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.InnerNewsDataItem.Data)
}

// -------------------------------------------------------------------

// InnerAnnouncemtDataItem

// required int64 Version = 1;
inline bool InnerAnnouncemtDataItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerAnnouncemtDataItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerAnnouncemtDataItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerAnnouncemtDataItem::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 InnerAnnouncemtDataItem::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerAnnouncemtDataItem.Version)
  return version_;
}
inline void InnerAnnouncemtDataItem::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.InnerAnnouncemtDataItem.Version)
}

// optional .dzhyun.AnnouncemtDataItem Data = 2;
inline bool InnerAnnouncemtDataItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerAnnouncemtDataItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerAnnouncemtDataItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerAnnouncemtDataItem::clear_data() {
  if (data_ != NULL) data_->::dzhyun::AnnouncemtDataItem::Clear();
  clear_has_data();
}
inline const ::dzhyun::AnnouncemtDataItem& InnerAnnouncemtDataItem::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerAnnouncemtDataItem.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::dzhyun::AnnouncemtDataItem* InnerAnnouncemtDataItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::AnnouncemtDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.InnerAnnouncemtDataItem.Data)
  return data_;
}
inline ::dzhyun::AnnouncemtDataItem* InnerAnnouncemtDataItem::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.InnerAnnouncemtDataItem.Data)
  clear_has_data();
  ::dzhyun::AnnouncemtDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InnerAnnouncemtDataItem::set_allocated_data(::dzhyun::AnnouncemtDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.InnerAnnouncemtDataItem.Data)
}

// -------------------------------------------------------------------

// ReportDataItem

// optional int64 Id = 1;
inline bool ReportDataItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportDataItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportDataItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportDataItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ReportDataItem::id() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Id)
  return id_;
}
inline void ReportDataItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Id)
}

// optional string Date = 2;
inline bool ReportDataItem::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportDataItem::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportDataItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportDataItem::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& ReportDataItem::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Date)
}
inline void ReportDataItem::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Date)
}
inline void ReportDataItem::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Date)
}
inline ::std::string* ReportDataItem::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Date)
}

// optional string Title = 3;
inline bool ReportDataItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportDataItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportDataItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportDataItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& ReportDataItem::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Title)
}
inline void ReportDataItem::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Title)
}
inline void ReportDataItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Title)
}
inline ::std::string* ReportDataItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Title)
}

// optional string Organization = 4;
inline bool ReportDataItem::has_organization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportDataItem::set_has_organization() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportDataItem::clear_has_organization() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportDataItem::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_organization();
}
inline const ::std::string& ReportDataItem::organization() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Organization)
  return organization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_organization(const ::std::string& value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Organization)
}
inline void ReportDataItem::set_organization(const char* value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Organization)
}
inline void ReportDataItem::set_organization(const char* value, size_t size) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Organization)
}
inline ::std::string* ReportDataItem::mutable_organization() {
  set_has_organization();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_organization() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Organization)
  clear_has_organization();
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    set_has_organization();
  } else {
    clear_has_organization();
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Organization)
}

// optional string Context = 5;
inline bool ReportDataItem::has_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportDataItem::set_has_context() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportDataItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportDataItem::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& ReportDataItem::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Context)
}
inline void ReportDataItem::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Context)
}
inline void ReportDataItem::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Context)
}
inline ::std::string* ReportDataItem::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Context)
}

// optional string type = 6;
inline bool ReportDataItem::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportDataItem::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportDataItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportDataItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ReportDataItem::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.type)
}
inline void ReportDataItem::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.type)
}
inline void ReportDataItem::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.type)
}
inline ::std::string* ReportDataItem::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.type)
}

// optional string RateClass = 7;
inline bool ReportDataItem::has_rateclass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReportDataItem::set_has_rateclass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReportDataItem::clear_has_rateclass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReportDataItem::clear_rateclass() {
  rateclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rateclass();
}
inline const ::std::string& ReportDataItem::rateclass() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.RateClass)
  return rateclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_rateclass(const ::std::string& value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.RateClass)
}
inline void ReportDataItem::set_rateclass(const char* value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.RateClass)
}
inline void ReportDataItem::set_rateclass(const char* value, size_t size) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.RateClass)
}
inline ::std::string* ReportDataItem::mutable_rateclass() {
  set_has_rateclass();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.RateClass)
  return rateclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_rateclass() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.RateClass)
  clear_has_rateclass();
  return rateclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_rateclass(::std::string* rateclass) {
  if (rateclass != NULL) {
    set_has_rateclass();
  } else {
    clear_has_rateclass();
  }
  rateclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rateclass);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.RateClass)
}

// optional string RateDirection = 8;
inline bool ReportDataItem::has_ratedirection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReportDataItem::set_has_ratedirection() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReportDataItem::clear_has_ratedirection() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReportDataItem::clear_ratedirection() {
  ratedirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ratedirection();
}
inline const ::std::string& ReportDataItem::ratedirection() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.RateDirection)
  return ratedirection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_ratedirection(const ::std::string& value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.RateDirection)
}
inline void ReportDataItem::set_ratedirection(const char* value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.RateDirection)
}
inline void ReportDataItem::set_ratedirection(const char* value, size_t size) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.RateDirection)
}
inline ::std::string* ReportDataItem::mutable_ratedirection() {
  set_has_ratedirection();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.RateDirection)
  return ratedirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_ratedirection() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.RateDirection)
  clear_has_ratedirection();
  return ratedirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_ratedirection(::std::string* ratedirection) {
  if (ratedirection != NULL) {
    set_has_ratedirection();
  } else {
    clear_has_ratedirection();
  }
  ratedirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratedirection);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.RateDirection)
}

// optional string Author = 9;
inline bool ReportDataItem::has_author() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReportDataItem::set_has_author() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReportDataItem::clear_has_author() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReportDataItem::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
inline const ::std::string& ReportDataItem::author() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.Author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.Author)
}
inline void ReportDataItem::set_author(const char* value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.ReportDataItem.Author)
}
inline void ReportDataItem::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.ReportDataItem.Author)
}
inline ::std::string* ReportDataItem::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:dzhyun.ReportDataItem.Author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportDataItem::release_author() {
  // @@protoc_insertion_point(field_release:dzhyun.ReportDataItem.Author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportDataItem::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.ReportDataItem.Author)
}

// optional int64 HightPrice = 10;
inline bool ReportDataItem::has_hightprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReportDataItem::set_has_hightprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReportDataItem::clear_has_hightprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReportDataItem::clear_hightprice() {
  hightprice_ = GOOGLE_LONGLONG(0);
  clear_has_hightprice();
}
inline ::google::protobuf::int64 ReportDataItem::hightprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.HightPrice)
  return hightprice_;
}
inline void ReportDataItem::set_hightprice(::google::protobuf::int64 value) {
  set_has_hightprice();
  hightprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.HightPrice)
}

// optional int64 LowPrice = 11;
inline bool ReportDataItem::has_lowprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReportDataItem::set_has_lowprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReportDataItem::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReportDataItem::clear_lowprice() {
  lowprice_ = GOOGLE_LONGLONG(0);
  clear_has_lowprice();
}
inline ::google::protobuf::int64 ReportDataItem::lowprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.ReportDataItem.LowPrice)
  return lowprice_;
}
inline void ReportDataItem::set_lowprice(::google::protobuf::int64 value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.ReportDataItem.LowPrice)
}

// -------------------------------------------------------------------

// StockReport

// required string Obj = 1;
inline bool StockReport::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockReport::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockReport::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockReport::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& StockReport::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockReport.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockReport::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockReport.Obj)
}
inline void StockReport::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockReport.Obj)
}
inline void StockReport::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockReport.Obj)
}
inline ::std::string* StockReport::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockReport.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockReport::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.StockReport.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockReport::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockReport.Obj)
}

// repeated .dzhyun.ReportDataItem Data = 2;
inline int StockReport::data_size() const {
  return data_.size();
}
inline void StockReport::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::ReportDataItem& StockReport::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockReport.Data)
  return data_.Get(index);
}
inline ::dzhyun::ReportDataItem* StockReport::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockReport.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::ReportDataItem* StockReport::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockReport.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem >*
StockReport::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockReport.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::ReportDataItem >&
StockReport::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockReport.Data)
  return data_;
}

// -------------------------------------------------------------------

// SelfReport

// required string Obj = 1;
inline bool SelfReport::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelfReport::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelfReport::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelfReport::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& SelfReport::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Obj)
}
inline void SelfReport::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Obj)
}
inline void SelfReport::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Obj)
}
inline ::std::string* SelfReport::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Obj)
}

// optional int64 Id = 2;
inline bool SelfReport::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelfReport::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelfReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelfReport::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 SelfReport::id() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Id)
  return id_;
}
inline void SelfReport::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Id)
}

// optional string Date = 3;
inline bool SelfReport::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelfReport::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelfReport::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelfReport::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& SelfReport::date() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Date)
}
inline void SelfReport::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Date)
}
inline void SelfReport::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Date)
}
inline ::std::string* SelfReport::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_date() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Date)
}

// optional string Title = 4;
inline bool SelfReport::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelfReport::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelfReport::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelfReport::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SelfReport::title() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Title)
}
inline void SelfReport::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Title)
}
inline void SelfReport::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Title)
}
inline ::std::string* SelfReport::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_title() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Title)
}

// optional string Organization = 5;
inline bool SelfReport::has_organization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelfReport::set_has_organization() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelfReport::clear_has_organization() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelfReport::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_organization();
}
inline const ::std::string& SelfReport::organization() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Organization)
  return organization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_organization(const ::std::string& value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Organization)
}
inline void SelfReport::set_organization(const char* value) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Organization)
}
inline void SelfReport::set_organization(const char* value, size_t size) {
  set_has_organization();
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Organization)
}
inline ::std::string* SelfReport::mutable_organization() {
  set_has_organization();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_organization() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Organization)
  clear_has_organization();
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    set_has_organization();
  } else {
    clear_has_organization();
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Organization)
}

// optional string Context = 6;
inline bool SelfReport::has_context() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SelfReport::set_has_context() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SelfReport::clear_has_context() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SelfReport::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& SelfReport::context() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Context)
}
inline void SelfReport::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Context)
}
inline void SelfReport::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Context)
}
inline ::std::string* SelfReport::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_context() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Context)
}

// optional string type = 7;
inline bool SelfReport::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SelfReport::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SelfReport::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SelfReport::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SelfReport::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.type)
}
inline void SelfReport::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.type)
}
inline void SelfReport::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.type)
}
inline ::std::string* SelfReport::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_type() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.type)
}

// optional string RateClass = 8;
inline bool SelfReport::has_rateclass() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SelfReport::set_has_rateclass() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SelfReport::clear_has_rateclass() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SelfReport::clear_rateclass() {
  rateclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rateclass();
}
inline const ::std::string& SelfReport::rateclass() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.RateClass)
  return rateclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_rateclass(const ::std::string& value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.RateClass)
}
inline void SelfReport::set_rateclass(const char* value) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.RateClass)
}
inline void SelfReport::set_rateclass(const char* value, size_t size) {
  set_has_rateclass();
  rateclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.RateClass)
}
inline ::std::string* SelfReport::mutable_rateclass() {
  set_has_rateclass();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.RateClass)
  return rateclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_rateclass() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.RateClass)
  clear_has_rateclass();
  return rateclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_rateclass(::std::string* rateclass) {
  if (rateclass != NULL) {
    set_has_rateclass();
  } else {
    clear_has_rateclass();
  }
  rateclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rateclass);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.RateClass)
}

// optional string RateDirection = 9;
inline bool SelfReport::has_ratedirection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SelfReport::set_has_ratedirection() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SelfReport::clear_has_ratedirection() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SelfReport::clear_ratedirection() {
  ratedirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ratedirection();
}
inline const ::std::string& SelfReport::ratedirection() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.RateDirection)
  return ratedirection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_ratedirection(const ::std::string& value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.RateDirection)
}
inline void SelfReport::set_ratedirection(const char* value) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.RateDirection)
}
inline void SelfReport::set_ratedirection(const char* value, size_t size) {
  set_has_ratedirection();
  ratedirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.RateDirection)
}
inline ::std::string* SelfReport::mutable_ratedirection() {
  set_has_ratedirection();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.RateDirection)
  return ratedirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_ratedirection() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.RateDirection)
  clear_has_ratedirection();
  return ratedirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_ratedirection(::std::string* ratedirection) {
  if (ratedirection != NULL) {
    set_has_ratedirection();
  } else {
    clear_has_ratedirection();
  }
  ratedirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratedirection);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.RateDirection)
}

// optional string Author = 10;
inline bool SelfReport::has_author() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SelfReport::set_has_author() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SelfReport::clear_has_author() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SelfReport::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
inline const ::std::string& SelfReport::author() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.Author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.Author)
}
inline void SelfReport::set_author(const char* value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.SelfReport.Author)
}
inline void SelfReport::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.SelfReport.Author)
}
inline ::std::string* SelfReport::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:dzhyun.SelfReport.Author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfReport::release_author() {
  // @@protoc_insertion_point(field_release:dzhyun.SelfReport.Author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfReport::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.SelfReport.Author)
}

// optional int64 HightPrice = 11;
inline bool SelfReport::has_hightprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SelfReport::set_has_hightprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SelfReport::clear_has_hightprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SelfReport::clear_hightprice() {
  hightprice_ = GOOGLE_LONGLONG(0);
  clear_has_hightprice();
}
inline ::google::protobuf::int64 SelfReport::hightprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.HightPrice)
  return hightprice_;
}
inline void SelfReport::set_hightprice(::google::protobuf::int64 value) {
  set_has_hightprice();
  hightprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.HightPrice)
}

// optional int64 LowPrice = 12;
inline bool SelfReport::has_lowprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SelfReport::set_has_lowprice() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SelfReport::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SelfReport::clear_lowprice() {
  lowprice_ = GOOGLE_LONGLONG(0);
  clear_has_lowprice();
}
inline ::google::protobuf::int64 SelfReport::lowprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.SelfReport.LowPrice)
  return lowprice_;
}
inline void SelfReport::set_lowprice(::google::protobuf::int64 value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.SelfReport.LowPrice)
}

// -------------------------------------------------------------------

// InnerReportDataItem

// required int64 Version = 1;
inline bool InnerReportDataItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerReportDataItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerReportDataItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerReportDataItem::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 InnerReportDataItem::version() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerReportDataItem.Version)
  return version_;
}
inline void InnerReportDataItem::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.InnerReportDataItem.Version)
}

// optional .dzhyun.ReportDataItem Data = 2;
inline bool InnerReportDataItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerReportDataItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerReportDataItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerReportDataItem::clear_data() {
  if (data_ != NULL) data_->::dzhyun::ReportDataItem::Clear();
  clear_has_data();
}
inline const ::dzhyun::ReportDataItem& InnerReportDataItem::data() const {
  // @@protoc_insertion_point(field_get:dzhyun.InnerReportDataItem.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::dzhyun::ReportDataItem* InnerReportDataItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::dzhyun::ReportDataItem;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.InnerReportDataItem.Data)
  return data_;
}
inline ::dzhyun::ReportDataItem* InnerReportDataItem::release_data() {
  // @@protoc_insertion_point(field_release:dzhyun.InnerReportDataItem.Data)
  clear_has_data();
  ::dzhyun::ReportDataItem* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InnerReportDataItem::set_allocated_data(::dzhyun::ReportDataItem* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.InnerReportDataItem.Data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CldNewsShuJu_2eproto__INCLUDED
