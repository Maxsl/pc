// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzhpbtable.proto

#ifndef PROTOBUF_dzhpbtable_2eproto__INCLUDED
#define PROTOBUF_dzhpbtable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dzhpbtable_2eproto();
void protobuf_AssignDesc_dzhpbtable_2eproto();
void protobuf_ShutdownFile_dzhpbtable_2eproto();

class CArray;
class CData;
class CDataX;
class CInfo;
class Table;

enum InfoType {
  Type_Unknow = 0,
  Type_Int = 105,
  Type_SInt = 120,
  Type_Float = 102,
  Type_Double = 100,
  Type_String = 115,
  Type_Binary = 98,
  Type_Table = 116,
  Type_Array = 128,
  Type_ArrayInt = 233,
  Type_ArraySInt = 248,
  Type_ArrayFloat = 230,
  Type_ArrayDouble = 228,
  Type_ArrayString = 243
};
bool InfoType_IsValid(int value);
const InfoType InfoType_MIN = Type_Unknow;
const InfoType InfoType_MAX = Type_ArraySInt;
const int InfoType_ARRAYSIZE = InfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfoType_descriptor();
inline const ::std::string& InfoType_Name(InfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfoType_descriptor(), value);
}
inline bool InfoType_Parse(
    const ::std::string& name, InfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfoType>(
    InfoType_descriptor(), name, value);
}
// ===================================================================

class CInfo : public ::google::protobuf::Message {
 public:
  CInfo();
  virtual ~CInfo();

  CInfo(const CInfo& from);

  inline CInfo& operator=(const CInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CInfo& default_instance();

  void Swap(CInfo* other);

  // implements Message ----------------------------------------------

  inline CInfo* New() const { return New(NULL); }

  CInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CInfo& from);
  void MergeFrom(const CInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 Ratio = 3;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 3;
  ::google::protobuf::int32 ratio() const;
  void set_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dzhyun.CInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ratio();
  inline void clear_has_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 ratio_;
  friend void  protobuf_AddDesc_dzhpbtable_2eproto();
  friend void protobuf_AssignDesc_dzhpbtable_2eproto();
  friend void protobuf_ShutdownFile_dzhpbtable_2eproto();

  void InitAsDefaultInstance();
  static CInfo* default_instance_;
};
// -------------------------------------------------------------------

class CArray : public ::google::protobuf::Message {
 public:
  CArray();
  virtual ~CArray();

  CArray(const CArray& from);

  inline CArray& operator=(const CArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CArray& default_instance();

  void Swap(CArray* other);

  // implements Message ----------------------------------------------

  inline CArray* New() const { return New(NULL); }

  CArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CArray& from);
  void MergeFrom(const CArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 iValues = 1 [packed = true];
  int ivalues_size() const;
  void clear_ivalues();
  static const int kIValuesFieldNumber = 1;
  ::google::protobuf::int64 ivalues(int index) const;
  void set_ivalues(int index, ::google::protobuf::int64 value);
  void add_ivalues(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ivalues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ivalues();

  // repeated float fValues = 2 [packed = true];
  int fvalues_size() const;
  void clear_fvalues();
  static const int kFValuesFieldNumber = 2;
  float fvalues(int index) const;
  void set_fvalues(int index, float value);
  void add_fvalues(float value);
  const ::google::protobuf::RepeatedField< float >&
      fvalues() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_fvalues();

  // repeated double dValues = 3 [packed = true];
  int dvalues_size() const;
  void clear_dvalues();
  static const int kDValuesFieldNumber = 3;
  double dvalues(int index) const;
  void set_dvalues(int index, double value);
  void add_dvalues(double value);
  const ::google::protobuf::RepeatedField< double >&
      dvalues() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dvalues();

  // repeated string sValues = 4;
  int svalues_size() const;
  void clear_svalues();
  static const int kSValuesFieldNumber = 4;
  const ::std::string& svalues(int index) const;
  ::std::string* mutable_svalues(int index);
  void set_svalues(int index, const ::std::string& value);
  void set_svalues(int index, const char* value);
  void set_svalues(int index, const char* value, size_t size);
  ::std::string* add_svalues();
  void add_svalues(const ::std::string& value);
  void add_svalues(const char* value);
  void add_svalues(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& svalues() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_svalues();

  // @@protoc_insertion_point(class_scope:dzhyun.CArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ivalues_;
  mutable int _ivalues_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > fvalues_;
  mutable int _fvalues_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > dvalues_;
  mutable int _dvalues_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> svalues_;
  friend void  protobuf_AddDesc_dzhpbtable_2eproto();
  friend void protobuf_AssignDesc_dzhpbtable_2eproto();
  friend void protobuf_ShutdownFile_dzhpbtable_2eproto();

  void InitAsDefaultInstance();
  static CArray* default_instance_;
};
// -------------------------------------------------------------------

class CData : public ::google::protobuf::Message {
 public:
  CData();
  virtual ~CData();

  CData(const CData& from);

  inline CData& operator=(const CData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CData& default_instance();

  void Swap(CData* other);

  // implements Message ----------------------------------------------

  inline CData* New() const { return New(NULL); }

  CData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CData& from);
  void MergeFrom(const CData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // repeated int64 iValues = 2 [packed = true];
  int ivalues_size() const;
  void clear_ivalues();
  static const int kIValuesFieldNumber = 2;
  ::google::protobuf::int64 ivalues(int index) const;
  void set_ivalues(int index, ::google::protobuf::int64 value);
  void add_ivalues(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ivalues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ivalues();

  // repeated float fValues = 3 [packed = true];
  int fvalues_size() const;
  void clear_fvalues();
  static const int kFValuesFieldNumber = 3;
  float fvalues(int index) const;
  void set_fvalues(int index, float value);
  void add_fvalues(float value);
  const ::google::protobuf::RepeatedField< float >&
      fvalues() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_fvalues();

  // repeated double dValues = 4 [packed = true];
  int dvalues_size() const;
  void clear_dvalues();
  static const int kDValuesFieldNumber = 4;
  double dvalues(int index) const;
  void set_dvalues(int index, double value);
  void add_dvalues(double value);
  const ::google::protobuf::RepeatedField< double >&
      dvalues() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dvalues();

  // repeated string sValues = 5;
  int svalues_size() const;
  void clear_svalues();
  static const int kSValuesFieldNumber = 5;
  const ::std::string& svalues(int index) const;
  ::std::string* mutable_svalues(int index);
  void set_svalues(int index, const ::std::string& value);
  void set_svalues(int index, const char* value);
  void set_svalues(int index, const char* value, size_t size);
  ::std::string* add_svalues();
  void add_svalues(const ::std::string& value);
  void add_svalues(const char* value);
  void add_svalues(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& svalues() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_svalues();

  // repeated bytes bValues = 6;
  int bvalues_size() const;
  void clear_bvalues();
  static const int kBValuesFieldNumber = 6;
  const ::std::string& bvalues(int index) const;
  ::std::string* mutable_bvalues(int index);
  void set_bvalues(int index, const ::std::string& value);
  void set_bvalues(int index, const char* value);
  void set_bvalues(int index, const void* value, size_t size);
  ::std::string* add_bvalues();
  void add_bvalues(const ::std::string& value);
  void add_bvalues(const char* value);
  void add_bvalues(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bvalues() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bvalues();

  // repeated .dzhyun.Table tValues = 7;
  int tvalues_size() const;
  void clear_tvalues();
  static const int kTValuesFieldNumber = 7;
  const ::dzhyun::Table& tvalues(int index) const;
  ::dzhyun::Table* mutable_tvalues(int index);
  ::dzhyun::Table* add_tvalues();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::Table >*
      mutable_tvalues();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::Table >&
      tvalues() const;

  // repeated .dzhyun.CArray aValues = 8;
  int avalues_size() const;
  void clear_avalues();
  static const int kAValuesFieldNumber = 8;
  const ::dzhyun::CArray& avalues(int index) const;
  ::dzhyun::CArray* mutable_avalues(int index);
  ::dzhyun::CArray* add_avalues();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CArray >*
      mutable_avalues();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::CArray >&
      avalues() const;

  // repeated sint64 xValues = 9 [packed = true];
  int xvalues_size() const;
  void clear_xvalues();
  static const int kXValuesFieldNumber = 9;
  ::google::protobuf::int64 xvalues(int index) const;
  void set_xvalues(int index, ::google::protobuf::int64 value);
  void add_xvalues(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      xvalues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_xvalues();

  // @@protoc_insertion_point(class_scope:dzhyun.CData)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ivalues_;
  mutable int _ivalues_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > fvalues_;
  mutable int _fvalues_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > dvalues_;
  mutable int _dvalues_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> svalues_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bvalues_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::Table > tvalues_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CArray > avalues_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > xvalues_;
  mutable int _xvalues_cached_byte_size_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_dzhpbtable_2eproto();
  friend void protobuf_AssignDesc_dzhpbtable_2eproto();
  friend void protobuf_ShutdownFile_dzhpbtable_2eproto();

  void InitAsDefaultInstance();
  static CData* default_instance_;
};
// -------------------------------------------------------------------

class CDataX : public ::google::protobuf::Message {
 public:
  CDataX();
  virtual ~CDataX();

  CDataX(const CDataX& from);

  inline CDataX& operator=(const CDataX& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataX& default_instance();

  void Swap(CDataX* other);

  // implements Message ----------------------------------------------

  inline CDataX* New() const { return New(NULL); }

  CDataX* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataX& from);
  void MergeFrom(const CDataX& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CDataX* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int64 iValue = 2;
  bool has_ivalue() const;
  void clear_ivalue();
  static const int kIValueFieldNumber = 2;
  ::google::protobuf::int64 ivalue() const;
  void set_ivalue(::google::protobuf::int64 value);

  // optional float fValue = 3;
  bool has_fvalue() const;
  void clear_fvalue();
  static const int kFValueFieldNumber = 3;
  float fvalue() const;
  void set_fvalue(float value);

  // optional double dValue = 4;
  bool has_dvalue() const;
  void clear_dvalue();
  static const int kDValueFieldNumber = 4;
  double dvalue() const;
  void set_dvalue(double value);

  // optional string sValue = 5;
  bool has_svalue() const;
  void clear_svalue();
  static const int kSValueFieldNumber = 5;
  const ::std::string& svalue() const;
  void set_svalue(const ::std::string& value);
  void set_svalue(const char* value);
  void set_svalue(const char* value, size_t size);
  ::std::string* mutable_svalue();
  ::std::string* release_svalue();
  void set_allocated_svalue(::std::string* svalue);

  // optional bytes bValues = 6;
  bool has_bvalues() const;
  void clear_bvalues();
  static const int kBValuesFieldNumber = 6;
  const ::std::string& bvalues() const;
  void set_bvalues(const ::std::string& value);
  void set_bvalues(const char* value);
  void set_bvalues(const void* value, size_t size);
  ::std::string* mutable_bvalues();
  ::std::string* release_bvalues();
  void set_allocated_bvalues(::std::string* bvalues);

  // optional .dzhyun.Table tValue = 7;
  bool has_tvalue() const;
  void clear_tvalue();
  static const int kTValueFieldNumber = 7;
  const ::dzhyun::Table& tvalue() const;
  ::dzhyun::Table* mutable_tvalue();
  ::dzhyun::Table* release_tvalue();
  void set_allocated_tvalue(::dzhyun::Table* tvalue);

  // optional .dzhyun.CArray aValues = 8;
  bool has_avalues() const;
  void clear_avalues();
  static const int kAValuesFieldNumber = 8;
  const ::dzhyun::CArray& avalues() const;
  ::dzhyun::CArray* mutable_avalues();
  ::dzhyun::CArray* release_avalues();
  void set_allocated_avalues(::dzhyun::CArray* avalues);

  // @@protoc_insertion_point(class_scope:dzhyun.CDataX)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_ivalue();
  inline void clear_has_ivalue();
  inline void set_has_fvalue();
  inline void clear_has_fvalue();
  inline void set_has_dvalue();
  inline void clear_has_dvalue();
  inline void set_has_svalue();
  inline void clear_has_svalue();
  inline void set_has_bvalues();
  inline void clear_has_bvalues();
  inline void set_has_tvalue();
  inline void clear_has_tvalue();
  inline void set_has_avalues();
  inline void clear_has_avalues();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ivalue_;
  ::google::protobuf::int32 index_;
  float fvalue_;
  double dvalue_;
  ::google::protobuf::internal::ArenaStringPtr svalue_;
  ::google::protobuf::internal::ArenaStringPtr bvalues_;
  ::dzhyun::Table* tvalue_;
  ::dzhyun::CArray* avalues_;
  friend void  protobuf_AddDesc_dzhpbtable_2eproto();
  friend void protobuf_AssignDesc_dzhpbtable_2eproto();
  friend void protobuf_ShutdownFile_dzhpbtable_2eproto();

  void InitAsDefaultInstance();
  static CDataX* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Tiid = 1;
  bool has_tiid() const;
  void clear_tiid();
  static const int kTiidFieldNumber = 1;
  ::google::protobuf::int32 tiid() const;
  void set_tiid(::google::protobuf::int32 value);

  // repeated .dzhyun.CInfo Info = 2;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::dzhyun::CInfo& info(int index) const;
  ::dzhyun::CInfo* mutable_info(int index);
  ::dzhyun::CInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::CInfo >&
      info() const;

  // repeated .dzhyun.CData Data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::dzhyun::CData& data(int index) const;
  ::dzhyun::CData* mutable_data(int index);
  ::dzhyun::CData* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::CData >&
      data() const;

  // repeated .dzhyun.CDataX DataX = 4;
  int datax_size() const;
  void clear_datax();
  static const int kDataXFieldNumber = 4;
  const ::dzhyun::CDataX& datax(int index) const;
  ::dzhyun::CDataX* mutable_datax(int index);
  ::dzhyun::CDataX* add_datax();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CDataX >*
      mutable_datax();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::CDataX >&
      datax() const;

  // optional string Name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string Memo = 6;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 6;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // @@protoc_insertion_point(class_scope:dzhyun.Table)
 private:
  inline void set_has_tiid();
  inline void clear_has_tiid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_memo();
  inline void clear_has_memo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CInfo > info_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CData > data_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::CDataX > datax_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::int32 tiid_;
  friend void  protobuf_AddDesc_dzhpbtable_2eproto();
  friend void protobuf_AssignDesc_dzhpbtable_2eproto();
  friend void protobuf_ShutdownFile_dzhpbtable_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CInfo

// optional string Name = 1;
inline bool CInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CInfo::name() const {
  // @@protoc_insertion_point(field_get:dzhyun.CInfo.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.CInfo.Name)
}
inline void CInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.CInfo.Name)
}
inline void CInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CInfo.Name)
}
inline ::std::string* CInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dzhyun.CInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CInfo::release_name() {
  // @@protoc_insertion_point(field_release:dzhyun.CInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CInfo.Name)
}

// optional int32 Type = 2;
inline bool CInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CInfo::type() const {
  // @@protoc_insertion_point(field_get:dzhyun.CInfo.Type)
  return type_;
}
inline void CInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CInfo.Type)
}

// optional int32 Ratio = 3;
inline bool CInfo::has_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CInfo::set_has_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CInfo::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CInfo::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 CInfo::ratio() const {
  // @@protoc_insertion_point(field_get:dzhyun.CInfo.Ratio)
  return ratio_;
}
inline void CInfo::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CInfo.Ratio)
}

// -------------------------------------------------------------------

// CArray

// repeated int64 iValues = 1 [packed = true];
inline int CArray::ivalues_size() const {
  return ivalues_.size();
}
inline void CArray::clear_ivalues() {
  ivalues_.Clear();
}
inline ::google::protobuf::int64 CArray::ivalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CArray.iValues)
  return ivalues_.Get(index);
}
inline void CArray::set_ivalues(int index, ::google::protobuf::int64 value) {
  ivalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CArray.iValues)
}
inline void CArray::add_ivalues(::google::protobuf::int64 value) {
  ivalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CArray.iValues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CArray::ivalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CArray.iValues)
  return ivalues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CArray::mutable_ivalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CArray.iValues)
  return &ivalues_;
}

// repeated float fValues = 2 [packed = true];
inline int CArray::fvalues_size() const {
  return fvalues_.size();
}
inline void CArray::clear_fvalues() {
  fvalues_.Clear();
}
inline float CArray::fvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CArray.fValues)
  return fvalues_.Get(index);
}
inline void CArray::set_fvalues(int index, float value) {
  fvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CArray.fValues)
}
inline void CArray::add_fvalues(float value) {
  fvalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CArray.fValues)
}
inline const ::google::protobuf::RepeatedField< float >&
CArray::fvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CArray.fValues)
  return fvalues_;
}
inline ::google::protobuf::RepeatedField< float >*
CArray::mutable_fvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CArray.fValues)
  return &fvalues_;
}

// repeated double dValues = 3 [packed = true];
inline int CArray::dvalues_size() const {
  return dvalues_.size();
}
inline void CArray::clear_dvalues() {
  dvalues_.Clear();
}
inline double CArray::dvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CArray.dValues)
  return dvalues_.Get(index);
}
inline void CArray::set_dvalues(int index, double value) {
  dvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CArray.dValues)
}
inline void CArray::add_dvalues(double value) {
  dvalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CArray.dValues)
}
inline const ::google::protobuf::RepeatedField< double >&
CArray::dvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CArray.dValues)
  return dvalues_;
}
inline ::google::protobuf::RepeatedField< double >*
CArray::mutable_dvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CArray.dValues)
  return &dvalues_;
}

// repeated string sValues = 4;
inline int CArray::svalues_size() const {
  return svalues_.size();
}
inline void CArray::clear_svalues() {
  svalues_.Clear();
}
inline const ::std::string& CArray::svalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CArray.sValues)
  return svalues_.Get(index);
}
inline ::std::string* CArray::mutable_svalues(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.CArray.sValues)
  return svalues_.Mutable(index);
}
inline void CArray::set_svalues(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dzhyun.CArray.sValues)
  svalues_.Mutable(index)->assign(value);
}
inline void CArray::set_svalues(int index, const char* value) {
  svalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dzhyun.CArray.sValues)
}
inline void CArray::set_svalues(int index, const char* value, size_t size) {
  svalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CArray.sValues)
}
inline ::std::string* CArray::add_svalues() {
  // @@protoc_insertion_point(field_add_mutable:dzhyun.CArray.sValues)
  return svalues_.Add();
}
inline void CArray::add_svalues(const ::std::string& value) {
  svalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dzhyun.CArray.sValues)
}
inline void CArray::add_svalues(const char* value) {
  svalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dzhyun.CArray.sValues)
}
inline void CArray::add_svalues(const char* value, size_t size) {
  svalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dzhyun.CArray.sValues)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CArray::svalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CArray.sValues)
  return svalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CArray::mutable_svalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CArray.sValues)
  return &svalues_;
}

// -------------------------------------------------------------------

// CData

// required int32 Index = 1;
inline bool CData::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CData::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CData::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CData::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CData::index() const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.Index)
  return index_;
}
inline void CData::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CData.Index)
}

// repeated int64 iValues = 2 [packed = true];
inline int CData::ivalues_size() const {
  return ivalues_.size();
}
inline void CData::clear_ivalues() {
  ivalues_.Clear();
}
inline ::google::protobuf::int64 CData::ivalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.iValues)
  return ivalues_.Get(index);
}
inline void CData::set_ivalues(int index, ::google::protobuf::int64 value) {
  ivalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CData.iValues)
}
inline void CData::add_ivalues(::google::protobuf::int64 value) {
  ivalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CData.iValues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CData::ivalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.iValues)
  return ivalues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CData::mutable_ivalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.iValues)
  return &ivalues_;
}

// repeated float fValues = 3 [packed = true];
inline int CData::fvalues_size() const {
  return fvalues_.size();
}
inline void CData::clear_fvalues() {
  fvalues_.Clear();
}
inline float CData::fvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.fValues)
  return fvalues_.Get(index);
}
inline void CData::set_fvalues(int index, float value) {
  fvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CData.fValues)
}
inline void CData::add_fvalues(float value) {
  fvalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CData.fValues)
}
inline const ::google::protobuf::RepeatedField< float >&
CData::fvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.fValues)
  return fvalues_;
}
inline ::google::protobuf::RepeatedField< float >*
CData::mutable_fvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.fValues)
  return &fvalues_;
}

// repeated double dValues = 4 [packed = true];
inline int CData::dvalues_size() const {
  return dvalues_.size();
}
inline void CData::clear_dvalues() {
  dvalues_.Clear();
}
inline double CData::dvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.dValues)
  return dvalues_.Get(index);
}
inline void CData::set_dvalues(int index, double value) {
  dvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CData.dValues)
}
inline void CData::add_dvalues(double value) {
  dvalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CData.dValues)
}
inline const ::google::protobuf::RepeatedField< double >&
CData::dvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.dValues)
  return dvalues_;
}
inline ::google::protobuf::RepeatedField< double >*
CData::mutable_dvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.dValues)
  return &dvalues_;
}

// repeated string sValues = 5;
inline int CData::svalues_size() const {
  return svalues_.size();
}
inline void CData::clear_svalues() {
  svalues_.Clear();
}
inline const ::std::string& CData::svalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.sValues)
  return svalues_.Get(index);
}
inline ::std::string* CData::mutable_svalues(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.CData.sValues)
  return svalues_.Mutable(index);
}
inline void CData::set_svalues(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dzhyun.CData.sValues)
  svalues_.Mutable(index)->assign(value);
}
inline void CData::set_svalues(int index, const char* value) {
  svalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dzhyun.CData.sValues)
}
inline void CData::set_svalues(int index, const char* value, size_t size) {
  svalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CData.sValues)
}
inline ::std::string* CData::add_svalues() {
  // @@protoc_insertion_point(field_add_mutable:dzhyun.CData.sValues)
  return svalues_.Add();
}
inline void CData::add_svalues(const ::std::string& value) {
  svalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dzhyun.CData.sValues)
}
inline void CData::add_svalues(const char* value) {
  svalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dzhyun.CData.sValues)
}
inline void CData::add_svalues(const char* value, size_t size) {
  svalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dzhyun.CData.sValues)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CData::svalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.sValues)
  return svalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CData::mutable_svalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.sValues)
  return &svalues_;
}

// repeated bytes bValues = 6;
inline int CData::bvalues_size() const {
  return bvalues_.size();
}
inline void CData::clear_bvalues() {
  bvalues_.Clear();
}
inline const ::std::string& CData::bvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.bValues)
  return bvalues_.Get(index);
}
inline ::std::string* CData::mutable_bvalues(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.CData.bValues)
  return bvalues_.Mutable(index);
}
inline void CData::set_bvalues(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dzhyun.CData.bValues)
  bvalues_.Mutable(index)->assign(value);
}
inline void CData::set_bvalues(int index, const char* value) {
  bvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dzhyun.CData.bValues)
}
inline void CData::set_bvalues(int index, const void* value, size_t size) {
  bvalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CData.bValues)
}
inline ::std::string* CData::add_bvalues() {
  // @@protoc_insertion_point(field_add_mutable:dzhyun.CData.bValues)
  return bvalues_.Add();
}
inline void CData::add_bvalues(const ::std::string& value) {
  bvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dzhyun.CData.bValues)
}
inline void CData::add_bvalues(const char* value) {
  bvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dzhyun.CData.bValues)
}
inline void CData::add_bvalues(const void* value, size_t size) {
  bvalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dzhyun.CData.bValues)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CData::bvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.bValues)
  return bvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CData::mutable_bvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.bValues)
  return &bvalues_;
}

// repeated .dzhyun.Table tValues = 7;
inline int CData::tvalues_size() const {
  return tvalues_.size();
}
inline void CData::clear_tvalues() {
  tvalues_.Clear();
}
inline const ::dzhyun::Table& CData::tvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.tValues)
  return tvalues_.Get(index);
}
inline ::dzhyun::Table* CData::mutable_tvalues(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.CData.tValues)
  return tvalues_.Mutable(index);
}
inline ::dzhyun::Table* CData::add_tvalues() {
  // @@protoc_insertion_point(field_add:dzhyun.CData.tValues)
  return tvalues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::Table >*
CData::mutable_tvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.tValues)
  return &tvalues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::Table >&
CData::tvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.tValues)
  return tvalues_;
}

// repeated .dzhyun.CArray aValues = 8;
inline int CData::avalues_size() const {
  return avalues_.size();
}
inline void CData::clear_avalues() {
  avalues_.Clear();
}
inline const ::dzhyun::CArray& CData::avalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.aValues)
  return avalues_.Get(index);
}
inline ::dzhyun::CArray* CData::mutable_avalues(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.CData.aValues)
  return avalues_.Mutable(index);
}
inline ::dzhyun::CArray* CData::add_avalues() {
  // @@protoc_insertion_point(field_add:dzhyun.CData.aValues)
  return avalues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::CArray >*
CData::mutable_avalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.aValues)
  return &avalues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::CArray >&
CData::avalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.aValues)
  return avalues_;
}

// repeated sint64 xValues = 9 [packed = true];
inline int CData::xvalues_size() const {
  return xvalues_.size();
}
inline void CData::clear_xvalues() {
  xvalues_.Clear();
}
inline ::google::protobuf::int64 CData::xvalues(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.CData.xValues)
  return xvalues_.Get(index);
}
inline void CData::set_xvalues(int index, ::google::protobuf::int64 value) {
  xvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:dzhyun.CData.xValues)
}
inline void CData::add_xvalues(::google::protobuf::int64 value) {
  xvalues_.Add(value);
  // @@protoc_insertion_point(field_add:dzhyun.CData.xValues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CData::xvalues() const {
  // @@protoc_insertion_point(field_list:dzhyun.CData.xValues)
  return xvalues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CData::mutable_xvalues() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.CData.xValues)
  return &xvalues_;
}

// -------------------------------------------------------------------

// CDataX

// required int32 Index = 1;
inline bool CDataX::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataX::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataX::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataX::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CDataX::index() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.Index)
  return index_;
}
inline void CDataX::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CDataX.Index)
}

// optional int64 iValue = 2;
inline bool CDataX::has_ivalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataX::set_has_ivalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataX::clear_has_ivalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataX::clear_ivalue() {
  ivalue_ = GOOGLE_LONGLONG(0);
  clear_has_ivalue();
}
inline ::google::protobuf::int64 CDataX::ivalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.iValue)
  return ivalue_;
}
inline void CDataX::set_ivalue(::google::protobuf::int64 value) {
  set_has_ivalue();
  ivalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CDataX.iValue)
}

// optional float fValue = 3;
inline bool CDataX::has_fvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataX::set_has_fvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDataX::clear_has_fvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDataX::clear_fvalue() {
  fvalue_ = 0;
  clear_has_fvalue();
}
inline float CDataX::fvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.fValue)
  return fvalue_;
}
inline void CDataX::set_fvalue(float value) {
  set_has_fvalue();
  fvalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CDataX.fValue)
}

// optional double dValue = 4;
inline bool CDataX::has_dvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDataX::set_has_dvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDataX::clear_has_dvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDataX::clear_dvalue() {
  dvalue_ = 0;
  clear_has_dvalue();
}
inline double CDataX::dvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.dValue)
  return dvalue_;
}
inline void CDataX::set_dvalue(double value) {
  set_has_dvalue();
  dvalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CDataX.dValue)
}

// optional string sValue = 5;
inline bool CDataX::has_svalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDataX::set_has_svalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDataX::clear_has_svalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDataX::clear_svalue() {
  svalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svalue();
}
inline const ::std::string& CDataX::svalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.sValue)
  return svalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDataX::set_svalue(const ::std::string& value) {
  set_has_svalue();
  svalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.CDataX.sValue)
}
inline void CDataX::set_svalue(const char* value) {
  set_has_svalue();
  svalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.CDataX.sValue)
}
inline void CDataX::set_svalue(const char* value, size_t size) {
  set_has_svalue();
  svalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CDataX.sValue)
}
inline ::std::string* CDataX::mutable_svalue() {
  set_has_svalue();
  // @@protoc_insertion_point(field_mutable:dzhyun.CDataX.sValue)
  return svalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDataX::release_svalue() {
  // @@protoc_insertion_point(field_release:dzhyun.CDataX.sValue)
  clear_has_svalue();
  return svalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDataX::set_allocated_svalue(::std::string* svalue) {
  if (svalue != NULL) {
    set_has_svalue();
  } else {
    clear_has_svalue();
  }
  svalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svalue);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CDataX.sValue)
}

// optional bytes bValues = 6;
inline bool CDataX::has_bvalues() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDataX::set_has_bvalues() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDataX::clear_has_bvalues() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDataX::clear_bvalues() {
  bvalues_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bvalues();
}
inline const ::std::string& CDataX::bvalues() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.bValues)
  return bvalues_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDataX::set_bvalues(const ::std::string& value) {
  set_has_bvalues();
  bvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.CDataX.bValues)
}
inline void CDataX::set_bvalues(const char* value) {
  set_has_bvalues();
  bvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.CDataX.bValues)
}
inline void CDataX::set_bvalues(const void* value, size_t size) {
  set_has_bvalues();
  bvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CDataX.bValues)
}
inline ::std::string* CDataX::mutable_bvalues() {
  set_has_bvalues();
  // @@protoc_insertion_point(field_mutable:dzhyun.CDataX.bValues)
  return bvalues_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDataX::release_bvalues() {
  // @@protoc_insertion_point(field_release:dzhyun.CDataX.bValues)
  clear_has_bvalues();
  return bvalues_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDataX::set_allocated_bvalues(::std::string* bvalues) {
  if (bvalues != NULL) {
    set_has_bvalues();
  } else {
    clear_has_bvalues();
  }
  bvalues_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bvalues);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CDataX.bValues)
}

// optional .dzhyun.Table tValue = 7;
inline bool CDataX::has_tvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDataX::set_has_tvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDataX::clear_has_tvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDataX::clear_tvalue() {
  if (tvalue_ != NULL) tvalue_->::dzhyun::Table::Clear();
  clear_has_tvalue();
}
inline const ::dzhyun::Table& CDataX::tvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.tValue)
  return tvalue_ != NULL ? *tvalue_ : *default_instance_->tvalue_;
}
inline ::dzhyun::Table* CDataX::mutable_tvalue() {
  set_has_tvalue();
  if (tvalue_ == NULL) {
    tvalue_ = new ::dzhyun::Table;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.CDataX.tValue)
  return tvalue_;
}
inline ::dzhyun::Table* CDataX::release_tvalue() {
  // @@protoc_insertion_point(field_release:dzhyun.CDataX.tValue)
  clear_has_tvalue();
  ::dzhyun::Table* temp = tvalue_;
  tvalue_ = NULL;
  return temp;
}
inline void CDataX::set_allocated_tvalue(::dzhyun::Table* tvalue) {
  delete tvalue_;
  tvalue_ = tvalue;
  if (tvalue) {
    set_has_tvalue();
  } else {
    clear_has_tvalue();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CDataX.tValue)
}

// optional .dzhyun.CArray aValues = 8;
inline bool CDataX::has_avalues() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDataX::set_has_avalues() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDataX::clear_has_avalues() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDataX::clear_avalues() {
  if (avalues_ != NULL) avalues_->::dzhyun::CArray::Clear();
  clear_has_avalues();
}
inline const ::dzhyun::CArray& CDataX::avalues() const {
  // @@protoc_insertion_point(field_get:dzhyun.CDataX.aValues)
  return avalues_ != NULL ? *avalues_ : *default_instance_->avalues_;
}
inline ::dzhyun::CArray* CDataX::mutable_avalues() {
  set_has_avalues();
  if (avalues_ == NULL) {
    avalues_ = new ::dzhyun::CArray;
  }
  // @@protoc_insertion_point(field_mutable:dzhyun.CDataX.aValues)
  return avalues_;
}
inline ::dzhyun::CArray* CDataX::release_avalues() {
  // @@protoc_insertion_point(field_release:dzhyun.CDataX.aValues)
  clear_has_avalues();
  ::dzhyun::CArray* temp = avalues_;
  avalues_ = NULL;
  return temp;
}
inline void CDataX::set_allocated_avalues(::dzhyun::CArray* avalues) {
  delete avalues_;
  avalues_ = avalues;
  if (avalues) {
    set_has_avalues();
  } else {
    clear_has_avalues();
  }
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CDataX.aValues)
}

// -------------------------------------------------------------------

// Table

// optional int32 Tiid = 1;
inline bool Table::has_tiid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_tiid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_tiid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_tiid() {
  tiid_ = 0;
  clear_has_tiid();
}
inline ::google::protobuf::int32 Table::tiid() const {
  // @@protoc_insertion_point(field_get:dzhyun.Table.Tiid)
  return tiid_;
}
inline void Table::set_tiid(::google::protobuf::int32 value) {
  set_has_tiid();
  tiid_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.Table.Tiid)
}

// repeated .dzhyun.CInfo Info = 2;
inline int Table::info_size() const {
  return info_.size();
}
inline void Table::clear_info() {
  info_.Clear();
}
inline const ::dzhyun::CInfo& Table::info(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.Table.Info)
  return info_.Get(index);
}
inline ::dzhyun::CInfo* Table::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.Table.Info)
  return info_.Mutable(index);
}
inline ::dzhyun::CInfo* Table::add_info() {
  // @@protoc_insertion_point(field_add:dzhyun.Table.Info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::CInfo >*
Table::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.Table.Info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::CInfo >&
Table::info() const {
  // @@protoc_insertion_point(field_list:dzhyun.Table.Info)
  return info_;
}

// repeated .dzhyun.CData Data = 3;
inline int Table::data_size() const {
  return data_.size();
}
inline void Table::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::CData& Table::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.Table.Data)
  return data_.Get(index);
}
inline ::dzhyun::CData* Table::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.Table.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::CData* Table::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.Table.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::CData >*
Table::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.Table.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::CData >&
Table::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.Table.Data)
  return data_;
}

// repeated .dzhyun.CDataX DataX = 4;
inline int Table::datax_size() const {
  return datax_.size();
}
inline void Table::clear_datax() {
  datax_.Clear();
}
inline const ::dzhyun::CDataX& Table::datax(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.Table.DataX)
  return datax_.Get(index);
}
inline ::dzhyun::CDataX* Table::mutable_datax(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.Table.DataX)
  return datax_.Mutable(index);
}
inline ::dzhyun::CDataX* Table::add_datax() {
  // @@protoc_insertion_point(field_add:dzhyun.Table.DataX)
  return datax_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::CDataX >*
Table::mutable_datax() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.Table.DataX)
  return &datax_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::CDataX >&
Table::datax() const {
  // @@protoc_insertion_point(field_list:dzhyun.Table.DataX)
  return datax_;
}

// optional string Name = 5;
inline bool Table::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Table::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:dzhyun.Table.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.Table.Name)
}
inline void Table::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.Table.Name)
}
inline void Table::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.Table.Name)
}
inline ::std::string* Table::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dzhyun.Table.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:dzhyun.Table.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.Table.Name)
}

// optional string Memo = 6;
inline bool Table::has_memo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Table::set_has_memo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Table::clear_has_memo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Table::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& Table::memo() const {
  // @@protoc_insertion_point(field_get:dzhyun.Table.Memo)
  return memo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.Table.Memo)
}
inline void Table::set_memo(const char* value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.Table.Memo)
}
inline void Table::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.Table.Memo)
}
inline ::std::string* Table::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:dzhyun.Table.Memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_memo() {
  // @@protoc_insertion_point(field_release:dzhyun.Table.Memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.Table.Memo)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dzhyun::InfoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dzhyun::InfoType>() {
  return ::dzhyun::InfoType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dzhpbtable_2eproto__INCLUDED
