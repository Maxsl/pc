// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CldDanShangPinShuXing.proto

#ifndef PROTOBUF_CldDanShangPinShuXing_2eproto__INCLUDED
#define PROTOBUF_CldDanShangPinShuXing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CldDanShangPinShuXing_2eproto();
void protobuf_AssignDesc_CldDanShangPinShuXing_2eproto();
void protobuf_ShutdownFile_CldDanShangPinShuXing_2eproto();

class DanShangPinShuXing;
class FutureInfo;
class MarketTradeDate;
class NewStockInfo;

// ===================================================================

class DanShangPinShuXing : public ::google::protobuf::Message {
 public:
  DanShangPinShuXing();
  virtual ~DanShangPinShuXing();

  DanShangPinShuXing(const DanShangPinShuXing& from);

  inline DanShangPinShuXing& operator=(const DanShangPinShuXing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DanShangPinShuXing& default_instance();

  void Swap(DanShangPinShuXing* other);

  // implements Message ----------------------------------------------

  inline DanShangPinShuXing* New() const { return New(NULL); }

  DanShangPinShuXing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DanShangPinShuXing& from);
  void MergeFrom(const DanShangPinShuXing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DanShangPinShuXing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // optional string shangShiShiJian = 2;
  bool has_shangshishijian() const;
  void clear_shangshishijian();
  static const int kShangShiShiJianFieldNumber = 2;
  const ::std::string& shangshishijian() const;
  void set_shangshishijian(const ::std::string& value);
  void set_shangshishijian(const char* value);
  void set_shangshishijian(const char* value, size_t size);
  ::std::string* mutable_shangshishijian();
  ::std::string* release_shangshishijian();
  void set_allocated_shangshishijian(::std::string* shangshishijian);

  // optional string zhongWenJianCheng = 3;
  bool has_zhongwenjiancheng() const;
  void clear_zhongwenjiancheng();
  static const int kZhongWenJianChengFieldNumber = 3;
  const ::std::string& zhongwenjiancheng() const;
  void set_zhongwenjiancheng(const ::std::string& value);
  void set_zhongwenjiancheng(const char* value);
  void set_zhongwenjiancheng(const char* value, size_t size);
  ::std::string* mutable_zhongwenjiancheng();
  ::std::string* release_zhongwenjiancheng();
  void set_allocated_zhongwenjiancheng(::std::string* zhongwenjiancheng);

  // optional string yingWenQuanCheng = 4;
  bool has_yingwenquancheng() const;
  void clear_yingwenquancheng();
  static const int kYingWenQuanChengFieldNumber = 4;
  const ::std::string& yingwenquancheng() const;
  void set_yingwenquancheng(const ::std::string& value);
  void set_yingwenquancheng(const char* value);
  void set_yingwenquancheng(const char* value, size_t size);
  ::std::string* mutable_yingwenquancheng();
  ::std::string* release_yingwenquancheng();
  void set_allocated_yingwenquancheng(::std::string* yingwenquancheng);

  // optional int32 xiaoShuDianWeiShu = 5;
  bool has_xiaoshudianweishu() const;
  void clear_xiaoshudianweishu();
  static const int kXiaoShuDianWeiShuFieldNumber = 5;
  ::google::protobuf::int32 xiaoshudianweishu() const;
  void set_xiaoshudianweishu(::google::protobuf::int32 value);

  // optional int32 jiaoYiShiJianLeiXin = 6;
  bool has_jiaoyishijianleixin() const;
  void clear_jiaoyishijianleixin();
  static const int kJiaoYiShiJianLeiXinFieldNumber = 6;
  ::google::protobuf::int32 jiaoyishijianleixin() const;
  void set_jiaoyishijianleixin(::google::protobuf::int32 value);

  // optional string jiaoYiBiZhong = 7;
  bool has_jiaoyibizhong() const;
  void clear_jiaoyibizhong();
  static const int kJiaoYiBiZhongFieldNumber = 7;
  const ::std::string& jiaoyibizhong() const;
  void set_jiaoyibizhong(const ::std::string& value);
  void set_jiaoyibizhong(const char* value);
  void set_jiaoyibizhong(const char* value, size_t size);
  ::std::string* mutable_jiaoyibizhong();
  ::std::string* release_jiaoyibizhong();
  void set_allocated_jiaoyibizhong(::std::string* jiaoyibizhong);

  // optional string tuiShiShiJian = 8;
  bool has_tuishishijian() const;
  void clear_tuishishijian();
  static const int kTuiShiShiJianFieldNumber = 8;
  const ::std::string& tuishishijian() const;
  void set_tuishishijian(const ::std::string& value);
  void set_tuishishijian(const char* value);
  void set_tuishishijian(const char* value, size_t size);
  ::std::string* mutable_tuishishijian();
  ::std::string* release_tuishishijian();
  void set_allocated_tuishishijian(::std::string* tuishishijian);

  // optional int32 shangShiZhuangTai = 9;
  bool has_shangshizhuangtai() const;
  void clear_shangshizhuangtai();
  static const int kShangShiZhuangTaiFieldNumber = 9;
  ::google::protobuf::int32 shangshizhuangtai() const;
  void set_shangshizhuangtai(::google::protobuf::int32 value);

  // optional string zhengQuanLeiBie = 10;
  bool has_zhengquanleibie() const;
  void clear_zhengquanleibie();
  static const int kZhengQuanLeiBieFieldNumber = 10;
  const ::std::string& zhengquanleibie() const;
  void set_zhengquanleibie(const ::std::string& value);
  void set_zhengquanleibie(const char* value);
  void set_zhengquanleibie(const char* value, size_t size);
  ::std::string* mutable_zhengquanleibie();
  ::std::string* release_zhengquanleibie();
  void set_allocated_zhengquanleibie(::std::string* zhengquanleibie);

  // optional int32 tingPai = 11;
  bool has_tingpai() const;
  void clear_tingpai();
  static const int kTingPaiFieldNumber = 11;
  ::google::protobuf::int32 tingpai() const;
  void set_tingpai(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dzhyun.DanShangPinShuXing)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_shangshishijian();
  inline void clear_has_shangshishijian();
  inline void set_has_zhongwenjiancheng();
  inline void clear_has_zhongwenjiancheng();
  inline void set_has_yingwenquancheng();
  inline void clear_has_yingwenquancheng();
  inline void set_has_xiaoshudianweishu();
  inline void clear_has_xiaoshudianweishu();
  inline void set_has_jiaoyishijianleixin();
  inline void clear_has_jiaoyishijianleixin();
  inline void set_has_jiaoyibizhong();
  inline void clear_has_jiaoyibizhong();
  inline void set_has_tuishishijian();
  inline void clear_has_tuishishijian();
  inline void set_has_shangshizhuangtai();
  inline void clear_has_shangshizhuangtai();
  inline void set_has_zhengquanleibie();
  inline void clear_has_zhengquanleibie();
  inline void set_has_tingpai();
  inline void clear_has_tingpai();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::internal::ArenaStringPtr shangshishijian_;
  ::google::protobuf::internal::ArenaStringPtr zhongwenjiancheng_;
  ::google::protobuf::internal::ArenaStringPtr yingwenquancheng_;
  ::google::protobuf::int32 xiaoshudianweishu_;
  ::google::protobuf::int32 jiaoyishijianleixin_;
  ::google::protobuf::internal::ArenaStringPtr jiaoyibizhong_;
  ::google::protobuf::internal::ArenaStringPtr tuishishijian_;
  ::google::protobuf::internal::ArenaStringPtr zhengquanleibie_;
  ::google::protobuf::int32 shangshizhuangtai_;
  ::google::protobuf::int32 tingpai_;
  friend void  protobuf_AddDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_AssignDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_ShutdownFile_CldDanShangPinShuXing_2eproto();

  void InitAsDefaultInstance();
  static DanShangPinShuXing* default_instance_;
};
// -------------------------------------------------------------------

class MarketTradeDate : public ::google::protobuf::Message {
 public:
  MarketTradeDate();
  virtual ~MarketTradeDate();

  MarketTradeDate(const MarketTradeDate& from);

  inline MarketTradeDate& operator=(const MarketTradeDate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketTradeDate& default_instance();

  void Swap(MarketTradeDate* other);

  // implements Message ----------------------------------------------

  inline MarketTradeDate* New() const { return New(NULL); }

  MarketTradeDate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketTradeDate& from);
  void MergeFrom(const MarketTradeDate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarketTradeDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // repeated string TradeDate = 2;
  int tradedate_size() const;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 2;
  const ::std::string& tradedate(int index) const;
  ::std::string* mutable_tradedate(int index);
  void set_tradedate(int index, const ::std::string& value);
  void set_tradedate(int index, const char* value);
  void set_tradedate(int index, const char* value, size_t size);
  ::std::string* add_tradedate();
  void add_tradedate(const ::std::string& value);
  void add_tradedate(const char* value);
  void add_tradedate(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tradedate() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tradedate();

  // @@protoc_insertion_point(class_scope:dzhyun.MarketTradeDate)
 private:
  inline void set_has_market();
  inline void clear_has_market();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tradedate_;
  friend void  protobuf_AddDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_AssignDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_ShutdownFile_CldDanShangPinShuXing_2eproto();

  void InitAsDefaultInstance();
  static MarketTradeDate* default_instance_;
};
// -------------------------------------------------------------------

class FutureInfo : public ::google::protobuf::Message {
 public:
  FutureInfo();
  virtual ~FutureInfo();

  FutureInfo(const FutureInfo& from);

  inline FutureInfo& operator=(const FutureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureInfo& default_instance();

  void Swap(FutureInfo* other);

  // implements Message ----------------------------------------------

  inline FutureInfo* New() const { return New(NULL); }

  FutureInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FutureInfo& from);
  void MergeFrom(const FutureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FutureInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Obj = 1;
  bool has_obj() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj() const;
  void set_obj(const ::std::string& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  ::std::string* mutable_obj();
  ::std::string* release_obj();
  void set_allocated_obj(::std::string* obj);

  // optional string Name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string BeginDate = 3;
  bool has_begindate() const;
  void clear_begindate();
  static const int kBeginDateFieldNumber = 3;
  const ::std::string& begindate() const;
  void set_begindate(const ::std::string& value);
  void set_begindate(const char* value);
  void set_begindate(const char* value, size_t size);
  ::std::string* mutable_begindate();
  ::std::string* release_begindate();
  void set_allocated_begindate(::std::string* begindate);

  // optional string EndDate = 4;
  bool has_enddate() const;
  void clear_enddate();
  static const int kEndDateFieldNumber = 4;
  const ::std::string& enddate() const;
  void set_enddate(const ::std::string& value);
  void set_enddate(const char* value);
  void set_enddate(const char* value, size_t size);
  ::std::string* mutable_enddate();
  ::std::string* release_enddate();
  void set_allocated_enddate(::std::string* enddate);

  // optional string DeliveryDay = 5;
  bool has_deliveryday() const;
  void clear_deliveryday();
  static const int kDeliveryDayFieldNumber = 5;
  const ::std::string& deliveryday() const;
  void set_deliveryday(const ::std::string& value);
  void set_deliveryday(const char* value);
  void set_deliveryday(const char* value, size_t size);
  ::std::string* mutable_deliveryday();
  ::std::string* release_deliveryday();
  void set_allocated_deliveryday(::std::string* deliveryday);

  // optional double TradeUnit = 6;
  bool has_tradeunit() const;
  void clear_tradeunit();
  static const int kTradeUnitFieldNumber = 6;
  double tradeunit() const;
  void set_tradeunit(double value);

  // optional double MarginRate = 7;
  bool has_marginrate() const;
  void clear_marginrate();
  static const int kMarginRateFieldNumber = 7;
  double marginrate() const;
  void set_marginrate(double value);

  // @@protoc_insertion_point(class_scope:dzhyun.FutureInfo)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_begindate();
  inline void clear_has_begindate();
  inline void set_has_enddate();
  inline void clear_has_enddate();
  inline void set_has_deliveryday();
  inline void clear_has_deliveryday();
  inline void set_has_tradeunit();
  inline void clear_has_tradeunit();
  inline void set_has_marginrate();
  inline void clear_has_marginrate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr obj_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr begindate_;
  ::google::protobuf::internal::ArenaStringPtr enddate_;
  ::google::protobuf::internal::ArenaStringPtr deliveryday_;
  double tradeunit_;
  double marginrate_;
  friend void  protobuf_AddDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_AssignDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_ShutdownFile_CldDanShangPinShuXing_2eproto();

  void InitAsDefaultInstance();
  static FutureInfo* default_instance_;
};
// -------------------------------------------------------------------

class NewStockInfo : public ::google::protobuf::Message {
 public:
  NewStockInfo();
  virtual ~NewStockInfo();

  NewStockInfo(const NewStockInfo& from);

  inline NewStockInfo& operator=(const NewStockInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewStockInfo& default_instance();

  void Swap(NewStockInfo* other);

  // implements Message ----------------------------------------------

  inline NewStockInfo* New() const { return New(NULL); }

  NewStockInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewStockInfo& from);
  void MergeFrom(const NewStockInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewStockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional string StockSummary = 3;
  bool has_stocksummary() const;
  void clear_stocksummary();
  static const int kStockSummaryFieldNumber = 3;
  const ::std::string& stocksummary() const;
  void set_stocksummary(const ::std::string& value);
  void set_stocksummary(const char* value);
  void set_stocksummary(const char* value, size_t size);
  ::std::string* mutable_stocksummary();
  ::std::string* release_stocksummary();
  void set_allocated_stocksummary(::std::string* stocksummary);

  // optional string BuyCode = 4;
  bool has_buycode() const;
  void clear_buycode();
  static const int kBuyCodeFieldNumber = 4;
  const ::std::string& buycode() const;
  void set_buycode(const ::std::string& value);
  void set_buycode(const char* value);
  void set_buycode(const char* value, size_t size);
  ::std::string* mutable_buycode();
  ::std::string* release_buycode();
  void set_allocated_buycode(::std::string* buycode);

  // optional string IssueTotal = 5;
  bool has_issuetotal() const;
  void clear_issuetotal();
  static const int kIssueTotalFieldNumber = 5;
  const ::std::string& issuetotal() const;
  void set_issuetotal(const ::std::string& value);
  void set_issuetotal(const char* value);
  void set_issuetotal(const char* value, size_t size);
  ::std::string* mutable_issuetotal();
  ::std::string* release_issuetotal();
  void set_allocated_issuetotal(::std::string* issuetotal);

  // optional string OnlineTotal = 6;
  bool has_onlinetotal() const;
  void clear_onlinetotal();
  static const int kOnlineTotalFieldNumber = 6;
  const ::std::string& onlinetotal() const;
  void set_onlinetotal(const ::std::string& value);
  void set_onlinetotal(const char* value);
  void set_onlinetotal(const char* value, size_t size);
  ::std::string* mutable_onlinetotal();
  ::std::string* release_onlinetotal();
  void set_allocated_onlinetotal(::std::string* onlinetotal);

  // optional string BuyLimit = 7;
  bool has_buylimit() const;
  void clear_buylimit();
  static const int kBuyLimitFieldNumber = 7;
  const ::std::string& buylimit() const;
  void set_buylimit(const ::std::string& value);
  void set_buylimit(const char* value);
  void set_buylimit(const char* value, size_t size);
  ::std::string* mutable_buylimit();
  ::std::string* release_buylimit();
  void set_allocated_buylimit(::std::string* buylimit);

  // optional string IssuePrice = 8;
  bool has_issueprice() const;
  void clear_issueprice();
  static const int kIssuePriceFieldNumber = 8;
  const ::std::string& issueprice() const;
  void set_issueprice(const ::std::string& value);
  void set_issueprice(const char* value);
  void set_issueprice(const char* value, size_t size);
  ::std::string* mutable_issueprice();
  ::std::string* release_issueprice();
  void set_allocated_issueprice(::std::string* issueprice);

  // optional string FirstClose = 9;
  bool has_firstclose() const;
  void clear_firstclose();
  static const int kFirstCloseFieldNumber = 9;
  const ::std::string& firstclose() const;
  void set_firstclose(const ::std::string& value);
  void set_firstclose(const char* value);
  void set_firstclose(const char* value, size_t size);
  ::std::string* mutable_firstclose();
  ::std::string* release_firstclose();
  void set_allocated_firstclose(::std::string* firstclose);

  // optional string BuyDate = 10;
  bool has_buydate() const;
  void clear_buydate();
  static const int kBuyDateFieldNumber = 10;
  const ::std::string& buydate() const;
  void set_buydate(const ::std::string& value);
  void set_buydate(const char* value);
  void set_buydate(const char* value, size_t size);
  ::std::string* mutable_buydate();
  ::std::string* release_buydate();
  void set_allocated_buydate(::std::string* buydate);

  // optional string PubDate = 11;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubDateFieldNumber = 11;
  const ::std::string& pubdate() const;
  void set_pubdate(const ::std::string& value);
  void set_pubdate(const char* value);
  void set_pubdate(const char* value, size_t size);
  ::std::string* mutable_pubdate();
  ::std::string* release_pubdate();
  void set_allocated_pubdate(::std::string* pubdate);

  // optional string PayDate = 12;
  bool has_paydate() const;
  void clear_paydate();
  static const int kPayDateFieldNumber = 12;
  const ::std::string& paydate() const;
  void set_paydate(const ::std::string& value);
  void set_paydate(const char* value);
  void set_paydate(const char* value, size_t size);
  ::std::string* mutable_paydate();
  ::std::string* release_paydate();
  void set_allocated_paydate(::std::string* paydate);

  // optional string TradeDate = 13;
  bool has_tradedate() const;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 13;
  const ::std::string& tradedate() const;
  void set_tradedate(const ::std::string& value);
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  ::std::string* mutable_tradedate();
  ::std::string* release_tradedate();
  void set_allocated_tradedate(::std::string* tradedate);

  // optional string IssuePE = 14;
  bool has_issuepe() const;
  void clear_issuepe();
  static const int kIssuePEFieldNumber = 14;
  const ::std::string& issuepe() const;
  void set_issuepe(const ::std::string& value);
  void set_issuepe(const char* value);
  void set_issuepe(const char* value, size_t size);
  ::std::string* mutable_issuepe();
  ::std::string* release_issuepe();
  void set_allocated_issuepe(::std::string* issuepe);

  // optional string IndustryPE = 15;
  bool has_industrype() const;
  void clear_industrype();
  static const int kIndustryPEFieldNumber = 15;
  const ::std::string& industrype() const;
  void set_industrype(const ::std::string& value);
  void set_industrype(const char* value);
  void set_industrype(const char* value, size_t size);
  ::std::string* mutable_industrype();
  ::std::string* release_industrype();
  void set_allocated_industrype(::std::string* industrype);

  // optional string SuccessRate = 16;
  bool has_successrate() const;
  void clear_successrate();
  static const int kSuccessRateFieldNumber = 16;
  const ::std::string& successrate() const;
  void set_successrate(const ::std::string& value);
  void set_successrate(const char* value);
  void set_successrate(const char* value, size_t size);
  ::std::string* mutable_successrate();
  ::std::string* release_successrate();
  void set_allocated_successrate(::std::string* successrate);

  // optional string OfferTotal = 17;
  bool has_offertotal() const;
  void clear_offertotal();
  static const int kOfferTotalFieldNumber = 17;
  const ::std::string& offertotal() const;
  void set_offertotal(const ::std::string& value);
  void set_offertotal(const char* value);
  void set_offertotal(const char* value, size_t size);
  ::std::string* mutable_offertotal();
  ::std::string* release_offertotal();
  void set_allocated_offertotal(::std::string* offertotal);

  // optional string OfferTimes = 18;
  bool has_offertimes() const;
  void clear_offertimes();
  static const int kOfferTimesFieldNumber = 18;
  const ::std::string& offertimes() const;
  void set_offertimes(const ::std::string& value);
  void set_offertimes(const char* value);
  void set_offertimes(const char* value, size_t size);
  ::std::string* mutable_offertimes();
  ::std::string* release_offertimes();
  void set_allocated_offertimes(::std::string* offertimes);

  // optional string SeriesNum = 19;
  bool has_seriesnum() const;
  void clear_seriesnum();
  static const int kSeriesNumFieldNumber = 19;
  const ::std::string& seriesnum() const;
  void set_seriesnum(const ::std::string& value);
  void set_seriesnum(const char* value);
  void set_seriesnum(const char* value, size_t size);
  ::std::string* mutable_seriesnum();
  ::std::string* release_seriesnum();
  void set_allocated_seriesnum(::std::string* seriesnum);

  // optional string IncreaseTotal = 20;
  bool has_increasetotal() const;
  void clear_increasetotal();
  static const int kIncreaseTotalFieldNumber = 20;
  const ::std::string& increasetotal() const;
  void set_increasetotal(const ::std::string& value);
  void set_increasetotal(const char* value);
  void set_increasetotal(const char* value, size_t size);
  ::std::string* mutable_increasetotal();
  ::std::string* release_increasetotal();
  void set_allocated_increasetotal(::std::string* increasetotal);

  // @@protoc_insertion_point(class_scope:dzhyun.NewStockInfo)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_stocksummary();
  inline void clear_has_stocksummary();
  inline void set_has_buycode();
  inline void clear_has_buycode();
  inline void set_has_issuetotal();
  inline void clear_has_issuetotal();
  inline void set_has_onlinetotal();
  inline void clear_has_onlinetotal();
  inline void set_has_buylimit();
  inline void clear_has_buylimit();
  inline void set_has_issueprice();
  inline void clear_has_issueprice();
  inline void set_has_firstclose();
  inline void clear_has_firstclose();
  inline void set_has_buydate();
  inline void clear_has_buydate();
  inline void set_has_pubdate();
  inline void clear_has_pubdate();
  inline void set_has_paydate();
  inline void clear_has_paydate();
  inline void set_has_tradedate();
  inline void clear_has_tradedate();
  inline void set_has_issuepe();
  inline void clear_has_issuepe();
  inline void set_has_industrype();
  inline void clear_has_industrype();
  inline void set_has_successrate();
  inline void clear_has_successrate();
  inline void set_has_offertotal();
  inline void clear_has_offertotal();
  inline void set_has_offertimes();
  inline void clear_has_offertimes();
  inline void set_has_seriesnum();
  inline void clear_has_seriesnum();
  inline void set_has_increasetotal();
  inline void clear_has_increasetotal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::internal::ArenaStringPtr stocksummary_;
  ::google::protobuf::internal::ArenaStringPtr buycode_;
  ::google::protobuf::internal::ArenaStringPtr issuetotal_;
  ::google::protobuf::internal::ArenaStringPtr onlinetotal_;
  ::google::protobuf::internal::ArenaStringPtr buylimit_;
  ::google::protobuf::internal::ArenaStringPtr issueprice_;
  ::google::protobuf::internal::ArenaStringPtr firstclose_;
  ::google::protobuf::internal::ArenaStringPtr buydate_;
  ::google::protobuf::internal::ArenaStringPtr pubdate_;
  ::google::protobuf::internal::ArenaStringPtr paydate_;
  ::google::protobuf::internal::ArenaStringPtr tradedate_;
  ::google::protobuf::internal::ArenaStringPtr issuepe_;
  ::google::protobuf::internal::ArenaStringPtr industrype_;
  ::google::protobuf::internal::ArenaStringPtr successrate_;
  ::google::protobuf::internal::ArenaStringPtr offertotal_;
  ::google::protobuf::internal::ArenaStringPtr offertimes_;
  ::google::protobuf::internal::ArenaStringPtr seriesnum_;
  ::google::protobuf::internal::ArenaStringPtr increasetotal_;
  friend void  protobuf_AddDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_AssignDesc_CldDanShangPinShuXing_2eproto();
  friend void protobuf_ShutdownFile_CldDanShangPinShuXing_2eproto();

  void InitAsDefaultInstance();
  static NewStockInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DanShangPinShuXing

// required string obj = 1;
inline bool DanShangPinShuXing::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DanShangPinShuXing::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DanShangPinShuXing::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DanShangPinShuXing::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& DanShangPinShuXing::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.obj)
}
inline void DanShangPinShuXing::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.obj)
}
inline void DanShangPinShuXing::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.obj)
}
inline ::std::string* DanShangPinShuXing::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.obj)
}

// optional string shangShiShiJian = 2;
inline bool DanShangPinShuXing::has_shangshishijian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DanShangPinShuXing::set_has_shangshishijian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DanShangPinShuXing::clear_has_shangshishijian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DanShangPinShuXing::clear_shangshishijian() {
  shangshishijian_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shangshishijian();
}
inline const ::std::string& DanShangPinShuXing::shangshishijian() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.shangShiShiJian)
  return shangshishijian_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_shangshishijian(const ::std::string& value) {
  set_has_shangshishijian();
  shangshishijian_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.shangShiShiJian)
}
inline void DanShangPinShuXing::set_shangshishijian(const char* value) {
  set_has_shangshishijian();
  shangshishijian_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.shangShiShiJian)
}
inline void DanShangPinShuXing::set_shangshishijian(const char* value, size_t size) {
  set_has_shangshishijian();
  shangshishijian_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.shangShiShiJian)
}
inline ::std::string* DanShangPinShuXing::mutable_shangshishijian() {
  set_has_shangshishijian();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.shangShiShiJian)
  return shangshishijian_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_shangshishijian() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.shangShiShiJian)
  clear_has_shangshishijian();
  return shangshishijian_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_shangshishijian(::std::string* shangshishijian) {
  if (shangshishijian != NULL) {
    set_has_shangshishijian();
  } else {
    clear_has_shangshishijian();
  }
  shangshishijian_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shangshishijian);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.shangShiShiJian)
}

// optional string zhongWenJianCheng = 3;
inline bool DanShangPinShuXing::has_zhongwenjiancheng() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DanShangPinShuXing::set_has_zhongwenjiancheng() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DanShangPinShuXing::clear_has_zhongwenjiancheng() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DanShangPinShuXing::clear_zhongwenjiancheng() {
  zhongwenjiancheng_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zhongwenjiancheng();
}
inline const ::std::string& DanShangPinShuXing::zhongwenjiancheng() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
  return zhongwenjiancheng_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_zhongwenjiancheng(const ::std::string& value) {
  set_has_zhongwenjiancheng();
  zhongwenjiancheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
}
inline void DanShangPinShuXing::set_zhongwenjiancheng(const char* value) {
  set_has_zhongwenjiancheng();
  zhongwenjiancheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
}
inline void DanShangPinShuXing::set_zhongwenjiancheng(const char* value, size_t size) {
  set_has_zhongwenjiancheng();
  zhongwenjiancheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
}
inline ::std::string* DanShangPinShuXing::mutable_zhongwenjiancheng() {
  set_has_zhongwenjiancheng();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
  return zhongwenjiancheng_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_zhongwenjiancheng() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
  clear_has_zhongwenjiancheng();
  return zhongwenjiancheng_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_zhongwenjiancheng(::std::string* zhongwenjiancheng) {
  if (zhongwenjiancheng != NULL) {
    set_has_zhongwenjiancheng();
  } else {
    clear_has_zhongwenjiancheng();
  }
  zhongwenjiancheng_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zhongwenjiancheng);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.zhongWenJianCheng)
}

// optional string yingWenQuanCheng = 4;
inline bool DanShangPinShuXing::has_yingwenquancheng() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DanShangPinShuXing::set_has_yingwenquancheng() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DanShangPinShuXing::clear_has_yingwenquancheng() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DanShangPinShuXing::clear_yingwenquancheng() {
  yingwenquancheng_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_yingwenquancheng();
}
inline const ::std::string& DanShangPinShuXing::yingwenquancheng() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
  return yingwenquancheng_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_yingwenquancheng(const ::std::string& value) {
  set_has_yingwenquancheng();
  yingwenquancheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
}
inline void DanShangPinShuXing::set_yingwenquancheng(const char* value) {
  set_has_yingwenquancheng();
  yingwenquancheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
}
inline void DanShangPinShuXing::set_yingwenquancheng(const char* value, size_t size) {
  set_has_yingwenquancheng();
  yingwenquancheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
}
inline ::std::string* DanShangPinShuXing::mutable_yingwenquancheng() {
  set_has_yingwenquancheng();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
  return yingwenquancheng_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_yingwenquancheng() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
  clear_has_yingwenquancheng();
  return yingwenquancheng_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_yingwenquancheng(::std::string* yingwenquancheng) {
  if (yingwenquancheng != NULL) {
    set_has_yingwenquancheng();
  } else {
    clear_has_yingwenquancheng();
  }
  yingwenquancheng_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yingwenquancheng);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.yingWenQuanCheng)
}

// optional int32 xiaoShuDianWeiShu = 5;
inline bool DanShangPinShuXing::has_xiaoshudianweishu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DanShangPinShuXing::set_has_xiaoshudianweishu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DanShangPinShuXing::clear_has_xiaoshudianweishu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DanShangPinShuXing::clear_xiaoshudianweishu() {
  xiaoshudianweishu_ = 0;
  clear_has_xiaoshudianweishu();
}
inline ::google::protobuf::int32 DanShangPinShuXing::xiaoshudianweishu() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.xiaoShuDianWeiShu)
  return xiaoshudianweishu_;
}
inline void DanShangPinShuXing::set_xiaoshudianweishu(::google::protobuf::int32 value) {
  set_has_xiaoshudianweishu();
  xiaoshudianweishu_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.xiaoShuDianWeiShu)
}

// optional int32 jiaoYiShiJianLeiXin = 6;
inline bool DanShangPinShuXing::has_jiaoyishijianleixin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DanShangPinShuXing::set_has_jiaoyishijianleixin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DanShangPinShuXing::clear_has_jiaoyishijianleixin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DanShangPinShuXing::clear_jiaoyishijianleixin() {
  jiaoyishijianleixin_ = 0;
  clear_has_jiaoyishijianleixin();
}
inline ::google::protobuf::int32 DanShangPinShuXing::jiaoyishijianleixin() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.jiaoYiShiJianLeiXin)
  return jiaoyishijianleixin_;
}
inline void DanShangPinShuXing::set_jiaoyishijianleixin(::google::protobuf::int32 value) {
  set_has_jiaoyishijianleixin();
  jiaoyishijianleixin_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.jiaoYiShiJianLeiXin)
}

// optional string jiaoYiBiZhong = 7;
inline bool DanShangPinShuXing::has_jiaoyibizhong() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DanShangPinShuXing::set_has_jiaoyibizhong() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DanShangPinShuXing::clear_has_jiaoyibizhong() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DanShangPinShuXing::clear_jiaoyibizhong() {
  jiaoyibizhong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jiaoyibizhong();
}
inline const ::std::string& DanShangPinShuXing::jiaoyibizhong() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
  return jiaoyibizhong_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_jiaoyibizhong(const ::std::string& value) {
  set_has_jiaoyibizhong();
  jiaoyibizhong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
}
inline void DanShangPinShuXing::set_jiaoyibizhong(const char* value) {
  set_has_jiaoyibizhong();
  jiaoyibizhong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
}
inline void DanShangPinShuXing::set_jiaoyibizhong(const char* value, size_t size) {
  set_has_jiaoyibizhong();
  jiaoyibizhong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
}
inline ::std::string* DanShangPinShuXing::mutable_jiaoyibizhong() {
  set_has_jiaoyibizhong();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
  return jiaoyibizhong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_jiaoyibizhong() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
  clear_has_jiaoyibizhong();
  return jiaoyibizhong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_jiaoyibizhong(::std::string* jiaoyibizhong) {
  if (jiaoyibizhong != NULL) {
    set_has_jiaoyibizhong();
  } else {
    clear_has_jiaoyibizhong();
  }
  jiaoyibizhong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jiaoyibizhong);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.jiaoYiBiZhong)
}

// optional string tuiShiShiJian = 8;
inline bool DanShangPinShuXing::has_tuishishijian() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DanShangPinShuXing::set_has_tuishishijian() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DanShangPinShuXing::clear_has_tuishishijian() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DanShangPinShuXing::clear_tuishishijian() {
  tuishishijian_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tuishishijian();
}
inline const ::std::string& DanShangPinShuXing::tuishishijian() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.tuiShiShiJian)
  return tuishishijian_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_tuishishijian(const ::std::string& value) {
  set_has_tuishishijian();
  tuishishijian_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.tuiShiShiJian)
}
inline void DanShangPinShuXing::set_tuishishijian(const char* value) {
  set_has_tuishishijian();
  tuishishijian_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.tuiShiShiJian)
}
inline void DanShangPinShuXing::set_tuishishijian(const char* value, size_t size) {
  set_has_tuishishijian();
  tuishishijian_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.tuiShiShiJian)
}
inline ::std::string* DanShangPinShuXing::mutable_tuishishijian() {
  set_has_tuishishijian();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.tuiShiShiJian)
  return tuishishijian_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_tuishishijian() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.tuiShiShiJian)
  clear_has_tuishishijian();
  return tuishishijian_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_tuishishijian(::std::string* tuishishijian) {
  if (tuishishijian != NULL) {
    set_has_tuishishijian();
  } else {
    clear_has_tuishishijian();
  }
  tuishishijian_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tuishishijian);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.tuiShiShiJian)
}

// optional int32 shangShiZhuangTai = 9;
inline bool DanShangPinShuXing::has_shangshizhuangtai() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DanShangPinShuXing::set_has_shangshizhuangtai() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DanShangPinShuXing::clear_has_shangshizhuangtai() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DanShangPinShuXing::clear_shangshizhuangtai() {
  shangshizhuangtai_ = 0;
  clear_has_shangshizhuangtai();
}
inline ::google::protobuf::int32 DanShangPinShuXing::shangshizhuangtai() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.shangShiZhuangTai)
  return shangshizhuangtai_;
}
inline void DanShangPinShuXing::set_shangshizhuangtai(::google::protobuf::int32 value) {
  set_has_shangshizhuangtai();
  shangshizhuangtai_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.shangShiZhuangTai)
}

// optional string zhengQuanLeiBie = 10;
inline bool DanShangPinShuXing::has_zhengquanleibie() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DanShangPinShuXing::set_has_zhengquanleibie() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DanShangPinShuXing::clear_has_zhengquanleibie() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DanShangPinShuXing::clear_zhengquanleibie() {
  zhengquanleibie_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zhengquanleibie();
}
inline const ::std::string& DanShangPinShuXing::zhengquanleibie() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
  return zhengquanleibie_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_zhengquanleibie(const ::std::string& value) {
  set_has_zhengquanleibie();
  zhengquanleibie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
}
inline void DanShangPinShuXing::set_zhengquanleibie(const char* value) {
  set_has_zhengquanleibie();
  zhengquanleibie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
}
inline void DanShangPinShuXing::set_zhengquanleibie(const char* value, size_t size) {
  set_has_zhengquanleibie();
  zhengquanleibie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
}
inline ::std::string* DanShangPinShuXing::mutable_zhengquanleibie() {
  set_has_zhengquanleibie();
  // @@protoc_insertion_point(field_mutable:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
  return zhengquanleibie_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DanShangPinShuXing::release_zhengquanleibie() {
  // @@protoc_insertion_point(field_release:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
  clear_has_zhengquanleibie();
  return zhengquanleibie_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DanShangPinShuXing::set_allocated_zhengquanleibie(::std::string* zhengquanleibie) {
  if (zhengquanleibie != NULL) {
    set_has_zhengquanleibie();
  } else {
    clear_has_zhengquanleibie();
  }
  zhengquanleibie_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zhengquanleibie);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DanShangPinShuXing.zhengQuanLeiBie)
}

// optional int32 tingPai = 11;
inline bool DanShangPinShuXing::has_tingpai() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DanShangPinShuXing::set_has_tingpai() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DanShangPinShuXing::clear_has_tingpai() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DanShangPinShuXing::clear_tingpai() {
  tingpai_ = 0;
  clear_has_tingpai();
}
inline ::google::protobuf::int32 DanShangPinShuXing::tingpai() const {
  // @@protoc_insertion_point(field_get:dzhyun.DanShangPinShuXing.tingPai)
  return tingpai_;
}
inline void DanShangPinShuXing::set_tingpai(::google::protobuf::int32 value) {
  set_has_tingpai();
  tingpai_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DanShangPinShuXing.tingPai)
}

// -------------------------------------------------------------------

// MarketTradeDate

// required string Market = 1;
inline bool MarketTradeDate::has_market() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketTradeDate::set_has_market() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketTradeDate::clear_has_market() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketTradeDate::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market();
}
inline const ::std::string& MarketTradeDate::market() const {
  // @@protoc_insertion_point(field_get:dzhyun.MarketTradeDate.Market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketTradeDate::set_market(const ::std::string& value) {
  set_has_market();
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.MarketTradeDate.Market)
}
inline void MarketTradeDate::set_market(const char* value) {
  set_has_market();
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.MarketTradeDate.Market)
}
inline void MarketTradeDate::set_market(const char* value, size_t size) {
  set_has_market();
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.MarketTradeDate.Market)
}
inline ::std::string* MarketTradeDate::mutable_market() {
  set_has_market();
  // @@protoc_insertion_point(field_mutable:dzhyun.MarketTradeDate.Market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketTradeDate::release_market() {
  // @@protoc_insertion_point(field_release:dzhyun.MarketTradeDate.Market)
  clear_has_market();
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketTradeDate::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    set_has_market();
  } else {
    clear_has_market();
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.MarketTradeDate.Market)
}

// repeated string TradeDate = 2;
inline int MarketTradeDate::tradedate_size() const {
  return tradedate_.size();
}
inline void MarketTradeDate::clear_tradedate() {
  tradedate_.Clear();
}
inline const ::std::string& MarketTradeDate::tradedate(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.MarketTradeDate.TradeDate)
  return tradedate_.Get(index);
}
inline ::std::string* MarketTradeDate::mutable_tradedate(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.MarketTradeDate.TradeDate)
  return tradedate_.Mutable(index);
}
inline void MarketTradeDate::set_tradedate(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dzhyun.MarketTradeDate.TradeDate)
  tradedate_.Mutable(index)->assign(value);
}
inline void MarketTradeDate::set_tradedate(int index, const char* value) {
  tradedate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dzhyun.MarketTradeDate.TradeDate)
}
inline void MarketTradeDate::set_tradedate(int index, const char* value, size_t size) {
  tradedate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dzhyun.MarketTradeDate.TradeDate)
}
inline ::std::string* MarketTradeDate::add_tradedate() {
  // @@protoc_insertion_point(field_add_mutable:dzhyun.MarketTradeDate.TradeDate)
  return tradedate_.Add();
}
inline void MarketTradeDate::add_tradedate(const ::std::string& value) {
  tradedate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dzhyun.MarketTradeDate.TradeDate)
}
inline void MarketTradeDate::add_tradedate(const char* value) {
  tradedate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dzhyun.MarketTradeDate.TradeDate)
}
inline void MarketTradeDate::add_tradedate(const char* value, size_t size) {
  tradedate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dzhyun.MarketTradeDate.TradeDate)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarketTradeDate::tradedate() const {
  // @@protoc_insertion_point(field_list:dzhyun.MarketTradeDate.TradeDate)
  return tradedate_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MarketTradeDate::mutable_tradedate() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.MarketTradeDate.TradeDate)
  return &tradedate_;
}

// -------------------------------------------------------------------

// FutureInfo

// required string Obj = 1;
inline bool FutureInfo::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureInfo::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureInfo::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureInfo::clear_obj() {
  obj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj();
}
inline const ::std::string& FutureInfo::obj() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.Obj)
  return obj_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_obj(const ::std::string& value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.Obj)
}
inline void FutureInfo::set_obj(const char* value) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.FutureInfo.Obj)
}
inline void FutureInfo::set_obj(const char* value, size_t size) {
  set_has_obj();
  obj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.FutureInfo.Obj)
}
inline ::std::string* FutureInfo::mutable_obj() {
  set_has_obj();
  // @@protoc_insertion_point(field_mutable:dzhyun.FutureInfo.Obj)
  return obj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_obj() {
  // @@protoc_insertion_point(field_release:dzhyun.FutureInfo.Obj)
  clear_has_obj();
  return obj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_obj(::std::string* obj) {
  if (obj != NULL) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  obj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.FutureInfo.Obj)
}

// optional string Name = 2;
inline bool FutureInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FutureInfo::name() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.Name)
}
inline void FutureInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.FutureInfo.Name)
}
inline void FutureInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.FutureInfo.Name)
}
inline ::std::string* FutureInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dzhyun.FutureInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_name() {
  // @@protoc_insertion_point(field_release:dzhyun.FutureInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.FutureInfo.Name)
}

// optional string BeginDate = 3;
inline bool FutureInfo::has_begindate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureInfo::set_has_begindate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureInfo::clear_has_begindate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureInfo::clear_begindate() {
  begindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begindate();
}
inline const ::std::string& FutureInfo::begindate() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.BeginDate)
  return begindate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_begindate(const ::std::string& value) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.BeginDate)
}
inline void FutureInfo::set_begindate(const char* value) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.FutureInfo.BeginDate)
}
inline void FutureInfo::set_begindate(const char* value, size_t size) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.FutureInfo.BeginDate)
}
inline ::std::string* FutureInfo::mutable_begindate() {
  set_has_begindate();
  // @@protoc_insertion_point(field_mutable:dzhyun.FutureInfo.BeginDate)
  return begindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_begindate() {
  // @@protoc_insertion_point(field_release:dzhyun.FutureInfo.BeginDate)
  clear_has_begindate();
  return begindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_begindate(::std::string* begindate) {
  if (begindate != NULL) {
    set_has_begindate();
  } else {
    clear_has_begindate();
  }
  begindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begindate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.FutureInfo.BeginDate)
}

// optional string EndDate = 4;
inline bool FutureInfo::has_enddate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureInfo::set_has_enddate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureInfo::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureInfo::clear_enddate() {
  enddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enddate();
}
inline const ::std::string& FutureInfo::enddate() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.EndDate)
  return enddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_enddate(const ::std::string& value) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.EndDate)
}
inline void FutureInfo::set_enddate(const char* value) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.FutureInfo.EndDate)
}
inline void FutureInfo::set_enddate(const char* value, size_t size) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.FutureInfo.EndDate)
}
inline ::std::string* FutureInfo::mutable_enddate() {
  set_has_enddate();
  // @@protoc_insertion_point(field_mutable:dzhyun.FutureInfo.EndDate)
  return enddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_enddate() {
  // @@protoc_insertion_point(field_release:dzhyun.FutureInfo.EndDate)
  clear_has_enddate();
  return enddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_enddate(::std::string* enddate) {
  if (enddate != NULL) {
    set_has_enddate();
  } else {
    clear_has_enddate();
  }
  enddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.FutureInfo.EndDate)
}

// optional string DeliveryDay = 5;
inline bool FutureInfo::has_deliveryday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureInfo::set_has_deliveryday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureInfo::clear_has_deliveryday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureInfo::clear_deliveryday() {
  deliveryday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deliveryday();
}
inline const ::std::string& FutureInfo::deliveryday() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.DeliveryDay)
  return deliveryday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_deliveryday(const ::std::string& value) {
  set_has_deliveryday();
  deliveryday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.DeliveryDay)
}
inline void FutureInfo::set_deliveryday(const char* value) {
  set_has_deliveryday();
  deliveryday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.FutureInfo.DeliveryDay)
}
inline void FutureInfo::set_deliveryday(const char* value, size_t size) {
  set_has_deliveryday();
  deliveryday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.FutureInfo.DeliveryDay)
}
inline ::std::string* FutureInfo::mutable_deliveryday() {
  set_has_deliveryday();
  // @@protoc_insertion_point(field_mutable:dzhyun.FutureInfo.DeliveryDay)
  return deliveryday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_deliveryday() {
  // @@protoc_insertion_point(field_release:dzhyun.FutureInfo.DeliveryDay)
  clear_has_deliveryday();
  return deliveryday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_deliveryday(::std::string* deliveryday) {
  if (deliveryday != NULL) {
    set_has_deliveryday();
  } else {
    clear_has_deliveryday();
  }
  deliveryday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deliveryday);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.FutureInfo.DeliveryDay)
}

// optional double TradeUnit = 6;
inline bool FutureInfo::has_tradeunit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureInfo::set_has_tradeunit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureInfo::clear_has_tradeunit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureInfo::clear_tradeunit() {
  tradeunit_ = 0;
  clear_has_tradeunit();
}
inline double FutureInfo::tradeunit() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.TradeUnit)
  return tradeunit_;
}
inline void FutureInfo::set_tradeunit(double value) {
  set_has_tradeunit();
  tradeunit_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.TradeUnit)
}

// optional double MarginRate = 7;
inline bool FutureInfo::has_marginrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureInfo::set_has_marginrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureInfo::clear_has_marginrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureInfo::clear_marginrate() {
  marginrate_ = 0;
  clear_has_marginrate();
}
inline double FutureInfo::marginrate() const {
  // @@protoc_insertion_point(field_get:dzhyun.FutureInfo.MarginRate)
  return marginrate_;
}
inline void FutureInfo::set_marginrate(double value) {
  set_has_marginrate();
  marginrate_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.FutureInfo.MarginRate)
}

// -------------------------------------------------------------------

// NewStockInfo

// required string StockCode = 1;
inline bool NewStockInfo::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewStockInfo::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewStockInfo::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewStockInfo::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& NewStockInfo::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.StockCode)
}
inline void NewStockInfo::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.StockCode)
}
inline void NewStockInfo::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.StockCode)
}
inline ::std::string* NewStockInfo::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.StockCode)
}

// optional string StockName = 2;
inline bool NewStockInfo::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewStockInfo::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewStockInfo::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewStockInfo::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& NewStockInfo::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.StockName)
}
inline void NewStockInfo::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.StockName)
}
inline void NewStockInfo::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.StockName)
}
inline ::std::string* NewStockInfo::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.StockName)
}

// optional string StockSummary = 3;
inline bool NewStockInfo::has_stocksummary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewStockInfo::set_has_stocksummary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewStockInfo::clear_has_stocksummary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewStockInfo::clear_stocksummary() {
  stocksummary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stocksummary();
}
inline const ::std::string& NewStockInfo::stocksummary() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.StockSummary)
  return stocksummary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_stocksummary(const ::std::string& value) {
  set_has_stocksummary();
  stocksummary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.StockSummary)
}
inline void NewStockInfo::set_stocksummary(const char* value) {
  set_has_stocksummary();
  stocksummary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.StockSummary)
}
inline void NewStockInfo::set_stocksummary(const char* value, size_t size) {
  set_has_stocksummary();
  stocksummary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.StockSummary)
}
inline ::std::string* NewStockInfo::mutable_stocksummary() {
  set_has_stocksummary();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.StockSummary)
  return stocksummary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_stocksummary() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.StockSummary)
  clear_has_stocksummary();
  return stocksummary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_stocksummary(::std::string* stocksummary) {
  if (stocksummary != NULL) {
    set_has_stocksummary();
  } else {
    clear_has_stocksummary();
  }
  stocksummary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stocksummary);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.StockSummary)
}

// optional string BuyCode = 4;
inline bool NewStockInfo::has_buycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewStockInfo::set_has_buycode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewStockInfo::clear_has_buycode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewStockInfo::clear_buycode() {
  buycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buycode();
}
inline const ::std::string& NewStockInfo::buycode() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.BuyCode)
  return buycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_buycode(const ::std::string& value) {
  set_has_buycode();
  buycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.BuyCode)
}
inline void NewStockInfo::set_buycode(const char* value) {
  set_has_buycode();
  buycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.BuyCode)
}
inline void NewStockInfo::set_buycode(const char* value, size_t size) {
  set_has_buycode();
  buycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.BuyCode)
}
inline ::std::string* NewStockInfo::mutable_buycode() {
  set_has_buycode();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.BuyCode)
  return buycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_buycode() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.BuyCode)
  clear_has_buycode();
  return buycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_buycode(::std::string* buycode) {
  if (buycode != NULL) {
    set_has_buycode();
  } else {
    clear_has_buycode();
  }
  buycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buycode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.BuyCode)
}

// optional string IssueTotal = 5;
inline bool NewStockInfo::has_issuetotal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewStockInfo::set_has_issuetotal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewStockInfo::clear_has_issuetotal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewStockInfo::clear_issuetotal() {
  issuetotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuetotal();
}
inline const ::std::string& NewStockInfo::issuetotal() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.IssueTotal)
  return issuetotal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_issuetotal(const ::std::string& value) {
  set_has_issuetotal();
  issuetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.IssueTotal)
}
inline void NewStockInfo::set_issuetotal(const char* value) {
  set_has_issuetotal();
  issuetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.IssueTotal)
}
inline void NewStockInfo::set_issuetotal(const char* value, size_t size) {
  set_has_issuetotal();
  issuetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.IssueTotal)
}
inline ::std::string* NewStockInfo::mutable_issuetotal() {
  set_has_issuetotal();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.IssueTotal)
  return issuetotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_issuetotal() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.IssueTotal)
  clear_has_issuetotal();
  return issuetotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_issuetotal(::std::string* issuetotal) {
  if (issuetotal != NULL) {
    set_has_issuetotal();
  } else {
    clear_has_issuetotal();
  }
  issuetotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuetotal);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.IssueTotal)
}

// optional string OnlineTotal = 6;
inline bool NewStockInfo::has_onlinetotal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewStockInfo::set_has_onlinetotal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewStockInfo::clear_has_onlinetotal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewStockInfo::clear_onlinetotal() {
  onlinetotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_onlinetotal();
}
inline const ::std::string& NewStockInfo::onlinetotal() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.OnlineTotal)
  return onlinetotal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_onlinetotal(const ::std::string& value) {
  set_has_onlinetotal();
  onlinetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.OnlineTotal)
}
inline void NewStockInfo::set_onlinetotal(const char* value) {
  set_has_onlinetotal();
  onlinetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.OnlineTotal)
}
inline void NewStockInfo::set_onlinetotal(const char* value, size_t size) {
  set_has_onlinetotal();
  onlinetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.OnlineTotal)
}
inline ::std::string* NewStockInfo::mutable_onlinetotal() {
  set_has_onlinetotal();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.OnlineTotal)
  return onlinetotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_onlinetotal() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.OnlineTotal)
  clear_has_onlinetotal();
  return onlinetotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_onlinetotal(::std::string* onlinetotal) {
  if (onlinetotal != NULL) {
    set_has_onlinetotal();
  } else {
    clear_has_onlinetotal();
  }
  onlinetotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onlinetotal);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.OnlineTotal)
}

// optional string BuyLimit = 7;
inline bool NewStockInfo::has_buylimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewStockInfo::set_has_buylimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewStockInfo::clear_has_buylimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewStockInfo::clear_buylimit() {
  buylimit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buylimit();
}
inline const ::std::string& NewStockInfo::buylimit() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.BuyLimit)
  return buylimit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_buylimit(const ::std::string& value) {
  set_has_buylimit();
  buylimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.BuyLimit)
}
inline void NewStockInfo::set_buylimit(const char* value) {
  set_has_buylimit();
  buylimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.BuyLimit)
}
inline void NewStockInfo::set_buylimit(const char* value, size_t size) {
  set_has_buylimit();
  buylimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.BuyLimit)
}
inline ::std::string* NewStockInfo::mutable_buylimit() {
  set_has_buylimit();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.BuyLimit)
  return buylimit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_buylimit() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.BuyLimit)
  clear_has_buylimit();
  return buylimit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_buylimit(::std::string* buylimit) {
  if (buylimit != NULL) {
    set_has_buylimit();
  } else {
    clear_has_buylimit();
  }
  buylimit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buylimit);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.BuyLimit)
}

// optional string IssuePrice = 8;
inline bool NewStockInfo::has_issueprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewStockInfo::set_has_issueprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewStockInfo::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewStockInfo::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
inline const ::std::string& NewStockInfo::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.IssuePrice)
}
inline void NewStockInfo::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.IssuePrice)
}
inline void NewStockInfo::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.IssuePrice)
}
inline ::std::string* NewStockInfo::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.IssuePrice)
}

// optional string FirstClose = 9;
inline bool NewStockInfo::has_firstclose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NewStockInfo::set_has_firstclose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NewStockInfo::clear_has_firstclose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NewStockInfo::clear_firstclose() {
  firstclose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstclose();
}
inline const ::std::string& NewStockInfo::firstclose() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.FirstClose)
  return firstclose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_firstclose(const ::std::string& value) {
  set_has_firstclose();
  firstclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.FirstClose)
}
inline void NewStockInfo::set_firstclose(const char* value) {
  set_has_firstclose();
  firstclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.FirstClose)
}
inline void NewStockInfo::set_firstclose(const char* value, size_t size) {
  set_has_firstclose();
  firstclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.FirstClose)
}
inline ::std::string* NewStockInfo::mutable_firstclose() {
  set_has_firstclose();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.FirstClose)
  return firstclose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_firstclose() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.FirstClose)
  clear_has_firstclose();
  return firstclose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_firstclose(::std::string* firstclose) {
  if (firstclose != NULL) {
    set_has_firstclose();
  } else {
    clear_has_firstclose();
  }
  firstclose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstclose);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.FirstClose)
}

// optional string BuyDate = 10;
inline bool NewStockInfo::has_buydate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NewStockInfo::set_has_buydate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NewStockInfo::clear_has_buydate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NewStockInfo::clear_buydate() {
  buydate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buydate();
}
inline const ::std::string& NewStockInfo::buydate() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.BuyDate)
  return buydate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_buydate(const ::std::string& value) {
  set_has_buydate();
  buydate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.BuyDate)
}
inline void NewStockInfo::set_buydate(const char* value) {
  set_has_buydate();
  buydate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.BuyDate)
}
inline void NewStockInfo::set_buydate(const char* value, size_t size) {
  set_has_buydate();
  buydate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.BuyDate)
}
inline ::std::string* NewStockInfo::mutable_buydate() {
  set_has_buydate();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.BuyDate)
  return buydate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_buydate() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.BuyDate)
  clear_has_buydate();
  return buydate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_buydate(::std::string* buydate) {
  if (buydate != NULL) {
    set_has_buydate();
  } else {
    clear_has_buydate();
  }
  buydate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buydate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.BuyDate)
}

// optional string PubDate = 11;
inline bool NewStockInfo::has_pubdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NewStockInfo::set_has_pubdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NewStockInfo::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NewStockInfo::clear_pubdate() {
  pubdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubdate();
}
inline const ::std::string& NewStockInfo::pubdate() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.PubDate)
  return pubdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_pubdate(const ::std::string& value) {
  set_has_pubdate();
  pubdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.PubDate)
}
inline void NewStockInfo::set_pubdate(const char* value) {
  set_has_pubdate();
  pubdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.PubDate)
}
inline void NewStockInfo::set_pubdate(const char* value, size_t size) {
  set_has_pubdate();
  pubdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.PubDate)
}
inline ::std::string* NewStockInfo::mutable_pubdate() {
  set_has_pubdate();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.PubDate)
  return pubdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_pubdate() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.PubDate)
  clear_has_pubdate();
  return pubdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_pubdate(::std::string* pubdate) {
  if (pubdate != NULL) {
    set_has_pubdate();
  } else {
    clear_has_pubdate();
  }
  pubdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubdate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.PubDate)
}

// optional string PayDate = 12;
inline bool NewStockInfo::has_paydate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NewStockInfo::set_has_paydate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NewStockInfo::clear_has_paydate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NewStockInfo::clear_paydate() {
  paydate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paydate();
}
inline const ::std::string& NewStockInfo::paydate() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.PayDate)
  return paydate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_paydate(const ::std::string& value) {
  set_has_paydate();
  paydate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.PayDate)
}
inline void NewStockInfo::set_paydate(const char* value) {
  set_has_paydate();
  paydate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.PayDate)
}
inline void NewStockInfo::set_paydate(const char* value, size_t size) {
  set_has_paydate();
  paydate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.PayDate)
}
inline ::std::string* NewStockInfo::mutable_paydate() {
  set_has_paydate();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.PayDate)
  return paydate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_paydate() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.PayDate)
  clear_has_paydate();
  return paydate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_paydate(::std::string* paydate) {
  if (paydate != NULL) {
    set_has_paydate();
  } else {
    clear_has_paydate();
  }
  paydate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paydate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.PayDate)
}

// optional string TradeDate = 13;
inline bool NewStockInfo::has_tradedate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NewStockInfo::set_has_tradedate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NewStockInfo::clear_has_tradedate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NewStockInfo::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradedate();
}
inline const ::std::string& NewStockInfo::tradedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.TradeDate)
  return tradedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_tradedate(const ::std::string& value) {
  set_has_tradedate();
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.TradeDate)
}
inline void NewStockInfo::set_tradedate(const char* value) {
  set_has_tradedate();
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.TradeDate)
}
inline void NewStockInfo::set_tradedate(const char* value, size_t size) {
  set_has_tradedate();
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.TradeDate)
}
inline ::std::string* NewStockInfo::mutable_tradedate() {
  set_has_tradedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.TradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_tradedate() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.TradeDate)
  clear_has_tradedate();
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    set_has_tradedate();
  } else {
    clear_has_tradedate();
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.TradeDate)
}

// optional string IssuePE = 14;
inline bool NewStockInfo::has_issuepe() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NewStockInfo::set_has_issuepe() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NewStockInfo::clear_has_issuepe() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NewStockInfo::clear_issuepe() {
  issuepe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuepe();
}
inline const ::std::string& NewStockInfo::issuepe() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.IssuePE)
  return issuepe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_issuepe(const ::std::string& value) {
  set_has_issuepe();
  issuepe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.IssuePE)
}
inline void NewStockInfo::set_issuepe(const char* value) {
  set_has_issuepe();
  issuepe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.IssuePE)
}
inline void NewStockInfo::set_issuepe(const char* value, size_t size) {
  set_has_issuepe();
  issuepe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.IssuePE)
}
inline ::std::string* NewStockInfo::mutable_issuepe() {
  set_has_issuepe();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.IssuePE)
  return issuepe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_issuepe() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.IssuePE)
  clear_has_issuepe();
  return issuepe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_issuepe(::std::string* issuepe) {
  if (issuepe != NULL) {
    set_has_issuepe();
  } else {
    clear_has_issuepe();
  }
  issuepe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuepe);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.IssuePE)
}

// optional string IndustryPE = 15;
inline bool NewStockInfo::has_industrype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NewStockInfo::set_has_industrype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NewStockInfo::clear_has_industrype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NewStockInfo::clear_industrype() {
  industrype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_industrype();
}
inline const ::std::string& NewStockInfo::industrype() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.IndustryPE)
  return industrype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_industrype(const ::std::string& value) {
  set_has_industrype();
  industrype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.IndustryPE)
}
inline void NewStockInfo::set_industrype(const char* value) {
  set_has_industrype();
  industrype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.IndustryPE)
}
inline void NewStockInfo::set_industrype(const char* value, size_t size) {
  set_has_industrype();
  industrype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.IndustryPE)
}
inline ::std::string* NewStockInfo::mutable_industrype() {
  set_has_industrype();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.IndustryPE)
  return industrype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_industrype() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.IndustryPE)
  clear_has_industrype();
  return industrype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_industrype(::std::string* industrype) {
  if (industrype != NULL) {
    set_has_industrype();
  } else {
    clear_has_industrype();
  }
  industrype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industrype);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.IndustryPE)
}

// optional string SuccessRate = 16;
inline bool NewStockInfo::has_successrate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NewStockInfo::set_has_successrate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NewStockInfo::clear_has_successrate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NewStockInfo::clear_successrate() {
  successrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_successrate();
}
inline const ::std::string& NewStockInfo::successrate() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.SuccessRate)
  return successrate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_successrate(const ::std::string& value) {
  set_has_successrate();
  successrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.SuccessRate)
}
inline void NewStockInfo::set_successrate(const char* value) {
  set_has_successrate();
  successrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.SuccessRate)
}
inline void NewStockInfo::set_successrate(const char* value, size_t size) {
  set_has_successrate();
  successrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.SuccessRate)
}
inline ::std::string* NewStockInfo::mutable_successrate() {
  set_has_successrate();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.SuccessRate)
  return successrate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_successrate() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.SuccessRate)
  clear_has_successrate();
  return successrate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_successrate(::std::string* successrate) {
  if (successrate != NULL) {
    set_has_successrate();
  } else {
    clear_has_successrate();
  }
  successrate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), successrate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.SuccessRate)
}

// optional string OfferTotal = 17;
inline bool NewStockInfo::has_offertotal() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NewStockInfo::set_has_offertotal() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NewStockInfo::clear_has_offertotal() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NewStockInfo::clear_offertotal() {
  offertotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_offertotal();
}
inline const ::std::string& NewStockInfo::offertotal() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.OfferTotal)
  return offertotal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_offertotal(const ::std::string& value) {
  set_has_offertotal();
  offertotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.OfferTotal)
}
inline void NewStockInfo::set_offertotal(const char* value) {
  set_has_offertotal();
  offertotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.OfferTotal)
}
inline void NewStockInfo::set_offertotal(const char* value, size_t size) {
  set_has_offertotal();
  offertotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.OfferTotal)
}
inline ::std::string* NewStockInfo::mutable_offertotal() {
  set_has_offertotal();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.OfferTotal)
  return offertotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_offertotal() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.OfferTotal)
  clear_has_offertotal();
  return offertotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_offertotal(::std::string* offertotal) {
  if (offertotal != NULL) {
    set_has_offertotal();
  } else {
    clear_has_offertotal();
  }
  offertotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offertotal);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.OfferTotal)
}

// optional string OfferTimes = 18;
inline bool NewStockInfo::has_offertimes() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NewStockInfo::set_has_offertimes() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NewStockInfo::clear_has_offertimes() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NewStockInfo::clear_offertimes() {
  offertimes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_offertimes();
}
inline const ::std::string& NewStockInfo::offertimes() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.OfferTimes)
  return offertimes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_offertimes(const ::std::string& value) {
  set_has_offertimes();
  offertimes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.OfferTimes)
}
inline void NewStockInfo::set_offertimes(const char* value) {
  set_has_offertimes();
  offertimes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.OfferTimes)
}
inline void NewStockInfo::set_offertimes(const char* value, size_t size) {
  set_has_offertimes();
  offertimes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.OfferTimes)
}
inline ::std::string* NewStockInfo::mutable_offertimes() {
  set_has_offertimes();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.OfferTimes)
  return offertimes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_offertimes() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.OfferTimes)
  clear_has_offertimes();
  return offertimes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_offertimes(::std::string* offertimes) {
  if (offertimes != NULL) {
    set_has_offertimes();
  } else {
    clear_has_offertimes();
  }
  offertimes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offertimes);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.OfferTimes)
}

// optional string SeriesNum = 19;
inline bool NewStockInfo::has_seriesnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NewStockInfo::set_has_seriesnum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NewStockInfo::clear_has_seriesnum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NewStockInfo::clear_seriesnum() {
  seriesnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seriesnum();
}
inline const ::std::string& NewStockInfo::seriesnum() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.SeriesNum)
  return seriesnum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_seriesnum(const ::std::string& value) {
  set_has_seriesnum();
  seriesnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.SeriesNum)
}
inline void NewStockInfo::set_seriesnum(const char* value) {
  set_has_seriesnum();
  seriesnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.SeriesNum)
}
inline void NewStockInfo::set_seriesnum(const char* value, size_t size) {
  set_has_seriesnum();
  seriesnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.SeriesNum)
}
inline ::std::string* NewStockInfo::mutable_seriesnum() {
  set_has_seriesnum();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.SeriesNum)
  return seriesnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_seriesnum() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.SeriesNum)
  clear_has_seriesnum();
  return seriesnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_seriesnum(::std::string* seriesnum) {
  if (seriesnum != NULL) {
    set_has_seriesnum();
  } else {
    clear_has_seriesnum();
  }
  seriesnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seriesnum);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.SeriesNum)
}

// optional string IncreaseTotal = 20;
inline bool NewStockInfo::has_increasetotal() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NewStockInfo::set_has_increasetotal() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NewStockInfo::clear_has_increasetotal() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NewStockInfo::clear_increasetotal() {
  increasetotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_increasetotal();
}
inline const ::std::string& NewStockInfo::increasetotal() const {
  // @@protoc_insertion_point(field_get:dzhyun.NewStockInfo.IncreaseTotal)
  return increasetotal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_increasetotal(const ::std::string& value) {
  set_has_increasetotal();
  increasetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.NewStockInfo.IncreaseTotal)
}
inline void NewStockInfo::set_increasetotal(const char* value) {
  set_has_increasetotal();
  increasetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.NewStockInfo.IncreaseTotal)
}
inline void NewStockInfo::set_increasetotal(const char* value, size_t size) {
  set_has_increasetotal();
  increasetotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.NewStockInfo.IncreaseTotal)
}
inline ::std::string* NewStockInfo::mutable_increasetotal() {
  set_has_increasetotal();
  // @@protoc_insertion_point(field_mutable:dzhyun.NewStockInfo.IncreaseTotal)
  return increasetotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewStockInfo::release_increasetotal() {
  // @@protoc_insertion_point(field_release:dzhyun.NewStockInfo.IncreaseTotal)
  clear_has_increasetotal();
  return increasetotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewStockInfo::set_allocated_increasetotal(::std::string* increasetotal) {
  if (increasetotal != NULL) {
    set_has_increasetotal();
  } else {
    clear_has_increasetotal();
  }
  increasetotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), increasetotal);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.NewStockInfo.IncreaseTotal)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CldDanShangPinShuXing_2eproto__INCLUDED
