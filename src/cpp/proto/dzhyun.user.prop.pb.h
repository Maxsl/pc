// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzhyun.user.prop.proto

#ifndef PROTOBUF_dzhyun_2euser_2eprop_2eproto__INCLUDED
#define PROTOBUF_dzhyun_2euser_2eprop_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dzhyun_2euser_2eprop_2eproto();
void protobuf_AssignDesc_dzhyun_2euser_2eprop_2eproto();
void protobuf_ShutdownFile_dzhyun_2euser_2eprop_2eproto();

class UserProp;
class UserPropsMessage;

// ===================================================================

class UserProp : public ::google::protobuf::Message {
 public:
  UserProp();
  virtual ~UserProp();

  UserProp(const UserProp& from);

  inline UserProp& operator=(const UserProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserProp& default_instance();

  void Swap(UserProp* other);

  // implements Message ----------------------------------------------

  inline UserProp* New() const { return New(NULL); }

  UserProp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserProp& from);
  void MergeFrom(const UserProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserProp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string Lable = 2;
  bool has_lable() const;
  void clear_lable();
  static const int kLableFieldNumber = 2;
  const ::std::string& lable() const;
  void set_lable(const ::std::string& value);
  void set_lable(const char* value);
  void set_lable(const char* value, size_t size);
  ::std::string* mutable_lable();
  ::std::string* release_lable();
  void set_allocated_lable(::std::string* lable);

  // required string Value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:dzhyun.UserProp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lable();
  inline void clear_has_lable();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr lable_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_dzhyun_2euser_2eprop_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2euser_2eprop_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2euser_2eprop_2eproto();

  void InitAsDefaultInstance();
  static UserProp* default_instance_;
};
// -------------------------------------------------------------------

class UserPropsMessage : public ::google::protobuf::Message {
 public:
  UserPropsMessage();
  virtual ~UserPropsMessage();

  UserPropsMessage(const UserPropsMessage& from);

  inline UserPropsMessage& operator=(const UserPropsMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPropsMessage& default_instance();

  void Swap(UserPropsMessage* other);

  // implements Message ----------------------------------------------

  inline UserPropsMessage* New() const { return New(NULL); }

  UserPropsMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPropsMessage& from);
  void MergeFrom(const UserPropsMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserPropsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .dzhyun.UserProp Lables = 2;
  int lables_size() const;
  void clear_lables();
  static const int kLablesFieldNumber = 2;
  const ::dzhyun::UserProp& lables(int index) const;
  ::dzhyun::UserProp* mutable_lables(int index);
  ::dzhyun::UserProp* add_lables();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::UserProp >*
      mutable_lables();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::UserProp >&
      lables() const;

  // @@protoc_insertion_point(class_scope:dzhyun.UserPropsMessage)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::UserProp > lables_;
  friend void  protobuf_AddDesc_dzhyun_2euser_2eprop_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2euser_2eprop_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2euser_2eprop_2eproto();

  void InitAsDefaultInstance();
  static UserPropsMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserProp

// required string Id = 1;
inline bool UserProp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserProp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserProp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserProp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& UserProp::id() const {
  // @@protoc_insertion_point(field_get:dzhyun.UserProp.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserProp::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.UserProp.Id)
}
inline void UserProp::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.UserProp.Id)
}
inline void UserProp::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.UserProp.Id)
}
inline ::std::string* UserProp::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:dzhyun.UserProp.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserProp::release_id() {
  // @@protoc_insertion_point(field_release:dzhyun.UserProp.Id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserProp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.UserProp.Id)
}

// required string Lable = 2;
inline bool UserProp::has_lable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserProp::set_has_lable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserProp::clear_has_lable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserProp::clear_lable() {
  lable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lable();
}
inline const ::std::string& UserProp::lable() const {
  // @@protoc_insertion_point(field_get:dzhyun.UserProp.Lable)
  return lable_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserProp::set_lable(const ::std::string& value) {
  set_has_lable();
  lable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.UserProp.Lable)
}
inline void UserProp::set_lable(const char* value) {
  set_has_lable();
  lable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.UserProp.Lable)
}
inline void UserProp::set_lable(const char* value, size_t size) {
  set_has_lable();
  lable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.UserProp.Lable)
}
inline ::std::string* UserProp::mutable_lable() {
  set_has_lable();
  // @@protoc_insertion_point(field_mutable:dzhyun.UserProp.Lable)
  return lable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserProp::release_lable() {
  // @@protoc_insertion_point(field_release:dzhyun.UserProp.Lable)
  clear_has_lable();
  return lable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserProp::set_allocated_lable(::std::string* lable) {
  if (lable != NULL) {
    set_has_lable();
  } else {
    clear_has_lable();
  }
  lable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lable);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.UserProp.Lable)
}

// required string Value = 3;
inline bool UserProp::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserProp::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserProp::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserProp::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& UserProp::value() const {
  // @@protoc_insertion_point(field_get:dzhyun.UserProp.Value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserProp::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.UserProp.Value)
}
inline void UserProp::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.UserProp.Value)
}
inline void UserProp::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.UserProp.Value)
}
inline ::std::string* UserProp::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:dzhyun.UserProp.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserProp::release_value() {
  // @@protoc_insertion_point(field_release:dzhyun.UserProp.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserProp::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.UserProp.Value)
}

// -------------------------------------------------------------------

// UserPropsMessage

// required string Name = 1;
inline bool UserPropsMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPropsMessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPropsMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPropsMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UserPropsMessage::name() const {
  // @@protoc_insertion_point(field_get:dzhyun.UserPropsMessage.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPropsMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.UserPropsMessage.Name)
}
inline void UserPropsMessage::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.UserPropsMessage.Name)
}
inline void UserPropsMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.UserPropsMessage.Name)
}
inline ::std::string* UserPropsMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dzhyun.UserPropsMessage.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserPropsMessage::release_name() {
  // @@protoc_insertion_point(field_release:dzhyun.UserPropsMessage.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPropsMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.UserPropsMessage.Name)
}

// repeated .dzhyun.UserProp Lables = 2;
inline int UserPropsMessage::lables_size() const {
  return lables_.size();
}
inline void UserPropsMessage::clear_lables() {
  lables_.Clear();
}
inline const ::dzhyun::UserProp& UserPropsMessage::lables(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.UserPropsMessage.Lables)
  return lables_.Get(index);
}
inline ::dzhyun::UserProp* UserPropsMessage::mutable_lables(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.UserPropsMessage.Lables)
  return lables_.Mutable(index);
}
inline ::dzhyun::UserProp* UserPropsMessage::add_lables() {
  // @@protoc_insertion_point(field_add:dzhyun.UserPropsMessage.Lables)
  return lables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::UserProp >*
UserPropsMessage::mutable_lables() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.UserPropsMessage.Lables)
  return &lables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::UserProp >&
UserPropsMessage::lables() const {
  // @@protoc_insertion_point(field_list:dzhyun.UserPropsMessage.Lables)
  return lables_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dzhyun_2euser_2eprop_2eproto__INCLUDED
