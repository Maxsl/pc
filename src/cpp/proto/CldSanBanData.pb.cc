// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CldSanBanData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CldSanBanData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

namespace {

const ::google::protobuf::Descriptor* OverallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OverallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayListStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayListStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayListStocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayListStocks_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayBrokerStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayBrokerStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayBrokerStocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayBrokerStocks_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayConvertStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayConvertStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayConvertStocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayConvertStocks_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayIssueStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayIssueStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayIssueStocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayIssueStocks_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerDetaileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerDetaileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockBrokerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockBrokerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IssueDetaileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IssueDetaileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IssueStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IssueStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* IssueStatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IssueStatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickReportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickReportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinanceQuickReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinanceQuickReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CldSanBanData_2eproto() {
  protobuf_AddDesc_CldSanBanData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CldSanBanData.proto");
  GOOGLE_CHECK(file != NULL);
  OverallInfo_descriptor_ = file->message_type(0);
  static const int OverallInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, totalstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, agreementstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, brokerstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, waitstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, applystocknum_),
  };
  OverallInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OverallInfo_descriptor_,
      OverallInfo::default_instance_,
      OverallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(OverallInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverallInfo, _internal_metadata_),
      -1);
  TodayListStock_descriptor_ = file->message_type(1);
  static const int TodayListStock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStock, mainbroker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStock, industry_),
  };
  TodayListStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayListStock_descriptor_,
      TodayListStock::default_instance_,
      TodayListStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStock, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayListStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStock, _internal_metadata_),
      -1);
  TodayListStocks_descriptor_ = file->message_type(2);
  static const int TodayListStocks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStocks, liststocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStocks, data_),
  };
  TodayListStocks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayListStocks_descriptor_,
      TodayListStocks::default_instance_,
      TodayListStocks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStocks, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayListStocks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayListStocks, _internal_metadata_),
      -1);
  TodayBrokerStock_descriptor_ = file->message_type(3);
  static const int TodayBrokerStock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStock, brokernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStock, newaddnum_),
  };
  TodayBrokerStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayBrokerStock_descriptor_,
      TodayBrokerStock::default_instance_,
      TodayBrokerStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStock, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayBrokerStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStock, _internal_metadata_),
      -1);
  TodayBrokerStocks_descriptor_ = file->message_type(4);
  static const int TodayBrokerStocks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStocks, brokerstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStocks, data_),
  };
  TodayBrokerStocks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayBrokerStocks_descriptor_,
      TodayBrokerStocks::default_instance_,
      TodayBrokerStocks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStocks, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayBrokerStocks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayBrokerStocks, _internal_metadata_),
      -1);
  TodayConvertStock_descriptor_ = file->message_type(5);
  static const int TodayConvertStock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStock, brokernum_),
  };
  TodayConvertStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayConvertStock_descriptor_,
      TodayConvertStock::default_instance_,
      TodayConvertStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStock, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayConvertStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStock, _internal_metadata_),
      -1);
  TodayConvertStocks_descriptor_ = file->message_type(6);
  static const int TodayConvertStocks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStocks, convertstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStocks, data_),
  };
  TodayConvertStocks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayConvertStocks_descriptor_,
      TodayConvertStocks::default_instance_,
      TodayConvertStocks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStocks, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayConvertStocks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayConvertStocks, _internal_metadata_),
      -1);
  TodayIssueStock_descriptor_ = file->message_type(7);
  static const int TodayIssueStock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStock, projectadvance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStock, issueprice_),
  };
  TodayIssueStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayIssueStock_descriptor_,
      TodayIssueStock::default_instance_,
      TodayIssueStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStock, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayIssueStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStock, _internal_metadata_),
      -1);
  TodayIssueStocks_descriptor_ = file->message_type(8);
  static const int TodayIssueStocks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStocks, issuestocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStocks, data_),
  };
  TodayIssueStocks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TodayIssueStocks_descriptor_,
      TodayIssueStocks::default_instance_,
      TodayIssueStocks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStocks, _has_bits_[0]),
      -1,
      -1,
      sizeof(TodayIssueStocks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayIssueStocks, _internal_metadata_),
      -1);
  BrokerStock_descriptor_ = file->message_type(9);
  static const int BrokerStock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, initamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, initcost_),
  };
  BrokerStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrokerStock_descriptor_,
      BrokerStock::default_instance_,
      BrokerStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, _has_bits_[0]),
      -1,
      -1,
      sizeof(BrokerStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStock, _internal_metadata_),
      -1);
  BrokerDetaileInfo_descriptor_ = file->message_type(10);
  static const int BrokerDetaileInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, brokername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, firststocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, laststocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, mainstocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, avgpe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, avgpb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, totalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, data_),
  };
  BrokerDetaileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrokerDetaileInfo_descriptor_,
      BrokerDetaileInfo::default_instance_,
      BrokerDetaileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BrokerDetaileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerDetaileInfo, _internal_metadata_),
      -1);
  BrokerInfo_descriptor_ = file->message_type(11);
  static const int BrokerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, brokername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, begindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, initamount_),
  };
  BrokerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrokerInfo_descriptor_,
      BrokerInfo::default_instance_,
      BrokerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BrokerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, _internal_metadata_),
      -1);
  StockBrokerInfo_descriptor_ = file->message_type(12);
  static const int StockBrokerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBrokerInfo, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBrokerInfo, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBrokerInfo, data_),
  };
  StockBrokerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockBrokerInfo_descriptor_,
      StockBrokerInfo::default_instance_,
      StockBrokerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBrokerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockBrokerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBrokerInfo, _internal_metadata_),
      -1);
  IssueDetaileInfo_descriptor_ = file->message_type(13);
  static const int IssueDetaileInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, issueamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, collectcapital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, issueprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, lastclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, issuepe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, overflowratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, projectadvance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, issuedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, issuetarget_),
  };
  IssueDetaileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IssueDetaileInfo_descriptor_,
      IssueDetaileInfo::default_instance_,
      IssueDetaileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(IssueDetaileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueDetaileInfo, _internal_metadata_),
      -1);
  IssueStock_descriptor_ = file->message_type(14);
  static const int IssueStock_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, noticedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, issuescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, issueprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, projectadvance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, pe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, latestnoticedate_),
  };
  IssueStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IssueStock_descriptor_,
      IssueStock::default_instance_,
      IssueStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, _has_bits_[0]),
      -1,
      -1,
      sizeof(IssueStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStock, _internal_metadata_),
      -1);
  IssueStatInfo_descriptor_ = file->message_type(15);
  static const int IssueStatInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStatInfo, stocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStatInfo, totalscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStatInfo, avgpe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStatInfo, data_),
  };
  IssueStatInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IssueStatInfo_descriptor_,
      IssueStatInfo::default_instance_,
      IssueStatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStatInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(IssueStatInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueStatInfo, _internal_metadata_),
      -1);
  BrokerData_descriptor_ = file->message_type(16);
  static const int BrokerData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerData, brokername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerData, laststocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerData, firststocknum_),
  };
  BrokerData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrokerData_descriptor_,
      BrokerData::default_instance_,
      BrokerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerData, _has_bits_[0]),
      -1,
      -1,
      sizeof(BrokerData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerData, _internal_metadata_),
      -1);
  BrokerList_descriptor_ = file->message_type(17);
  static const int BrokerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerList, brokernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerList, data_),
  };
  BrokerList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BrokerList_descriptor_,
      BrokerList::default_instance_,
      BrokerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerList, _has_bits_[0]),
      -1,
      -1,
      sizeof(BrokerList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerList, _internal_metadata_),
      -1);
  QuickReportData_descriptor_ = file->message_type(18);
  static const int QuickReportData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, reportdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, reporttitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, classtag_),
  };
  QuickReportData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuickReportData_descriptor_,
      QuickReportData::default_instance_,
      QuickReportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, _has_bits_[0]),
      -1,
      -1,
      sizeof(QuickReportData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickReportData, _internal_metadata_),
      -1);
  FinanceQuickReport_descriptor_ = file->message_type(19);
  static const int FinanceQuickReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinanceQuickReport, data_),
  };
  FinanceQuickReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FinanceQuickReport_descriptor_,
      FinanceQuickReport::default_instance_,
      FinanceQuickReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinanceQuickReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(FinanceQuickReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinanceQuickReport, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CldSanBanData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OverallInfo_descriptor_, &OverallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayListStock_descriptor_, &TodayListStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayListStocks_descriptor_, &TodayListStocks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayBrokerStock_descriptor_, &TodayBrokerStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayBrokerStocks_descriptor_, &TodayBrokerStocks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayConvertStock_descriptor_, &TodayConvertStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayConvertStocks_descriptor_, &TodayConvertStocks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayIssueStock_descriptor_, &TodayIssueStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TodayIssueStocks_descriptor_, &TodayIssueStocks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrokerStock_descriptor_, &BrokerStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrokerDetaileInfo_descriptor_, &BrokerDetaileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrokerInfo_descriptor_, &BrokerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockBrokerInfo_descriptor_, &StockBrokerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IssueDetaileInfo_descriptor_, &IssueDetaileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IssueStock_descriptor_, &IssueStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IssueStatInfo_descriptor_, &IssueStatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrokerData_descriptor_, &BrokerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BrokerList_descriptor_, &BrokerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuickReportData_descriptor_, &QuickReportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FinanceQuickReport_descriptor_, &FinanceQuickReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CldSanBanData_2eproto() {
  delete OverallInfo::default_instance_;
  delete OverallInfo_reflection_;
  delete TodayListStock::default_instance_;
  delete TodayListStock_reflection_;
  delete TodayListStocks::default_instance_;
  delete TodayListStocks_reflection_;
  delete TodayBrokerStock::default_instance_;
  delete TodayBrokerStock_reflection_;
  delete TodayBrokerStocks::default_instance_;
  delete TodayBrokerStocks_reflection_;
  delete TodayConvertStock::default_instance_;
  delete TodayConvertStock_reflection_;
  delete TodayConvertStocks::default_instance_;
  delete TodayConvertStocks_reflection_;
  delete TodayIssueStock::default_instance_;
  delete TodayIssueStock_reflection_;
  delete TodayIssueStocks::default_instance_;
  delete TodayIssueStocks_reflection_;
  delete BrokerStock::default_instance_;
  delete BrokerStock_reflection_;
  delete BrokerDetaileInfo::default_instance_;
  delete BrokerDetaileInfo_reflection_;
  delete BrokerInfo::default_instance_;
  delete BrokerInfo_reflection_;
  delete StockBrokerInfo::default_instance_;
  delete StockBrokerInfo_reflection_;
  delete IssueDetaileInfo::default_instance_;
  delete IssueDetaileInfo_reflection_;
  delete IssueStock::default_instance_;
  delete IssueStock_reflection_;
  delete IssueStatInfo::default_instance_;
  delete IssueStatInfo_reflection_;
  delete BrokerData::default_instance_;
  delete BrokerData_reflection_;
  delete BrokerList::default_instance_;
  delete BrokerList_reflection_;
  delete QuickReportData::default_instance_;
  delete QuickReportData_reflection_;
  delete FinanceQuickReport::default_instance_;
  delete FinanceQuickReport_reflection_;
}

void protobuf_AddDesc_CldSanBanData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023CldSanBanData.proto\022\006dzhyun\"\204\001\n\013Overal"
    "lInfo\022\025\n\rTotalStockNum\030\001 \001(\003\022\031\n\021Agreemen"
    "tStockNum\030\002 \001(\003\022\026\n\016BrokerStockNum\030\003 \001(\003\022"
    "\024\n\014WaitStockNum\030\004 \001(\003\022\025\n\rApplyStockNum\030\005"
    " \001(\003\"\\\n\016TodayListStock\022\021\n\tStockCode\030\001 \002("
    "\t\022\021\n\tStockName\030\002 \001(\t\022\022\n\nMainBroker\030\003 \001(\t"
    "\022\020\n\010Industry\030\004 \001(\t\"M\n\017TodayListStocks\022\024\n"
    "\014ListStockNum\030\001 \002(\003\022$\n\004Data\030\002 \003(\0132\026.dzhy"
    "un.TodayListStock\"^\n\020TodayBrokerStock\022\021\n"
    "\tStockCode\030\001 \002(\t\022\021\n\tStockName\030\002 \001(\t\022\021\n\tB"
    "rokerNum\030\003 \001(\003\022\021\n\tNewAddNum\030\004 \001(\003\"S\n\021Tod"
    "ayBrokerStocks\022\026\n\016BrokerStockNum\030\001 \002(\003\022&"
    "\n\004Data\030\002 \003(\0132\030.dzhyun.TodayBrokerStock\"L"
    "\n\021TodayConvertStock\022\021\n\tStockCode\030\001 \002(\t\022\021"
    "\n\tStockName\030\002 \001(\t\022\021\n\tBrokerNum\030\003 \001(\003\"V\n\022"
    "TodayConvertStocks\022\027\n\017ConvertStockNum\030\001 "
    "\002(\003\022\'\n\004Data\030\002 \003(\0132\031.dzhyun.TodayConvertS"
    "tock\"c\n\017TodayIssueStock\022\021\n\tStockCode\030\001 \002"
    "(\t\022\021\n\tStockName\030\002 \001(\t\022\026\n\016ProjectAdvance\030"
    "\003 \001(\t\022\022\n\nIssuePrice\030\004 \001(\t\"P\n\020TodayIssueS"
    "tocks\022\025\n\rIssueStockNum\030\001 \002(\003\022%\n\004Data\030\002 \003"
    "(\0132\027.dzhyun.TodayIssueStock\"h\n\013BrokerSto"
    "ck\022\021\n\tStockCode\030\001 \002(\t\022\021\n\tStockName\030\002 \001(\t"
    "\022\r\n\005Price\030\003 \001(\003\022\022\n\nInitAmount\030\004 \001(\003\022\020\n\010I"
    "nitCost\030\005 \001(\003\"\277\001\n\021BrokerDetaileInfo\022\022\n\nB"
    "rokerName\030\001 \002(\t\022\025\n\rFirstStockNum\030\002 \001(\003\022\024"
    "\n\014LastStockNum\030\003 \001(\003\022\024\n\014MainStockNum\030\004 \001"
    "(\003\022\r\n\005AvgPE\030\005 \001(\003\022\r\n\005AvgPB\030\006 \001(\003\022\022\n\nTota"
    "lValue\030\007 \001(\003\022!\n\004Data\030\010 \003(\0132\023.dzhyun.Brok"
    "erStock\"G\n\nBrokerInfo\022\022\n\nBrokerName\030\001 \002("
    "\t\022\021\n\tBeginDate\030\002 \002(\t\022\022\n\nInitAmount\030\003 \001(\003"
    "\"Y\n\017StockBrokerInfo\022\021\n\tStockCode\030\001 \002(\t\022\021"
    "\n\tStockName\030\002 \001(\t\022 \n\004Data\030\003 \003(\0132\022.dzhyun"
    ".BrokerInfo\"\364\001\n\020IssueDetaileInfo\022\021\n\tStoc"
    "kCode\030\001 \002(\t\022\021\n\tStockName\030\002 \001(\t\022\023\n\013IssueA"
    "mount\030\003 \001(\003\022\026\n\016CollectCapital\030\004 \001(\003\022\022\n\nI"
    "ssuePrice\030\005 \001(\t\022\021\n\tLastClose\030\006 \001(\003\022\017\n\007Is"
    "suePE\030\007 \001(\003\022\025\n\rOverflowRatio\030\010 \001(\003\022\026\n\016Pr"
    "ojectAdvance\030\t \001(\t\022\021\n\tIssueDate\030\n \001(\t\022\023\n"
    "\013IssueTarget\030\013 \001(\t\"\254\001\n\nIssueStock\022\021\n\tSto"
    "ckCode\030\001 \002(\t\022\021\n\tStockName\030\002 \001(\t\022\022\n\nNotic"
    "eDate\030\003 \001(\t\022\022\n\nIssueScale\030\004 \001(\003\022\022\n\nIssue"
    "Price\030\005 \001(\t\022\026\n\016ProjectAdvance\030\006 \001(\t\022\n\n\002P"
    "E\030\007 \001(\003\022\030\n\020LatestNoticeDate\030\010 \001(\t\"f\n\rIss"
    "ueStatInfo\022\020\n\010StockNum\030\001 \001(\003\022\022\n\nTotalSca"
    "le\030\002 \001(\003\022\r\n\005AvgPE\030\003 \001(\003\022 \n\004Data\030\004 \003(\0132\022."
    "dzhyun.IssueStock\"M\n\nBrokerData\022\022\n\nBroke"
    "rName\030\001 \002(\t\022\024\n\014LastStockNum\030\002 \001(\003\022\025\n\rFir"
    "stStockNum\030\003 \001(\003\"A\n\nBrokerList\022\021\n\tBroker"
    "Num\030\001 \002(\003\022 \n\004Data\030\002 \003(\0132\022.dzhyun.BrokerD"
    "ata\"r\n\017QuickReportData\022\021\n\tStockCode\030\001 \002("
    "\t\022\021\n\tStockName\030\002 \001(\t\022\022\n\nReportDate\030\003 \001(\t"
    "\022\023\n\013ReportTitle\030\004 \001(\t\022\020\n\010ClassTag\030\005 \001(\003\""
    ";\n\022FinanceQuickReport\022%\n\004Data\030\002 \003(\0132\027.dz"
    "hyun.QuickReportDataB\022\n\020com.dzhyun.proto", 2200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CldSanBanData.proto", &protobuf_RegisterTypes);
  OverallInfo::default_instance_ = new OverallInfo();
  TodayListStock::default_instance_ = new TodayListStock();
  TodayListStocks::default_instance_ = new TodayListStocks();
  TodayBrokerStock::default_instance_ = new TodayBrokerStock();
  TodayBrokerStocks::default_instance_ = new TodayBrokerStocks();
  TodayConvertStock::default_instance_ = new TodayConvertStock();
  TodayConvertStocks::default_instance_ = new TodayConvertStocks();
  TodayIssueStock::default_instance_ = new TodayIssueStock();
  TodayIssueStocks::default_instance_ = new TodayIssueStocks();
  BrokerStock::default_instance_ = new BrokerStock();
  BrokerDetaileInfo::default_instance_ = new BrokerDetaileInfo();
  BrokerInfo::default_instance_ = new BrokerInfo();
  StockBrokerInfo::default_instance_ = new StockBrokerInfo();
  IssueDetaileInfo::default_instance_ = new IssueDetaileInfo();
  IssueStock::default_instance_ = new IssueStock();
  IssueStatInfo::default_instance_ = new IssueStatInfo();
  BrokerData::default_instance_ = new BrokerData();
  BrokerList::default_instance_ = new BrokerList();
  QuickReportData::default_instance_ = new QuickReportData();
  FinanceQuickReport::default_instance_ = new FinanceQuickReport();
  OverallInfo::default_instance_->InitAsDefaultInstance();
  TodayListStock::default_instance_->InitAsDefaultInstance();
  TodayListStocks::default_instance_->InitAsDefaultInstance();
  TodayBrokerStock::default_instance_->InitAsDefaultInstance();
  TodayBrokerStocks::default_instance_->InitAsDefaultInstance();
  TodayConvertStock::default_instance_->InitAsDefaultInstance();
  TodayConvertStocks::default_instance_->InitAsDefaultInstance();
  TodayIssueStock::default_instance_->InitAsDefaultInstance();
  TodayIssueStocks::default_instance_->InitAsDefaultInstance();
  BrokerStock::default_instance_->InitAsDefaultInstance();
  BrokerDetaileInfo::default_instance_->InitAsDefaultInstance();
  BrokerInfo::default_instance_->InitAsDefaultInstance();
  StockBrokerInfo::default_instance_->InitAsDefaultInstance();
  IssueDetaileInfo::default_instance_->InitAsDefaultInstance();
  IssueStock::default_instance_->InitAsDefaultInstance();
  IssueStatInfo::default_instance_->InitAsDefaultInstance();
  BrokerData::default_instance_->InitAsDefaultInstance();
  BrokerList::default_instance_->InitAsDefaultInstance();
  QuickReportData::default_instance_->InitAsDefaultInstance();
  FinanceQuickReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CldSanBanData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CldSanBanData_2eproto {
  StaticDescriptorInitializer_CldSanBanData_2eproto() {
    protobuf_AddDesc_CldSanBanData_2eproto();
  }
} static_descriptor_initializer_CldSanBanData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverallInfo::kTotalStockNumFieldNumber;
const int OverallInfo::kAgreementStockNumFieldNumber;
const int OverallInfo::kBrokerStockNumFieldNumber;
const int OverallInfo::kWaitStockNumFieldNumber;
const int OverallInfo::kApplyStockNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverallInfo::OverallInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.OverallInfo)
}

void OverallInfo::InitAsDefaultInstance() {
}

OverallInfo::OverallInfo(const OverallInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.OverallInfo)
}

void OverallInfo::SharedCtor() {
  _cached_size_ = 0;
  totalstocknum_ = GOOGLE_LONGLONG(0);
  agreementstocknum_ = GOOGLE_LONGLONG(0);
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  waitstocknum_ = GOOGLE_LONGLONG(0);
  applystocknum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OverallInfo::~OverallInfo() {
  // @@protoc_insertion_point(destructor:dzhyun.OverallInfo)
  SharedDtor();
}

void OverallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OverallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OverallInfo_descriptor_;
}

const OverallInfo& OverallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

OverallInfo* OverallInfo::default_instance_ = NULL;

OverallInfo* OverallInfo::New(::google::protobuf::Arena* arena) const {
  OverallInfo* n = new OverallInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OverallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.OverallInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OverallInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OverallInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(totalstocknum_, applystocknum_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OverallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.OverallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 TotalStockNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalstocknum_)));
          set_has_totalstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AgreementStockNum;
        break;
      }

      // optional int64 AgreementStockNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AgreementStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &agreementstocknum_)));
          set_has_agreementstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BrokerStockNum;
        break;
      }

      // optional int64 BrokerStockNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BrokerStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokerstocknum_)));
          set_has_brokerstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WaitStockNum;
        break;
      }

      // optional int64 WaitStockNum = 4;
      case 4: {
        if (tag == 32) {
         parse_WaitStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &waitstocknum_)));
          set_has_waitstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ApplyStockNum;
        break;
      }

      // optional int64 ApplyStockNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ApplyStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &applystocknum_)));
          set_has_applystocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.OverallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.OverallInfo)
  return false;
#undef DO_
}

void OverallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.OverallInfo)
  // optional int64 TotalStockNum = 1;
  if (has_totalstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->totalstocknum(), output);
  }

  // optional int64 AgreementStockNum = 2;
  if (has_agreementstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->agreementstocknum(), output);
  }

  // optional int64 BrokerStockNum = 3;
  if (has_brokerstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->brokerstocknum(), output);
  }

  // optional int64 WaitStockNum = 4;
  if (has_waitstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->waitstocknum(), output);
  }

  // optional int64 ApplyStockNum = 5;
  if (has_applystocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->applystocknum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.OverallInfo)
}

::google::protobuf::uint8* OverallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.OverallInfo)
  // optional int64 TotalStockNum = 1;
  if (has_totalstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->totalstocknum(), target);
  }

  // optional int64 AgreementStockNum = 2;
  if (has_agreementstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->agreementstocknum(), target);
  }

  // optional int64 BrokerStockNum = 3;
  if (has_brokerstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->brokerstocknum(), target);
  }

  // optional int64 WaitStockNum = 4;
  if (has_waitstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->waitstocknum(), target);
  }

  // optional int64 ApplyStockNum = 5;
  if (has_applystocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->applystocknum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.OverallInfo)
  return target;
}

int OverallInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.OverallInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 TotalStockNum = 1;
    if (has_totalstocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalstocknum());
    }

    // optional int64 AgreementStockNum = 2;
    if (has_agreementstocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->agreementstocknum());
    }

    // optional int64 BrokerStockNum = 3;
    if (has_brokerstocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brokerstocknum());
    }

    // optional int64 WaitStockNum = 4;
    if (has_waitstocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->waitstocknum());
    }

    // optional int64 ApplyStockNum = 5;
    if (has_applystocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->applystocknum());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverallInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.OverallInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OverallInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OverallInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.OverallInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.OverallInfo)
    MergeFrom(*source);
  }
}

void OverallInfo::MergeFrom(const OverallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.OverallInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalstocknum()) {
      set_totalstocknum(from.totalstocknum());
    }
    if (from.has_agreementstocknum()) {
      set_agreementstocknum(from.agreementstocknum());
    }
    if (from.has_brokerstocknum()) {
      set_brokerstocknum(from.brokerstocknum());
    }
    if (from.has_waitstocknum()) {
      set_waitstocknum(from.waitstocknum());
    }
    if (from.has_applystocknum()) {
      set_applystocknum(from.applystocknum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OverallInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.OverallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverallInfo::CopyFrom(const OverallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.OverallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverallInfo::IsInitialized() const {

  return true;
}

void OverallInfo::Swap(OverallInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverallInfo::InternalSwap(OverallInfo* other) {
  std::swap(totalstocknum_, other->totalstocknum_);
  std::swap(agreementstocknum_, other->agreementstocknum_);
  std::swap(brokerstocknum_, other->brokerstocknum_);
  std::swap(waitstocknum_, other->waitstocknum_);
  std::swap(applystocknum_, other->applystocknum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OverallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OverallInfo_descriptor_;
  metadata.reflection = OverallInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OverallInfo

// optional int64 TotalStockNum = 1;
bool OverallInfo::has_totalstocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OverallInfo::set_has_totalstocknum() {
  _has_bits_[0] |= 0x00000001u;
}
void OverallInfo::clear_has_totalstocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
void OverallInfo::clear_totalstocknum() {
  totalstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_totalstocknum();
}
 ::google::protobuf::int64 OverallInfo::totalstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.TotalStockNum)
  return totalstocknum_;
}
 void OverallInfo::set_totalstocknum(::google::protobuf::int64 value) {
  set_has_totalstocknum();
  totalstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.TotalStockNum)
}

// optional int64 AgreementStockNum = 2;
bool OverallInfo::has_agreementstocknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OverallInfo::set_has_agreementstocknum() {
  _has_bits_[0] |= 0x00000002u;
}
void OverallInfo::clear_has_agreementstocknum() {
  _has_bits_[0] &= ~0x00000002u;
}
void OverallInfo::clear_agreementstocknum() {
  agreementstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_agreementstocknum();
}
 ::google::protobuf::int64 OverallInfo::agreementstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.AgreementStockNum)
  return agreementstocknum_;
}
 void OverallInfo::set_agreementstocknum(::google::protobuf::int64 value) {
  set_has_agreementstocknum();
  agreementstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.AgreementStockNum)
}

// optional int64 BrokerStockNum = 3;
bool OverallInfo::has_brokerstocknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OverallInfo::set_has_brokerstocknum() {
  _has_bits_[0] |= 0x00000004u;
}
void OverallInfo::clear_has_brokerstocknum() {
  _has_bits_[0] &= ~0x00000004u;
}
void OverallInfo::clear_brokerstocknum() {
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_brokerstocknum();
}
 ::google::protobuf::int64 OverallInfo::brokerstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.BrokerStockNum)
  return brokerstocknum_;
}
 void OverallInfo::set_brokerstocknum(::google::protobuf::int64 value) {
  set_has_brokerstocknum();
  brokerstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.BrokerStockNum)
}

// optional int64 WaitStockNum = 4;
bool OverallInfo::has_waitstocknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OverallInfo::set_has_waitstocknum() {
  _has_bits_[0] |= 0x00000008u;
}
void OverallInfo::clear_has_waitstocknum() {
  _has_bits_[0] &= ~0x00000008u;
}
void OverallInfo::clear_waitstocknum() {
  waitstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_waitstocknum();
}
 ::google::protobuf::int64 OverallInfo::waitstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.WaitStockNum)
  return waitstocknum_;
}
 void OverallInfo::set_waitstocknum(::google::protobuf::int64 value) {
  set_has_waitstocknum();
  waitstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.WaitStockNum)
}

// optional int64 ApplyStockNum = 5;
bool OverallInfo::has_applystocknum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OverallInfo::set_has_applystocknum() {
  _has_bits_[0] |= 0x00000010u;
}
void OverallInfo::clear_has_applystocknum() {
  _has_bits_[0] &= ~0x00000010u;
}
void OverallInfo::clear_applystocknum() {
  applystocknum_ = GOOGLE_LONGLONG(0);
  clear_has_applystocknum();
}
 ::google::protobuf::int64 OverallInfo::applystocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.ApplyStockNum)
  return applystocknum_;
}
 void OverallInfo::set_applystocknum(::google::protobuf::int64 value) {
  set_has_applystocknum();
  applystocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.ApplyStockNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayListStock::kStockCodeFieldNumber;
const int TodayListStock::kStockNameFieldNumber;
const int TodayListStock::kMainBrokerFieldNumber;
const int TodayListStock::kIndustryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayListStock::TodayListStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayListStock)
}

void TodayListStock::InitAsDefaultInstance() {
}

TodayListStock::TodayListStock(const TodayListStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayListStock)
}

void TodayListStock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainbroker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayListStock::~TodayListStock() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayListStock)
  SharedDtor();
}

void TodayListStock::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainbroker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TodayListStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayListStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayListStock_descriptor_;
}

const TodayListStock& TodayListStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayListStock* TodayListStock::default_instance_ = NULL;

TodayListStock* TodayListStock::New(::google::protobuf::Arena* arena) const {
  TodayListStock* n = new TodayListStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayListStock::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayListStock)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mainbroker()) {
      mainbroker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_industry()) {
      industry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayListStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayListStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayListStock.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayListStock.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MainBroker;
        break;
      }

      // optional string MainBroker = 3;
      case 3: {
        if (tag == 26) {
         parse_MainBroker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainbroker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mainbroker().data(), this->mainbroker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayListStock.MainBroker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Industry;
        break;
      }

      // optional string Industry = 4;
      case 4: {
        if (tag == 34) {
         parse_Industry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_industry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->industry().data(), this->industry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayListStock.Industry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayListStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayListStock)
  return false;
#undef DO_
}

void TodayListStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayListStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional string MainBroker = 3;
  if (has_mainbroker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mainbroker().data(), this->mainbroker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.MainBroker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mainbroker(), output);
  }

  // optional string Industry = 4;
  if (has_industry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industry().data(), this->industry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.Industry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->industry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayListStock)
}

::google::protobuf::uint8* TodayListStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayListStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional string MainBroker = 3;
  if (has_mainbroker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mainbroker().data(), this->mainbroker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.MainBroker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mainbroker(), target);
  }

  // optional string Industry = 4;
  if (has_industry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industry().data(), this->industry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayListStock.Industry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->industry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayListStock)
  return target;
}

int TodayListStock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayListStock)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional string MainBroker = 3;
    if (has_mainbroker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainbroker());
    }

    // optional string Industry = 4;
    if (has_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->industry());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayListStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayListStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayListStock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayListStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayListStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayListStock)
    MergeFrom(*source);
  }
}

void TodayListStock::MergeFrom(const TodayListStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayListStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_mainbroker()) {
      set_has_mainbroker();
      mainbroker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainbroker_);
    }
    if (from.has_industry()) {
      set_has_industry();
      industry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.industry_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayListStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayListStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayListStock::CopyFrom(const TodayListStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayListStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayListStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TodayListStock::Swap(TodayListStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayListStock::InternalSwap(TodayListStock* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  mainbroker_.Swap(&other->mainbroker_);
  industry_.Swap(&other->industry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayListStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayListStock_descriptor_;
  metadata.reflection = TodayListStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayListStock

// required string StockCode = 1;
bool TodayListStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayListStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayListStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayListStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& TodayListStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.StockCode)
}
 void TodayListStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.StockCode)
}
 void TodayListStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.StockCode)
}
 ::std::string* TodayListStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayListStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.StockCode)
}

// optional string StockName = 2;
bool TodayListStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TodayListStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void TodayListStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void TodayListStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& TodayListStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.StockName)
}
 void TodayListStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.StockName)
}
 void TodayListStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.StockName)
}
 ::std::string* TodayListStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayListStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.StockName)
}

// optional string MainBroker = 3;
bool TodayListStock::has_mainbroker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TodayListStock::set_has_mainbroker() {
  _has_bits_[0] |= 0x00000004u;
}
void TodayListStock::clear_has_mainbroker() {
  _has_bits_[0] &= ~0x00000004u;
}
void TodayListStock::clear_mainbroker() {
  mainbroker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainbroker();
}
 const ::std::string& TodayListStock::mainbroker() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.MainBroker)
  return mainbroker_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_mainbroker(const ::std::string& value) {
  set_has_mainbroker();
  mainbroker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.MainBroker)
}
 void TodayListStock::set_mainbroker(const char* value) {
  set_has_mainbroker();
  mainbroker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.MainBroker)
}
 void TodayListStock::set_mainbroker(const char* value, size_t size) {
  set_has_mainbroker();
  mainbroker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.MainBroker)
}
 ::std::string* TodayListStock::mutable_mainbroker() {
  set_has_mainbroker();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.MainBroker)
  return mainbroker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayListStock::release_mainbroker() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.MainBroker)
  clear_has_mainbroker();
  return mainbroker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_allocated_mainbroker(::std::string* mainbroker) {
  if (mainbroker != NULL) {
    set_has_mainbroker();
  } else {
    clear_has_mainbroker();
  }
  mainbroker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainbroker);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.MainBroker)
}

// optional string Industry = 4;
bool TodayListStock::has_industry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TodayListStock::set_has_industry() {
  _has_bits_[0] |= 0x00000008u;
}
void TodayListStock::clear_has_industry() {
  _has_bits_[0] &= ~0x00000008u;
}
void TodayListStock::clear_industry() {
  industry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_industry();
}
 const ::std::string& TodayListStock::industry() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.Industry)
  return industry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_industry(const ::std::string& value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.Industry)
}
 void TodayListStock::set_industry(const char* value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.Industry)
}
 void TodayListStock::set_industry(const char* value, size_t size) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.Industry)
}
 ::std::string* TodayListStock::mutable_industry() {
  set_has_industry();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.Industry)
  return industry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayListStock::release_industry() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.Industry)
  clear_has_industry();
  return industry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayListStock::set_allocated_industry(::std::string* industry) {
  if (industry != NULL) {
    set_has_industry();
  } else {
    clear_has_industry();
  }
  industry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industry);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.Industry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayListStocks::kListStockNumFieldNumber;
const int TodayListStocks::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayListStocks::TodayListStocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayListStocks)
}

void TodayListStocks::InitAsDefaultInstance() {
}

TodayListStocks::TodayListStocks(const TodayListStocks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayListStocks)
}

void TodayListStocks::SharedCtor() {
  _cached_size_ = 0;
  liststocknum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayListStocks::~TodayListStocks() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayListStocks)
  SharedDtor();
}

void TodayListStocks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TodayListStocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayListStocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayListStocks_descriptor_;
}

const TodayListStocks& TodayListStocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayListStocks* TodayListStocks::default_instance_ = NULL;

TodayListStocks* TodayListStocks::New(::google::protobuf::Arena* arena) const {
  TodayListStocks* n = new TodayListStocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayListStocks::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayListStocks)
  liststocknum_ = GOOGLE_LONGLONG(0);
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayListStocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayListStocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ListStockNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &liststocknum_)));
          set_has_liststocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.TodayListStock Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayListStocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayListStocks)
  return false;
#undef DO_
}

void TodayListStocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayListStocks)
  // required int64 ListStockNum = 1;
  if (has_liststocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->liststocknum(), output);
  }

  // repeated .dzhyun.TodayListStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayListStocks)
}

::google::protobuf::uint8* TodayListStocks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayListStocks)
  // required int64 ListStockNum = 1;
  if (has_liststocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->liststocknum(), target);
  }

  // repeated .dzhyun.TodayListStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayListStocks)
  return target;
}

int TodayListStocks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayListStocks)
  int total_size = 0;

  // required int64 ListStockNum = 1;
  if (has_liststocknum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->liststocknum());
  }
  // repeated .dzhyun.TodayListStock Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayListStocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayListStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayListStocks* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayListStocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayListStocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayListStocks)
    MergeFrom(*source);
  }
}

void TodayListStocks::MergeFrom(const TodayListStocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayListStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liststocknum()) {
      set_liststocknum(from.liststocknum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayListStocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayListStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayListStocks::CopyFrom(const TodayListStocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayListStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayListStocks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void TodayListStocks::Swap(TodayListStocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayListStocks::InternalSwap(TodayListStocks* other) {
  std::swap(liststocknum_, other->liststocknum_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayListStocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayListStocks_descriptor_;
  metadata.reflection = TodayListStocks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayListStocks

// required int64 ListStockNum = 1;
bool TodayListStocks::has_liststocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayListStocks::set_has_liststocknum() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayListStocks::clear_has_liststocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayListStocks::clear_liststocknum() {
  liststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_liststocknum();
}
 ::google::protobuf::int64 TodayListStocks::liststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStocks.ListStockNum)
  return liststocknum_;
}
 void TodayListStocks::set_liststocknum(::google::protobuf::int64 value) {
  set_has_liststocknum();
  liststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStocks.ListStockNum)
}

// repeated .dzhyun.TodayListStock Data = 2;
int TodayListStocks::data_size() const {
  return data_.size();
}
void TodayListStocks::clear_data() {
  data_.Clear();
}
const ::dzhyun::TodayListStock& TodayListStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStocks.Data)
  return data_.Get(index);
}
::dzhyun::TodayListStock* TodayListStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStocks.Data)
  return data_.Mutable(index);
}
::dzhyun::TodayListStock* TodayListStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayListStocks.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock >*
TodayListStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayListStocks.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock >&
TodayListStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayListStocks.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayBrokerStock::kStockCodeFieldNumber;
const int TodayBrokerStock::kStockNameFieldNumber;
const int TodayBrokerStock::kBrokerNumFieldNumber;
const int TodayBrokerStock::kNewAddNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayBrokerStock::TodayBrokerStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayBrokerStock)
}

void TodayBrokerStock::InitAsDefaultInstance() {
}

TodayBrokerStock::TodayBrokerStock(const TodayBrokerStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayBrokerStock)
}

void TodayBrokerStock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokernum_ = GOOGLE_LONGLONG(0);
  newaddnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayBrokerStock::~TodayBrokerStock() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayBrokerStock)
  SharedDtor();
}

void TodayBrokerStock::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TodayBrokerStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayBrokerStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayBrokerStock_descriptor_;
}

const TodayBrokerStock& TodayBrokerStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayBrokerStock* TodayBrokerStock::default_instance_ = NULL;

TodayBrokerStock* TodayBrokerStock::New(::google::protobuf::Arena* arena) const {
  TodayBrokerStock* n = new TodayBrokerStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayBrokerStock::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayBrokerStock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TodayBrokerStock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TodayBrokerStock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(brokernum_, newaddnum_);
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayBrokerStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayBrokerStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayBrokerStock.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayBrokerStock.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BrokerNum;
        break;
      }

      // optional int64 BrokerNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BrokerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokernum_)));
          set_has_brokernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_NewAddNum;
        break;
      }

      // optional int64 NewAddNum = 4;
      case 4: {
        if (tag == 32) {
         parse_NewAddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newaddnum_)));
          set_has_newaddnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayBrokerStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayBrokerStock)
  return false;
#undef DO_
}

void TodayBrokerStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayBrokerStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayBrokerStock.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayBrokerStock.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional int64 BrokerNum = 3;
  if (has_brokernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->brokernum(), output);
  }

  // optional int64 NewAddNum = 4;
  if (has_newaddnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->newaddnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayBrokerStock)
}

::google::protobuf::uint8* TodayBrokerStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayBrokerStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayBrokerStock.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayBrokerStock.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional int64 BrokerNum = 3;
  if (has_brokernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->brokernum(), target);
  }

  // optional int64 NewAddNum = 4;
  if (has_newaddnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->newaddnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayBrokerStock)
  return target;
}

int TodayBrokerStock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayBrokerStock)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional int64 BrokerNum = 3;
    if (has_brokernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brokernum());
    }

    // optional int64 NewAddNum = 4;
    if (has_newaddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newaddnum());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayBrokerStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayBrokerStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayBrokerStock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayBrokerStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayBrokerStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayBrokerStock)
    MergeFrom(*source);
  }
}

void TodayBrokerStock::MergeFrom(const TodayBrokerStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayBrokerStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_brokernum()) {
      set_brokernum(from.brokernum());
    }
    if (from.has_newaddnum()) {
      set_newaddnum(from.newaddnum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayBrokerStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayBrokerStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayBrokerStock::CopyFrom(const TodayBrokerStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayBrokerStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayBrokerStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TodayBrokerStock::Swap(TodayBrokerStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayBrokerStock::InternalSwap(TodayBrokerStock* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  std::swap(brokernum_, other->brokernum_);
  std::swap(newaddnum_, other->newaddnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayBrokerStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayBrokerStock_descriptor_;
  metadata.reflection = TodayBrokerStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayBrokerStock

// required string StockCode = 1;
bool TodayBrokerStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayBrokerStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayBrokerStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayBrokerStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& TodayBrokerStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayBrokerStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.StockCode)
}
 void TodayBrokerStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayBrokerStock.StockCode)
}
 void TodayBrokerStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayBrokerStock.StockCode)
}
 ::std::string* TodayBrokerStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayBrokerStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayBrokerStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayBrokerStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayBrokerStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayBrokerStock.StockCode)
}

// optional string StockName = 2;
bool TodayBrokerStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TodayBrokerStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void TodayBrokerStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void TodayBrokerStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& TodayBrokerStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayBrokerStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.StockName)
}
 void TodayBrokerStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayBrokerStock.StockName)
}
 void TodayBrokerStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayBrokerStock.StockName)
}
 ::std::string* TodayBrokerStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayBrokerStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayBrokerStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayBrokerStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayBrokerStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayBrokerStock.StockName)
}

// optional int64 BrokerNum = 3;
bool TodayBrokerStock::has_brokernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TodayBrokerStock::set_has_brokernum() {
  _has_bits_[0] |= 0x00000004u;
}
void TodayBrokerStock::clear_has_brokernum() {
  _has_bits_[0] &= ~0x00000004u;
}
void TodayBrokerStock::clear_brokernum() {
  brokernum_ = GOOGLE_LONGLONG(0);
  clear_has_brokernum();
}
 ::google::protobuf::int64 TodayBrokerStock::brokernum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.BrokerNum)
  return brokernum_;
}
 void TodayBrokerStock::set_brokernum(::google::protobuf::int64 value) {
  set_has_brokernum();
  brokernum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.BrokerNum)
}

// optional int64 NewAddNum = 4;
bool TodayBrokerStock::has_newaddnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TodayBrokerStock::set_has_newaddnum() {
  _has_bits_[0] |= 0x00000008u;
}
void TodayBrokerStock::clear_has_newaddnum() {
  _has_bits_[0] &= ~0x00000008u;
}
void TodayBrokerStock::clear_newaddnum() {
  newaddnum_ = GOOGLE_LONGLONG(0);
  clear_has_newaddnum();
}
 ::google::protobuf::int64 TodayBrokerStock::newaddnum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.NewAddNum)
  return newaddnum_;
}
 void TodayBrokerStock::set_newaddnum(::google::protobuf::int64 value) {
  set_has_newaddnum();
  newaddnum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.NewAddNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayBrokerStocks::kBrokerStockNumFieldNumber;
const int TodayBrokerStocks::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayBrokerStocks::TodayBrokerStocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayBrokerStocks)
}

void TodayBrokerStocks::InitAsDefaultInstance() {
}

TodayBrokerStocks::TodayBrokerStocks(const TodayBrokerStocks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayBrokerStocks)
}

void TodayBrokerStocks::SharedCtor() {
  _cached_size_ = 0;
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayBrokerStocks::~TodayBrokerStocks() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayBrokerStocks)
  SharedDtor();
}

void TodayBrokerStocks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TodayBrokerStocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayBrokerStocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayBrokerStocks_descriptor_;
}

const TodayBrokerStocks& TodayBrokerStocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayBrokerStocks* TodayBrokerStocks::default_instance_ = NULL;

TodayBrokerStocks* TodayBrokerStocks::New(::google::protobuf::Arena* arena) const {
  TodayBrokerStocks* n = new TodayBrokerStocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayBrokerStocks::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayBrokerStocks)
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayBrokerStocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayBrokerStocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 BrokerStockNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokerstocknum_)));
          set_has_brokerstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.TodayBrokerStock Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayBrokerStocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayBrokerStocks)
  return false;
#undef DO_
}

void TodayBrokerStocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayBrokerStocks)
  // required int64 BrokerStockNum = 1;
  if (has_brokerstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->brokerstocknum(), output);
  }

  // repeated .dzhyun.TodayBrokerStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayBrokerStocks)
}

::google::protobuf::uint8* TodayBrokerStocks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayBrokerStocks)
  // required int64 BrokerStockNum = 1;
  if (has_brokerstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->brokerstocknum(), target);
  }

  // repeated .dzhyun.TodayBrokerStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayBrokerStocks)
  return target;
}

int TodayBrokerStocks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayBrokerStocks)
  int total_size = 0;

  // required int64 BrokerStockNum = 1;
  if (has_brokerstocknum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerstocknum());
  }
  // repeated .dzhyun.TodayBrokerStock Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayBrokerStocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayBrokerStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayBrokerStocks* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayBrokerStocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayBrokerStocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayBrokerStocks)
    MergeFrom(*source);
  }
}

void TodayBrokerStocks::MergeFrom(const TodayBrokerStocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayBrokerStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerstocknum()) {
      set_brokerstocknum(from.brokerstocknum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayBrokerStocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayBrokerStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayBrokerStocks::CopyFrom(const TodayBrokerStocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayBrokerStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayBrokerStocks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void TodayBrokerStocks::Swap(TodayBrokerStocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayBrokerStocks::InternalSwap(TodayBrokerStocks* other) {
  std::swap(brokerstocknum_, other->brokerstocknum_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayBrokerStocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayBrokerStocks_descriptor_;
  metadata.reflection = TodayBrokerStocks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayBrokerStocks

// required int64 BrokerStockNum = 1;
bool TodayBrokerStocks::has_brokerstocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayBrokerStocks::set_has_brokerstocknum() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayBrokerStocks::clear_has_brokerstocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayBrokerStocks::clear_brokerstocknum() {
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_brokerstocknum();
}
 ::google::protobuf::int64 TodayBrokerStocks::brokerstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStocks.BrokerStockNum)
  return brokerstocknum_;
}
 void TodayBrokerStocks::set_brokerstocknum(::google::protobuf::int64 value) {
  set_has_brokerstocknum();
  brokerstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStocks.BrokerStockNum)
}

// repeated .dzhyun.TodayBrokerStock Data = 2;
int TodayBrokerStocks::data_size() const {
  return data_.size();
}
void TodayBrokerStocks::clear_data() {
  data_.Clear();
}
const ::dzhyun::TodayBrokerStock& TodayBrokerStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStocks.Data)
  return data_.Get(index);
}
::dzhyun::TodayBrokerStock* TodayBrokerStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayBrokerStocks.Data)
  return data_.Mutable(index);
}
::dzhyun::TodayBrokerStock* TodayBrokerStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayBrokerStocks.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock >*
TodayBrokerStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayBrokerStocks.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock >&
TodayBrokerStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayBrokerStocks.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayConvertStock::kStockCodeFieldNumber;
const int TodayConvertStock::kStockNameFieldNumber;
const int TodayConvertStock::kBrokerNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayConvertStock::TodayConvertStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayConvertStock)
}

void TodayConvertStock::InitAsDefaultInstance() {
}

TodayConvertStock::TodayConvertStock(const TodayConvertStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayConvertStock)
}

void TodayConvertStock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokernum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayConvertStock::~TodayConvertStock() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayConvertStock)
  SharedDtor();
}

void TodayConvertStock::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TodayConvertStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayConvertStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayConvertStock_descriptor_;
}

const TodayConvertStock& TodayConvertStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayConvertStock* TodayConvertStock::default_instance_ = NULL;

TodayConvertStock* TodayConvertStock::New(::google::protobuf::Arena* arena) const {
  TodayConvertStock* n = new TodayConvertStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayConvertStock::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayConvertStock)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    brokernum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayConvertStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayConvertStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayConvertStock.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayConvertStock.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BrokerNum;
        break;
      }

      // optional int64 BrokerNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BrokerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokernum_)));
          set_has_brokernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayConvertStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayConvertStock)
  return false;
#undef DO_
}

void TodayConvertStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayConvertStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayConvertStock.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayConvertStock.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional int64 BrokerNum = 3;
  if (has_brokernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->brokernum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayConvertStock)
}

::google::protobuf::uint8* TodayConvertStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayConvertStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayConvertStock.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayConvertStock.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional int64 BrokerNum = 3;
  if (has_brokernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->brokernum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayConvertStock)
  return target;
}

int TodayConvertStock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayConvertStock)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional int64 BrokerNum = 3;
    if (has_brokernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brokernum());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayConvertStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayConvertStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayConvertStock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayConvertStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayConvertStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayConvertStock)
    MergeFrom(*source);
  }
}

void TodayConvertStock::MergeFrom(const TodayConvertStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayConvertStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_brokernum()) {
      set_brokernum(from.brokernum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayConvertStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayConvertStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayConvertStock::CopyFrom(const TodayConvertStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayConvertStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayConvertStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TodayConvertStock::Swap(TodayConvertStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayConvertStock::InternalSwap(TodayConvertStock* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  std::swap(brokernum_, other->brokernum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayConvertStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayConvertStock_descriptor_;
  metadata.reflection = TodayConvertStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayConvertStock

// required string StockCode = 1;
bool TodayConvertStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayConvertStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayConvertStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayConvertStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& TodayConvertStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayConvertStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStock.StockCode)
}
 void TodayConvertStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayConvertStock.StockCode)
}
 void TodayConvertStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayConvertStock.StockCode)
}
 ::std::string* TodayConvertStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayConvertStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayConvertStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayConvertStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayConvertStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayConvertStock.StockCode)
}

// optional string StockName = 2;
bool TodayConvertStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TodayConvertStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void TodayConvertStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void TodayConvertStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& TodayConvertStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayConvertStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStock.StockName)
}
 void TodayConvertStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayConvertStock.StockName)
}
 void TodayConvertStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayConvertStock.StockName)
}
 ::std::string* TodayConvertStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayConvertStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayConvertStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayConvertStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayConvertStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayConvertStock.StockName)
}

// optional int64 BrokerNum = 3;
bool TodayConvertStock::has_brokernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TodayConvertStock::set_has_brokernum() {
  _has_bits_[0] |= 0x00000004u;
}
void TodayConvertStock::clear_has_brokernum() {
  _has_bits_[0] &= ~0x00000004u;
}
void TodayConvertStock::clear_brokernum() {
  brokernum_ = GOOGLE_LONGLONG(0);
  clear_has_brokernum();
}
 ::google::protobuf::int64 TodayConvertStock::brokernum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStock.BrokerNum)
  return brokernum_;
}
 void TodayConvertStock::set_brokernum(::google::protobuf::int64 value) {
  set_has_brokernum();
  brokernum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStock.BrokerNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayConvertStocks::kConvertStockNumFieldNumber;
const int TodayConvertStocks::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayConvertStocks::TodayConvertStocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayConvertStocks)
}

void TodayConvertStocks::InitAsDefaultInstance() {
}

TodayConvertStocks::TodayConvertStocks(const TodayConvertStocks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayConvertStocks)
}

void TodayConvertStocks::SharedCtor() {
  _cached_size_ = 0;
  convertstocknum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayConvertStocks::~TodayConvertStocks() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayConvertStocks)
  SharedDtor();
}

void TodayConvertStocks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TodayConvertStocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayConvertStocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayConvertStocks_descriptor_;
}

const TodayConvertStocks& TodayConvertStocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayConvertStocks* TodayConvertStocks::default_instance_ = NULL;

TodayConvertStocks* TodayConvertStocks::New(::google::protobuf::Arena* arena) const {
  TodayConvertStocks* n = new TodayConvertStocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayConvertStocks::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayConvertStocks)
  convertstocknum_ = GOOGLE_LONGLONG(0);
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayConvertStocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayConvertStocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ConvertStockNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &convertstocknum_)));
          set_has_convertstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.TodayConvertStock Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayConvertStocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayConvertStocks)
  return false;
#undef DO_
}

void TodayConvertStocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayConvertStocks)
  // required int64 ConvertStockNum = 1;
  if (has_convertstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->convertstocknum(), output);
  }

  // repeated .dzhyun.TodayConvertStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayConvertStocks)
}

::google::protobuf::uint8* TodayConvertStocks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayConvertStocks)
  // required int64 ConvertStockNum = 1;
  if (has_convertstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->convertstocknum(), target);
  }

  // repeated .dzhyun.TodayConvertStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayConvertStocks)
  return target;
}

int TodayConvertStocks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayConvertStocks)
  int total_size = 0;

  // required int64 ConvertStockNum = 1;
  if (has_convertstocknum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->convertstocknum());
  }
  // repeated .dzhyun.TodayConvertStock Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayConvertStocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayConvertStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayConvertStocks* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayConvertStocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayConvertStocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayConvertStocks)
    MergeFrom(*source);
  }
}

void TodayConvertStocks::MergeFrom(const TodayConvertStocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayConvertStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_convertstocknum()) {
      set_convertstocknum(from.convertstocknum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayConvertStocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayConvertStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayConvertStocks::CopyFrom(const TodayConvertStocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayConvertStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayConvertStocks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void TodayConvertStocks::Swap(TodayConvertStocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayConvertStocks::InternalSwap(TodayConvertStocks* other) {
  std::swap(convertstocknum_, other->convertstocknum_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayConvertStocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayConvertStocks_descriptor_;
  metadata.reflection = TodayConvertStocks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayConvertStocks

// required int64 ConvertStockNum = 1;
bool TodayConvertStocks::has_convertstocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayConvertStocks::set_has_convertstocknum() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayConvertStocks::clear_has_convertstocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayConvertStocks::clear_convertstocknum() {
  convertstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_convertstocknum();
}
 ::google::protobuf::int64 TodayConvertStocks::convertstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStocks.ConvertStockNum)
  return convertstocknum_;
}
 void TodayConvertStocks::set_convertstocknum(::google::protobuf::int64 value) {
  set_has_convertstocknum();
  convertstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStocks.ConvertStockNum)
}

// repeated .dzhyun.TodayConvertStock Data = 2;
int TodayConvertStocks::data_size() const {
  return data_.size();
}
void TodayConvertStocks::clear_data() {
  data_.Clear();
}
const ::dzhyun::TodayConvertStock& TodayConvertStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStocks.Data)
  return data_.Get(index);
}
::dzhyun::TodayConvertStock* TodayConvertStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayConvertStocks.Data)
  return data_.Mutable(index);
}
::dzhyun::TodayConvertStock* TodayConvertStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayConvertStocks.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock >*
TodayConvertStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayConvertStocks.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock >&
TodayConvertStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayConvertStocks.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayIssueStock::kStockCodeFieldNumber;
const int TodayIssueStock::kStockNameFieldNumber;
const int TodayIssueStock::kProjectAdvanceFieldNumber;
const int TodayIssueStock::kIssuePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayIssueStock::TodayIssueStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayIssueStock)
}

void TodayIssueStock::InitAsDefaultInstance() {
}

TodayIssueStock::TodayIssueStock(const TodayIssueStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayIssueStock)
}

void TodayIssueStock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectadvance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issueprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayIssueStock::~TodayIssueStock() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayIssueStock)
  SharedDtor();
}

void TodayIssueStock::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectadvance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issueprice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TodayIssueStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayIssueStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayIssueStock_descriptor_;
}

const TodayIssueStock& TodayIssueStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayIssueStock* TodayIssueStock::default_instance_ = NULL;

TodayIssueStock* TodayIssueStock::New(::google::protobuf::Arena* arena) const {
  TodayIssueStock* n = new TodayIssueStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayIssueStock::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayIssueStock)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_projectadvance()) {
      projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_issueprice()) {
      issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayIssueStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayIssueStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayIssueStock.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayIssueStock.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ProjectAdvance;
        break;
      }

      // optional string ProjectAdvance = 3;
      case 3: {
        if (tag == 26) {
         parse_ProjectAdvance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectadvance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projectadvance().data(), this->projectadvance().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayIssueStock.ProjectAdvance");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_IssuePrice;
        break;
      }

      // optional string IssuePrice = 4;
      case 4: {
        if (tag == 34) {
         parse_IssuePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issueprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issueprice().data(), this->issueprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.TodayIssueStock.IssuePrice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayIssueStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayIssueStock)
  return false;
#undef DO_
}

void TodayIssueStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayIssueStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional string ProjectAdvance = 3;
  if (has_projectadvance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projectadvance().data(), this->projectadvance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.ProjectAdvance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->projectadvance(), output);
  }

  // optional string IssuePrice = 4;
  if (has_issueprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueprice().data(), this->issueprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.IssuePrice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->issueprice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayIssueStock)
}

::google::protobuf::uint8* TodayIssueStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayIssueStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional string ProjectAdvance = 3;
  if (has_projectadvance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projectadvance().data(), this->projectadvance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.ProjectAdvance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->projectadvance(), target);
  }

  // optional string IssuePrice = 4;
  if (has_issueprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueprice().data(), this->issueprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.TodayIssueStock.IssuePrice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->issueprice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayIssueStock)
  return target;
}

int TodayIssueStock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayIssueStock)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional string ProjectAdvance = 3;
    if (has_projectadvance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectadvance());
    }

    // optional string IssuePrice = 4;
    if (has_issueprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issueprice());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayIssueStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayIssueStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayIssueStock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayIssueStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayIssueStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayIssueStock)
    MergeFrom(*source);
  }
}

void TodayIssueStock::MergeFrom(const TodayIssueStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayIssueStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_projectadvance()) {
      set_has_projectadvance();
      projectadvance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectadvance_);
    }
    if (from.has_issueprice()) {
      set_has_issueprice();
      issueprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issueprice_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayIssueStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayIssueStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayIssueStock::CopyFrom(const TodayIssueStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayIssueStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayIssueStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TodayIssueStock::Swap(TodayIssueStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayIssueStock::InternalSwap(TodayIssueStock* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  projectadvance_.Swap(&other->projectadvance_);
  issueprice_.Swap(&other->issueprice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayIssueStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayIssueStock_descriptor_;
  metadata.reflection = TodayIssueStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayIssueStock

// required string StockCode = 1;
bool TodayIssueStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayIssueStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayIssueStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayIssueStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& TodayIssueStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.StockCode)
}
 void TodayIssueStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.StockCode)
}
 void TodayIssueStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.StockCode)
}
 ::std::string* TodayIssueStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayIssueStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.StockCode)
}

// optional string StockName = 2;
bool TodayIssueStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TodayIssueStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void TodayIssueStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void TodayIssueStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& TodayIssueStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.StockName)
}
 void TodayIssueStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.StockName)
}
 void TodayIssueStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.StockName)
}
 ::std::string* TodayIssueStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayIssueStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.StockName)
}

// optional string ProjectAdvance = 3;
bool TodayIssueStock::has_projectadvance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TodayIssueStock::set_has_projectadvance() {
  _has_bits_[0] |= 0x00000004u;
}
void TodayIssueStock::clear_has_projectadvance() {
  _has_bits_[0] &= ~0x00000004u;
}
void TodayIssueStock::clear_projectadvance() {
  projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projectadvance();
}
 const ::std::string& TodayIssueStock::projectadvance() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.ProjectAdvance)
  return projectadvance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_projectadvance(const ::std::string& value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.ProjectAdvance)
}
 void TodayIssueStock::set_projectadvance(const char* value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.ProjectAdvance)
}
 void TodayIssueStock::set_projectadvance(const char* value, size_t size) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.ProjectAdvance)
}
 ::std::string* TodayIssueStock::mutable_projectadvance() {
  set_has_projectadvance();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.ProjectAdvance)
  return projectadvance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayIssueStock::release_projectadvance() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.ProjectAdvance)
  clear_has_projectadvance();
  return projectadvance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_allocated_projectadvance(::std::string* projectadvance) {
  if (projectadvance != NULL) {
    set_has_projectadvance();
  } else {
    clear_has_projectadvance();
  }
  projectadvance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectadvance);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.ProjectAdvance)
}

// optional string IssuePrice = 4;
bool TodayIssueStock::has_issueprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TodayIssueStock::set_has_issueprice() {
  _has_bits_[0] |= 0x00000008u;
}
void TodayIssueStock::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000008u;
}
void TodayIssueStock::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
 const ::std::string& TodayIssueStock::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.IssuePrice)
}
 void TodayIssueStock::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.IssuePrice)
}
 void TodayIssueStock::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.IssuePrice)
}
 ::std::string* TodayIssueStock::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TodayIssueStock::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TodayIssueStock::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.IssuePrice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TodayIssueStocks::kIssueStockNumFieldNumber;
const int TodayIssueStocks::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TodayIssueStocks::TodayIssueStocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.TodayIssueStocks)
}

void TodayIssueStocks::InitAsDefaultInstance() {
}

TodayIssueStocks::TodayIssueStocks(const TodayIssueStocks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.TodayIssueStocks)
}

void TodayIssueStocks::SharedCtor() {
  _cached_size_ = 0;
  issuestocknum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayIssueStocks::~TodayIssueStocks() {
  // @@protoc_insertion_point(destructor:dzhyun.TodayIssueStocks)
  SharedDtor();
}

void TodayIssueStocks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TodayIssueStocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayIssueStocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayIssueStocks_descriptor_;
}

const TodayIssueStocks& TodayIssueStocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

TodayIssueStocks* TodayIssueStocks::default_instance_ = NULL;

TodayIssueStocks* TodayIssueStocks::New(::google::protobuf::Arena* arena) const {
  TodayIssueStocks* n = new TodayIssueStocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TodayIssueStocks::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.TodayIssueStocks)
  issuestocknum_ = GOOGLE_LONGLONG(0);
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TodayIssueStocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.TodayIssueStocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 IssueStockNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &issuestocknum_)));
          set_has_issuestocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.TodayIssueStock Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.TodayIssueStocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.TodayIssueStocks)
  return false;
#undef DO_
}

void TodayIssueStocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.TodayIssueStocks)
  // required int64 IssueStockNum = 1;
  if (has_issuestocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->issuestocknum(), output);
  }

  // repeated .dzhyun.TodayIssueStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.TodayIssueStocks)
}

::google::protobuf::uint8* TodayIssueStocks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.TodayIssueStocks)
  // required int64 IssueStockNum = 1;
  if (has_issuestocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->issuestocknum(), target);
  }

  // repeated .dzhyun.TodayIssueStock Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.TodayIssueStocks)
  return target;
}

int TodayIssueStocks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.TodayIssueStocks)
  int total_size = 0;

  // required int64 IssueStockNum = 1;
  if (has_issuestocknum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->issuestocknum());
  }
  // repeated .dzhyun.TodayIssueStock Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayIssueStocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.TodayIssueStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TodayIssueStocks* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TodayIssueStocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.TodayIssueStocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.TodayIssueStocks)
    MergeFrom(*source);
  }
}

void TodayIssueStocks::MergeFrom(const TodayIssueStocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.TodayIssueStocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuestocknum()) {
      set_issuestocknum(from.issuestocknum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TodayIssueStocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.TodayIssueStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayIssueStocks::CopyFrom(const TodayIssueStocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.TodayIssueStocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayIssueStocks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void TodayIssueStocks::Swap(TodayIssueStocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TodayIssueStocks::InternalSwap(TodayIssueStocks* other) {
  std::swap(issuestocknum_, other->issuestocknum_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TodayIssueStocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayIssueStocks_descriptor_;
  metadata.reflection = TodayIssueStocks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TodayIssueStocks

// required int64 IssueStockNum = 1;
bool TodayIssueStocks::has_issuestocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TodayIssueStocks::set_has_issuestocknum() {
  _has_bits_[0] |= 0x00000001u;
}
void TodayIssueStocks::clear_has_issuestocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
void TodayIssueStocks::clear_issuestocknum() {
  issuestocknum_ = GOOGLE_LONGLONG(0);
  clear_has_issuestocknum();
}
 ::google::protobuf::int64 TodayIssueStocks::issuestocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStocks.IssueStockNum)
  return issuestocknum_;
}
 void TodayIssueStocks::set_issuestocknum(::google::protobuf::int64 value) {
  set_has_issuestocknum();
  issuestocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStocks.IssueStockNum)
}

// repeated .dzhyun.TodayIssueStock Data = 2;
int TodayIssueStocks::data_size() const {
  return data_.size();
}
void TodayIssueStocks::clear_data() {
  data_.Clear();
}
const ::dzhyun::TodayIssueStock& TodayIssueStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStocks.Data)
  return data_.Get(index);
}
::dzhyun::TodayIssueStock* TodayIssueStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStocks.Data)
  return data_.Mutable(index);
}
::dzhyun::TodayIssueStock* TodayIssueStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayIssueStocks.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock >*
TodayIssueStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayIssueStocks.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock >&
TodayIssueStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayIssueStocks.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerStock::kStockCodeFieldNumber;
const int BrokerStock::kStockNameFieldNumber;
const int BrokerStock::kPriceFieldNumber;
const int BrokerStock::kInitAmountFieldNumber;
const int BrokerStock::kInitCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerStock::BrokerStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.BrokerStock)
}

void BrokerStock::InitAsDefaultInstance() {
}

BrokerStock::BrokerStock(const BrokerStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.BrokerStock)
}

void BrokerStock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = GOOGLE_LONGLONG(0);
  initamount_ = GOOGLE_LONGLONG(0);
  initcost_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerStock::~BrokerStock() {
  // @@protoc_insertion_point(destructor:dzhyun.BrokerStock)
  SharedDtor();
}

void BrokerStock::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BrokerStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerStock_descriptor_;
}

const BrokerStock& BrokerStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

BrokerStock* BrokerStock::default_instance_ = NULL;

BrokerStock* BrokerStock::New(::google::protobuf::Arena* arena) const {
  BrokerStock* n = new BrokerStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrokerStock::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.BrokerStock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BrokerStock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BrokerStock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(price_, initcost_);
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BrokerStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.BrokerStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.BrokerStock.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.BrokerStock.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Price;
        break;
      }

      // optional int64 Price = 3;
      case 3: {
        if (tag == 24) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InitAmount;
        break;
      }

      // optional int64 InitAmount = 4;
      case 4: {
        if (tag == 32) {
         parse_InitAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &initamount_)));
          set_has_initamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_InitCost;
        break;
      }

      // optional int64 InitCost = 5;
      case 5: {
        if (tag == 40) {
         parse_InitCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &initcost_)));
          set_has_initcost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.BrokerStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.BrokerStock)
  return false;
#undef DO_
}

void BrokerStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.BrokerStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerStock.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerStock.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional int64 Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->price(), output);
  }

  // optional int64 InitAmount = 4;
  if (has_initamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->initamount(), output);
  }

  // optional int64 InitCost = 5;
  if (has_initcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->initcost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.BrokerStock)
}

::google::protobuf::uint8* BrokerStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.BrokerStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerStock.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerStock.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional int64 Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->price(), target);
  }

  // optional int64 InitAmount = 4;
  if (has_initamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->initamount(), target);
  }

  // optional int64 InitCost = 5;
  if (has_initcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->initcost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.BrokerStock)
  return target;
}

int BrokerStock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.BrokerStock)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional int64 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price());
    }

    // optional int64 InitAmount = 4;
    if (has_initamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->initamount());
    }

    // optional int64 InitCost = 5;
    if (has_initcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->initcost());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.BrokerStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrokerStock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.BrokerStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.BrokerStock)
    MergeFrom(*source);
  }
}

void BrokerStock::MergeFrom(const BrokerStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.BrokerStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_initamount()) {
      set_initamount(from.initamount());
    }
    if (from.has_initcost()) {
      set_initcost(from.initcost());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BrokerStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.BrokerStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerStock::CopyFrom(const BrokerStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.BrokerStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BrokerStock::Swap(BrokerStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerStock::InternalSwap(BrokerStock* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  std::swap(price_, other->price_);
  std::swap(initamount_, other->initamount_);
  std::swap(initcost_, other->initcost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrokerStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerStock_descriptor_;
  metadata.reflection = BrokerStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrokerStock

// required string StockCode = 1;
bool BrokerStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrokerStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void BrokerStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrokerStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& BrokerStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.StockCode)
}
 void BrokerStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerStock.StockCode)
}
 void BrokerStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerStock.StockCode)
}
 ::std::string* BrokerStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrokerStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerStock.StockCode)
}

// optional string StockName = 2;
bool BrokerStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrokerStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void BrokerStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrokerStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& BrokerStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.StockName)
}
 void BrokerStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerStock.StockName)
}
 void BrokerStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerStock.StockName)
}
 ::std::string* BrokerStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrokerStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerStock.StockName)
}

// optional int64 Price = 3;
bool BrokerStock::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrokerStock::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void BrokerStock::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrokerStock::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
 ::google::protobuf::int64 BrokerStock::price() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.Price)
  return price_;
}
 void BrokerStock::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.Price)
}

// optional int64 InitAmount = 4;
bool BrokerStock::has_initamount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BrokerStock::set_has_initamount() {
  _has_bits_[0] |= 0x00000008u;
}
void BrokerStock::clear_has_initamount() {
  _has_bits_[0] &= ~0x00000008u;
}
void BrokerStock::clear_initamount() {
  initamount_ = GOOGLE_LONGLONG(0);
  clear_has_initamount();
}
 ::google::protobuf::int64 BrokerStock::initamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.InitAmount)
  return initamount_;
}
 void BrokerStock::set_initamount(::google::protobuf::int64 value) {
  set_has_initamount();
  initamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.InitAmount)
}

// optional int64 InitCost = 5;
bool BrokerStock::has_initcost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BrokerStock::set_has_initcost() {
  _has_bits_[0] |= 0x00000010u;
}
void BrokerStock::clear_has_initcost() {
  _has_bits_[0] &= ~0x00000010u;
}
void BrokerStock::clear_initcost() {
  initcost_ = GOOGLE_LONGLONG(0);
  clear_has_initcost();
}
 ::google::protobuf::int64 BrokerStock::initcost() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.InitCost)
  return initcost_;
}
 void BrokerStock::set_initcost(::google::protobuf::int64 value) {
  set_has_initcost();
  initcost_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.InitCost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerDetaileInfo::kBrokerNameFieldNumber;
const int BrokerDetaileInfo::kFirstStockNumFieldNumber;
const int BrokerDetaileInfo::kLastStockNumFieldNumber;
const int BrokerDetaileInfo::kMainStockNumFieldNumber;
const int BrokerDetaileInfo::kAvgPEFieldNumber;
const int BrokerDetaileInfo::kAvgPBFieldNumber;
const int BrokerDetaileInfo::kTotalValueFieldNumber;
const int BrokerDetaileInfo::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerDetaileInfo::BrokerDetaileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.BrokerDetaileInfo)
}

void BrokerDetaileInfo::InitAsDefaultInstance() {
}

BrokerDetaileInfo::BrokerDetaileInfo(const BrokerDetaileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.BrokerDetaileInfo)
}

void BrokerDetaileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firststocknum_ = GOOGLE_LONGLONG(0);
  laststocknum_ = GOOGLE_LONGLONG(0);
  mainstocknum_ = GOOGLE_LONGLONG(0);
  avgpe_ = GOOGLE_LONGLONG(0);
  avgpb_ = GOOGLE_LONGLONG(0);
  totalvalue_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerDetaileInfo::~BrokerDetaileInfo() {
  // @@protoc_insertion_point(destructor:dzhyun.BrokerDetaileInfo)
  SharedDtor();
}

void BrokerDetaileInfo::SharedDtor() {
  brokername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BrokerDetaileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerDetaileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerDetaileInfo_descriptor_;
}

const BrokerDetaileInfo& BrokerDetaileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

BrokerDetaileInfo* BrokerDetaileInfo::default_instance_ = NULL;

BrokerDetaileInfo* BrokerDetaileInfo::New(::google::protobuf::Arena* arena) const {
  BrokerDetaileInfo* n = new BrokerDetaileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrokerDetaileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.BrokerDetaileInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BrokerDetaileInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BrokerDetaileInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(firststocknum_, totalvalue_);
    if (has_brokername()) {
      brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BrokerDetaileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.BrokerDetaileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokername().data(), this->brokername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.BrokerDetaileInfo.BrokerName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FirstStockNum;
        break;
      }

      // optional int64 FirstStockNum = 2;
      case 2: {
        if (tag == 16) {
         parse_FirstStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firststocknum_)));
          set_has_firststocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastStockNum;
        break;
      }

      // optional int64 LastStockNum = 3;
      case 3: {
        if (tag == 24) {
         parse_LastStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &laststocknum_)));
          set_has_laststocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MainStockNum;
        break;
      }

      // optional int64 MainStockNum = 4;
      case 4: {
        if (tag == 32) {
         parse_MainStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mainstocknum_)));
          set_has_mainstocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AvgPE;
        break;
      }

      // optional int64 AvgPE = 5;
      case 5: {
        if (tag == 40) {
         parse_AvgPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &avgpe_)));
          set_has_avgpe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AvgPB;
        break;
      }

      // optional int64 AvgPB = 6;
      case 6: {
        if (tag == 48) {
         parse_AvgPB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &avgpb_)));
          set_has_avgpb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TotalValue;
        break;
      }

      // optional int64 TotalValue = 7;
      case 7: {
        if (tag == 56) {
         parse_TotalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvalue_)));
          set_has_totalvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.BrokerStock Data = 8;
      case 8: {
        if (tag == 66) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.BrokerDetaileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.BrokerDetaileInfo)
  return false;
#undef DO_
}

void BrokerDetaileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.BrokerDetaileInfo)
  // required string BrokerName = 1;
  if (has_brokername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), this->brokername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerDetaileInfo.BrokerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->brokername(), output);
  }

  // optional int64 FirstStockNum = 2;
  if (has_firststocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->firststocknum(), output);
  }

  // optional int64 LastStockNum = 3;
  if (has_laststocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->laststocknum(), output);
  }

  // optional int64 MainStockNum = 4;
  if (has_mainstocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mainstocknum(), output);
  }

  // optional int64 AvgPE = 5;
  if (has_avgpe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->avgpe(), output);
  }

  // optional int64 AvgPB = 6;
  if (has_avgpb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->avgpb(), output);
  }

  // optional int64 TotalValue = 7;
  if (has_totalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->totalvalue(), output);
  }

  // repeated .dzhyun.BrokerStock Data = 8;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.BrokerDetaileInfo)
}

::google::protobuf::uint8* BrokerDetaileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.BrokerDetaileInfo)
  // required string BrokerName = 1;
  if (has_brokername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), this->brokername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerDetaileInfo.BrokerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokername(), target);
  }

  // optional int64 FirstStockNum = 2;
  if (has_firststocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->firststocknum(), target);
  }

  // optional int64 LastStockNum = 3;
  if (has_laststocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->laststocknum(), target);
  }

  // optional int64 MainStockNum = 4;
  if (has_mainstocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mainstocknum(), target);
  }

  // optional int64 AvgPE = 5;
  if (has_avgpe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->avgpe(), target);
  }

  // optional int64 AvgPB = 6;
  if (has_avgpb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->avgpb(), target);
  }

  // optional int64 TotalValue = 7;
  if (has_totalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->totalvalue(), target);
  }

  // repeated .dzhyun.BrokerStock Data = 8;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.BrokerDetaileInfo)
  return target;
}

int BrokerDetaileInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.BrokerDetaileInfo)
  int total_size = 0;

  // required string BrokerName = 1;
  if (has_brokername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokername());
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional int64 FirstStockNum = 2;
    if (has_firststocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firststocknum());
    }

    // optional int64 LastStockNum = 3;
    if (has_laststocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->laststocknum());
    }

    // optional int64 MainStockNum = 4;
    if (has_mainstocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mainstocknum());
    }

    // optional int64 AvgPE = 5;
    if (has_avgpe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->avgpe());
    }

    // optional int64 AvgPB = 6;
    if (has_avgpb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->avgpb());
    }

    // optional int64 TotalValue = 7;
    if (has_totalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalvalue());
    }

  }
  // repeated .dzhyun.BrokerStock Data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerDetaileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.BrokerDetaileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrokerDetaileInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerDetaileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.BrokerDetaileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.BrokerDetaileInfo)
    MergeFrom(*source);
  }
}

void BrokerDetaileInfo::MergeFrom(const BrokerDetaileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.BrokerDetaileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokername()) {
      set_has_brokername();
      brokername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokername_);
    }
    if (from.has_firststocknum()) {
      set_firststocknum(from.firststocknum());
    }
    if (from.has_laststocknum()) {
      set_laststocknum(from.laststocknum());
    }
    if (from.has_mainstocknum()) {
      set_mainstocknum(from.mainstocknum());
    }
    if (from.has_avgpe()) {
      set_avgpe(from.avgpe());
    }
    if (from.has_avgpb()) {
      set_avgpb(from.avgpb());
    }
    if (from.has_totalvalue()) {
      set_totalvalue(from.totalvalue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BrokerDetaileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.BrokerDetaileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerDetaileInfo::CopyFrom(const BrokerDetaileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.BrokerDetaileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerDetaileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void BrokerDetaileInfo::Swap(BrokerDetaileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerDetaileInfo::InternalSwap(BrokerDetaileInfo* other) {
  brokername_.Swap(&other->brokername_);
  std::swap(firststocknum_, other->firststocknum_);
  std::swap(laststocknum_, other->laststocknum_);
  std::swap(mainstocknum_, other->mainstocknum_);
  std::swap(avgpe_, other->avgpe_);
  std::swap(avgpb_, other->avgpb_);
  std::swap(totalvalue_, other->totalvalue_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrokerDetaileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerDetaileInfo_descriptor_;
  metadata.reflection = BrokerDetaileInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrokerDetaileInfo

// required string BrokerName = 1;
bool BrokerDetaileInfo::has_brokername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrokerDetaileInfo::set_has_brokername() {
  _has_bits_[0] |= 0x00000001u;
}
void BrokerDetaileInfo::clear_has_brokername() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrokerDetaileInfo::clear_brokername() {
  brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokername();
}
 const ::std::string& BrokerDetaileInfo::brokername() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.BrokerName)
  return brokername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerDetaileInfo::set_brokername(const ::std::string& value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.BrokerName)
}
 void BrokerDetaileInfo::set_brokername(const char* value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerDetaileInfo.BrokerName)
}
 void BrokerDetaileInfo::set_brokername(const char* value, size_t size) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerDetaileInfo.BrokerName)
}
 ::std::string* BrokerDetaileInfo::mutable_brokername() {
  set_has_brokername();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerDetaileInfo.BrokerName)
  return brokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrokerDetaileInfo::release_brokername() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerDetaileInfo.BrokerName)
  clear_has_brokername();
  return brokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerDetaileInfo::set_allocated_brokername(::std::string* brokername) {
  if (brokername != NULL) {
    set_has_brokername();
  } else {
    clear_has_brokername();
  }
  brokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokername);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerDetaileInfo.BrokerName)
}

// optional int64 FirstStockNum = 2;
bool BrokerDetaileInfo::has_firststocknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrokerDetaileInfo::set_has_firststocknum() {
  _has_bits_[0] |= 0x00000002u;
}
void BrokerDetaileInfo::clear_has_firststocknum() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrokerDetaileInfo::clear_firststocknum() {
  firststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_firststocknum();
}
 ::google::protobuf::int64 BrokerDetaileInfo::firststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.FirstStockNum)
  return firststocknum_;
}
 void BrokerDetaileInfo::set_firststocknum(::google::protobuf::int64 value) {
  set_has_firststocknum();
  firststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.FirstStockNum)
}

// optional int64 LastStockNum = 3;
bool BrokerDetaileInfo::has_laststocknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrokerDetaileInfo::set_has_laststocknum() {
  _has_bits_[0] |= 0x00000004u;
}
void BrokerDetaileInfo::clear_has_laststocknum() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrokerDetaileInfo::clear_laststocknum() {
  laststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_laststocknum();
}
 ::google::protobuf::int64 BrokerDetaileInfo::laststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.LastStockNum)
  return laststocknum_;
}
 void BrokerDetaileInfo::set_laststocknum(::google::protobuf::int64 value) {
  set_has_laststocknum();
  laststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.LastStockNum)
}

// optional int64 MainStockNum = 4;
bool BrokerDetaileInfo::has_mainstocknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BrokerDetaileInfo::set_has_mainstocknum() {
  _has_bits_[0] |= 0x00000008u;
}
void BrokerDetaileInfo::clear_has_mainstocknum() {
  _has_bits_[0] &= ~0x00000008u;
}
void BrokerDetaileInfo::clear_mainstocknum() {
  mainstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_mainstocknum();
}
 ::google::protobuf::int64 BrokerDetaileInfo::mainstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.MainStockNum)
  return mainstocknum_;
}
 void BrokerDetaileInfo::set_mainstocknum(::google::protobuf::int64 value) {
  set_has_mainstocknum();
  mainstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.MainStockNum)
}

// optional int64 AvgPE = 5;
bool BrokerDetaileInfo::has_avgpe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BrokerDetaileInfo::set_has_avgpe() {
  _has_bits_[0] |= 0x00000010u;
}
void BrokerDetaileInfo::clear_has_avgpe() {
  _has_bits_[0] &= ~0x00000010u;
}
void BrokerDetaileInfo::clear_avgpe() {
  avgpe_ = GOOGLE_LONGLONG(0);
  clear_has_avgpe();
}
 ::google::protobuf::int64 BrokerDetaileInfo::avgpe() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.AvgPE)
  return avgpe_;
}
 void BrokerDetaileInfo::set_avgpe(::google::protobuf::int64 value) {
  set_has_avgpe();
  avgpe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.AvgPE)
}

// optional int64 AvgPB = 6;
bool BrokerDetaileInfo::has_avgpb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BrokerDetaileInfo::set_has_avgpb() {
  _has_bits_[0] |= 0x00000020u;
}
void BrokerDetaileInfo::clear_has_avgpb() {
  _has_bits_[0] &= ~0x00000020u;
}
void BrokerDetaileInfo::clear_avgpb() {
  avgpb_ = GOOGLE_LONGLONG(0);
  clear_has_avgpb();
}
 ::google::protobuf::int64 BrokerDetaileInfo::avgpb() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.AvgPB)
  return avgpb_;
}
 void BrokerDetaileInfo::set_avgpb(::google::protobuf::int64 value) {
  set_has_avgpb();
  avgpb_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.AvgPB)
}

// optional int64 TotalValue = 7;
bool BrokerDetaileInfo::has_totalvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BrokerDetaileInfo::set_has_totalvalue() {
  _has_bits_[0] |= 0x00000040u;
}
void BrokerDetaileInfo::clear_has_totalvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
void BrokerDetaileInfo::clear_totalvalue() {
  totalvalue_ = GOOGLE_LONGLONG(0);
  clear_has_totalvalue();
}
 ::google::protobuf::int64 BrokerDetaileInfo::totalvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.TotalValue)
  return totalvalue_;
}
 void BrokerDetaileInfo::set_totalvalue(::google::protobuf::int64 value) {
  set_has_totalvalue();
  totalvalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.TotalValue)
}

// repeated .dzhyun.BrokerStock Data = 8;
int BrokerDetaileInfo::data_size() const {
  return data_.size();
}
void BrokerDetaileInfo::clear_data() {
  data_.Clear();
}
const ::dzhyun::BrokerStock& BrokerDetaileInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.Data)
  return data_.Get(index);
}
::dzhyun::BrokerStock* BrokerDetaileInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerDetaileInfo.Data)
  return data_.Mutable(index);
}
::dzhyun::BrokerStock* BrokerDetaileInfo::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.BrokerDetaileInfo.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock >*
BrokerDetaileInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.BrokerDetaileInfo.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock >&
BrokerDetaileInfo::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.BrokerDetaileInfo.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerInfo::kBrokerNameFieldNumber;
const int BrokerInfo::kBeginDateFieldNumber;
const int BrokerInfo::kInitAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerInfo::BrokerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.BrokerInfo)
}

void BrokerInfo::InitAsDefaultInstance() {
}

BrokerInfo::BrokerInfo(const BrokerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.BrokerInfo)
}

void BrokerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begindate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initamount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerInfo::~BrokerInfo() {
  // @@protoc_insertion_point(destructor:dzhyun.BrokerInfo)
  SharedDtor();
}

void BrokerInfo::SharedDtor() {
  brokername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begindate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BrokerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerInfo_descriptor_;
}

const BrokerInfo& BrokerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

BrokerInfo* BrokerInfo::default_instance_ = NULL;

BrokerInfo* BrokerInfo::New(::google::protobuf::Arena* arena) const {
  BrokerInfo* n = new BrokerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrokerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.BrokerInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_brokername()) {
      brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_begindate()) {
      begindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    initamount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BrokerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.BrokerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokername().data(), this->brokername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.BrokerInfo.BrokerName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BeginDate;
        break;
      }

      // required string BeginDate = 2;
      case 2: {
        if (tag == 18) {
         parse_BeginDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begindate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begindate().data(), this->begindate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.BrokerInfo.BeginDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_InitAmount;
        break;
      }

      // optional int64 InitAmount = 3;
      case 3: {
        if (tag == 24) {
         parse_InitAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &initamount_)));
          set_has_initamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.BrokerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.BrokerInfo)
  return false;
#undef DO_
}

void BrokerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.BrokerInfo)
  // required string BrokerName = 1;
  if (has_brokername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), this->brokername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerInfo.BrokerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->brokername(), output);
  }

  // required string BeginDate = 2;
  if (has_begindate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begindate().data(), this->begindate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerInfo.BeginDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->begindate(), output);
  }

  // optional int64 InitAmount = 3;
  if (has_initamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->initamount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.BrokerInfo)
}

::google::protobuf::uint8* BrokerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.BrokerInfo)
  // required string BrokerName = 1;
  if (has_brokername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), this->brokername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerInfo.BrokerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokername(), target);
  }

  // required string BeginDate = 2;
  if (has_begindate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begindate().data(), this->begindate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerInfo.BeginDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->begindate(), target);
  }

  // optional int64 InitAmount = 3;
  if (has_initamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->initamount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.BrokerInfo)
  return target;
}

int BrokerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dzhyun.BrokerInfo)
  int total_size = 0;

  if (has_brokername()) {
    // required string BrokerName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokername());
  }

  if (has_begindate()) {
    // required string BeginDate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begindate());
  }

  return total_size;
}
int BrokerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.BrokerInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string BrokerName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokername());

    // required string BeginDate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begindate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 InitAmount = 3;
  if (has_initamount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->initamount());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.BrokerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrokerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.BrokerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.BrokerInfo)
    MergeFrom(*source);
  }
}

void BrokerInfo::MergeFrom(const BrokerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.BrokerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokername()) {
      set_has_brokername();
      brokername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokername_);
    }
    if (from.has_begindate()) {
      set_has_begindate();
      begindate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begindate_);
    }
    if (from.has_initamount()) {
      set_initamount(from.initamount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BrokerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.BrokerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerInfo::CopyFrom(const BrokerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.BrokerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BrokerInfo::Swap(BrokerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerInfo::InternalSwap(BrokerInfo* other) {
  brokername_.Swap(&other->brokername_);
  begindate_.Swap(&other->begindate_);
  std::swap(initamount_, other->initamount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrokerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerInfo_descriptor_;
  metadata.reflection = BrokerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrokerInfo

// required string BrokerName = 1;
bool BrokerInfo::has_brokername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrokerInfo::set_has_brokername() {
  _has_bits_[0] |= 0x00000001u;
}
void BrokerInfo::clear_has_brokername() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrokerInfo::clear_brokername() {
  brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokername();
}
 const ::std::string& BrokerInfo::brokername() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerInfo.BrokerName)
  return brokername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerInfo::set_brokername(const ::std::string& value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerInfo.BrokerName)
}
 void BrokerInfo::set_brokername(const char* value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerInfo.BrokerName)
}
 void BrokerInfo::set_brokername(const char* value, size_t size) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerInfo.BrokerName)
}
 ::std::string* BrokerInfo::mutable_brokername() {
  set_has_brokername();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerInfo.BrokerName)
  return brokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrokerInfo::release_brokername() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerInfo.BrokerName)
  clear_has_brokername();
  return brokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerInfo::set_allocated_brokername(::std::string* brokername) {
  if (brokername != NULL) {
    set_has_brokername();
  } else {
    clear_has_brokername();
  }
  brokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokername);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerInfo.BrokerName)
}

// required string BeginDate = 2;
bool BrokerInfo::has_begindate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrokerInfo::set_has_begindate() {
  _has_bits_[0] |= 0x00000002u;
}
void BrokerInfo::clear_has_begindate() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrokerInfo::clear_begindate() {
  begindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begindate();
}
 const ::std::string& BrokerInfo::begindate() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerInfo.BeginDate)
  return begindate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerInfo::set_begindate(const ::std::string& value) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerInfo.BeginDate)
}
 void BrokerInfo::set_begindate(const char* value) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerInfo.BeginDate)
}
 void BrokerInfo::set_begindate(const char* value, size_t size) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerInfo.BeginDate)
}
 ::std::string* BrokerInfo::mutable_begindate() {
  set_has_begindate();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerInfo.BeginDate)
  return begindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrokerInfo::release_begindate() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerInfo.BeginDate)
  clear_has_begindate();
  return begindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerInfo::set_allocated_begindate(::std::string* begindate) {
  if (begindate != NULL) {
    set_has_begindate();
  } else {
    clear_has_begindate();
  }
  begindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begindate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerInfo.BeginDate)
}

// optional int64 InitAmount = 3;
bool BrokerInfo::has_initamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrokerInfo::set_has_initamount() {
  _has_bits_[0] |= 0x00000004u;
}
void BrokerInfo::clear_has_initamount() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrokerInfo::clear_initamount() {
  initamount_ = GOOGLE_LONGLONG(0);
  clear_has_initamount();
}
 ::google::protobuf::int64 BrokerInfo::initamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerInfo.InitAmount)
  return initamount_;
}
 void BrokerInfo::set_initamount(::google::protobuf::int64 value) {
  set_has_initamount();
  initamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerInfo.InitAmount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockBrokerInfo::kStockCodeFieldNumber;
const int StockBrokerInfo::kStockNameFieldNumber;
const int StockBrokerInfo::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockBrokerInfo::StockBrokerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.StockBrokerInfo)
}

void StockBrokerInfo::InitAsDefaultInstance() {
}

StockBrokerInfo::StockBrokerInfo(const StockBrokerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.StockBrokerInfo)
}

void StockBrokerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockBrokerInfo::~StockBrokerInfo() {
  // @@protoc_insertion_point(destructor:dzhyun.StockBrokerInfo)
  SharedDtor();
}

void StockBrokerInfo::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockBrokerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockBrokerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockBrokerInfo_descriptor_;
}

const StockBrokerInfo& StockBrokerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

StockBrokerInfo* StockBrokerInfo::default_instance_ = NULL;

StockBrokerInfo* StockBrokerInfo::New(::google::protobuf::Arena* arena) const {
  StockBrokerInfo* n = new StockBrokerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockBrokerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.StockBrokerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockBrokerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.StockBrokerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.StockBrokerInfo.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.StockBrokerInfo.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.BrokerInfo Data = 3;
      case 3: {
        if (tag == 26) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.StockBrokerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.StockBrokerInfo)
  return false;
#undef DO_
}

void StockBrokerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.StockBrokerInfo)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockBrokerInfo.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockBrokerInfo.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // repeated .dzhyun.BrokerInfo Data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.StockBrokerInfo)
}

::google::protobuf::uint8* StockBrokerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.StockBrokerInfo)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockBrokerInfo.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.StockBrokerInfo.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // repeated .dzhyun.BrokerInfo Data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.StockBrokerInfo)
  return target;
}

int StockBrokerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.StockBrokerInfo)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  // optional string StockName = 2;
  if (has_stockname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockname());
  }

  // repeated .dzhyun.BrokerInfo Data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockBrokerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.StockBrokerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockBrokerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockBrokerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.StockBrokerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.StockBrokerInfo)
    MergeFrom(*source);
  }
}

void StockBrokerInfo::MergeFrom(const StockBrokerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.StockBrokerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockBrokerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.StockBrokerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockBrokerInfo::CopyFrom(const StockBrokerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.StockBrokerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockBrokerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void StockBrokerInfo::Swap(StockBrokerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockBrokerInfo::InternalSwap(StockBrokerInfo* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockBrokerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockBrokerInfo_descriptor_;
  metadata.reflection = StockBrokerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockBrokerInfo

// required string StockCode = 1;
bool StockBrokerInfo::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockBrokerInfo::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void StockBrokerInfo::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockBrokerInfo::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& StockBrokerInfo::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockBrokerInfo.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockBrokerInfo::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockBrokerInfo.StockCode)
}
 void StockBrokerInfo::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockBrokerInfo.StockCode)
}
 void StockBrokerInfo::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockBrokerInfo.StockCode)
}
 ::std::string* StockBrokerInfo::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockBrokerInfo.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockBrokerInfo::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.StockBrokerInfo.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockBrokerInfo::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockBrokerInfo.StockCode)
}

// optional string StockName = 2;
bool StockBrokerInfo::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockBrokerInfo::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void StockBrokerInfo::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockBrokerInfo::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& StockBrokerInfo::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockBrokerInfo.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockBrokerInfo::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockBrokerInfo.StockName)
}
 void StockBrokerInfo::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockBrokerInfo.StockName)
}
 void StockBrokerInfo::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockBrokerInfo.StockName)
}
 ::std::string* StockBrokerInfo::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockBrokerInfo.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockBrokerInfo::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.StockBrokerInfo.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockBrokerInfo::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockBrokerInfo.StockName)
}

// repeated .dzhyun.BrokerInfo Data = 3;
int StockBrokerInfo::data_size() const {
  return data_.size();
}
void StockBrokerInfo::clear_data() {
  data_.Clear();
}
const ::dzhyun::BrokerInfo& StockBrokerInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockBrokerInfo.Data)
  return data_.Get(index);
}
::dzhyun::BrokerInfo* StockBrokerInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockBrokerInfo.Data)
  return data_.Mutable(index);
}
::dzhyun::BrokerInfo* StockBrokerInfo::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockBrokerInfo.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo >*
StockBrokerInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockBrokerInfo.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo >&
StockBrokerInfo::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockBrokerInfo.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssueDetaileInfo::kStockCodeFieldNumber;
const int IssueDetaileInfo::kStockNameFieldNumber;
const int IssueDetaileInfo::kIssueAmountFieldNumber;
const int IssueDetaileInfo::kCollectCapitalFieldNumber;
const int IssueDetaileInfo::kIssuePriceFieldNumber;
const int IssueDetaileInfo::kLastCloseFieldNumber;
const int IssueDetaileInfo::kIssuePEFieldNumber;
const int IssueDetaileInfo::kOverflowRatioFieldNumber;
const int IssueDetaileInfo::kProjectAdvanceFieldNumber;
const int IssueDetaileInfo::kIssueDateFieldNumber;
const int IssueDetaileInfo::kIssueTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssueDetaileInfo::IssueDetaileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.IssueDetaileInfo)
}

void IssueDetaileInfo::InitAsDefaultInstance() {
}

IssueDetaileInfo::IssueDetaileInfo(const IssueDetaileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.IssueDetaileInfo)
}

void IssueDetaileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issueamount_ = GOOGLE_LONGLONG(0);
  collectcapital_ = GOOGLE_LONGLONG(0);
  issueprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastclose_ = GOOGLE_LONGLONG(0);
  issuepe_ = GOOGLE_LONGLONG(0);
  overflowratio_ = GOOGLE_LONGLONG(0);
  projectadvance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuetarget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IssueDetaileInfo::~IssueDetaileInfo() {
  // @@protoc_insertion_point(destructor:dzhyun.IssueDetaileInfo)
  SharedDtor();
}

void IssueDetaileInfo::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issueprice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectadvance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuetarget_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IssueDetaileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueDetaileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IssueDetaileInfo_descriptor_;
}

const IssueDetaileInfo& IssueDetaileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

IssueDetaileInfo* IssueDetaileInfo::default_instance_ = NULL;

IssueDetaileInfo* IssueDetaileInfo::New(::google::protobuf::Arena* arena) const {
  IssueDetaileInfo* n = new IssueDetaileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IssueDetaileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.IssueDetaileInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IssueDetaileInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IssueDetaileInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(issueamount_, collectcapital_);
    ZR_(lastclose_, overflowratio_);
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_issueprice()) {
      issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_projectadvance()) {
      projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_issuedate()) {
      issuedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_issuetarget()) {
      issuetarget_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IssueDetaileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.IssueDetaileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueDetaileInfo.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueDetaileInfo.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IssueAmount;
        break;
      }

      // optional int64 IssueAmount = 3;
      case 3: {
        if (tag == 24) {
         parse_IssueAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &issueamount_)));
          set_has_issueamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CollectCapital;
        break;
      }

      // optional int64 CollectCapital = 4;
      case 4: {
        if (tag == 32) {
         parse_CollectCapital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectcapital_)));
          set_has_collectcapital();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_IssuePrice;
        break;
      }

      // optional string IssuePrice = 5;
      case 5: {
        if (tag == 42) {
         parse_IssuePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issueprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issueprice().data(), this->issueprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueDetaileInfo.IssuePrice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LastClose;
        break;
      }

      // optional int64 LastClose = 6;
      case 6: {
        if (tag == 48) {
         parse_LastClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastclose_)));
          set_has_lastclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IssuePE;
        break;
      }

      // optional int64 IssuePE = 7;
      case 7: {
        if (tag == 56) {
         parse_IssuePE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &issuepe_)));
          set_has_issuepe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OverflowRatio;
        break;
      }

      // optional int64 OverflowRatio = 8;
      case 8: {
        if (tag == 64) {
         parse_OverflowRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &overflowratio_)));
          set_has_overflowratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ProjectAdvance;
        break;
      }

      // optional string ProjectAdvance = 9;
      case 9: {
        if (tag == 74) {
         parse_ProjectAdvance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectadvance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projectadvance().data(), this->projectadvance().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueDetaileInfo.ProjectAdvance");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_IssueDate;
        break;
      }

      // optional string IssueDate = 10;
      case 10: {
        if (tag == 82) {
         parse_IssueDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuedate().data(), this->issuedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueDetaileInfo.IssueDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_IssueTarget;
        break;
      }

      // optional string IssueTarget = 11;
      case 11: {
        if (tag == 90) {
         parse_IssueTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuetarget()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuetarget().data(), this->issuetarget().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueDetaileInfo.IssueTarget");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.IssueDetaileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.IssueDetaileInfo)
  return false;
#undef DO_
}

void IssueDetaileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.IssueDetaileInfo)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional int64 IssueAmount = 3;
  if (has_issueamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->issueamount(), output);
  }

  // optional int64 CollectCapital = 4;
  if (has_collectcapital()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->collectcapital(), output);
  }

  // optional string IssuePrice = 5;
  if (has_issueprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueprice().data(), this->issueprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.IssuePrice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->issueprice(), output);
  }

  // optional int64 LastClose = 6;
  if (has_lastclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lastclose(), output);
  }

  // optional int64 IssuePE = 7;
  if (has_issuepe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->issuepe(), output);
  }

  // optional int64 OverflowRatio = 8;
  if (has_overflowratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->overflowratio(), output);
  }

  // optional string ProjectAdvance = 9;
  if (has_projectadvance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projectadvance().data(), this->projectadvance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.ProjectAdvance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->projectadvance(), output);
  }

  // optional string IssueDate = 10;
  if (has_issuedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuedate().data(), this->issuedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.IssueDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->issuedate(), output);
  }

  // optional string IssueTarget = 11;
  if (has_issuetarget()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuetarget().data(), this->issuetarget().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.IssueTarget");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->issuetarget(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.IssueDetaileInfo)
}

::google::protobuf::uint8* IssueDetaileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.IssueDetaileInfo)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional int64 IssueAmount = 3;
  if (has_issueamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->issueamount(), target);
  }

  // optional int64 CollectCapital = 4;
  if (has_collectcapital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->collectcapital(), target);
  }

  // optional string IssuePrice = 5;
  if (has_issueprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueprice().data(), this->issueprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.IssuePrice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->issueprice(), target);
  }

  // optional int64 LastClose = 6;
  if (has_lastclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lastclose(), target);
  }

  // optional int64 IssuePE = 7;
  if (has_issuepe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->issuepe(), target);
  }

  // optional int64 OverflowRatio = 8;
  if (has_overflowratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->overflowratio(), target);
  }

  // optional string ProjectAdvance = 9;
  if (has_projectadvance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projectadvance().data(), this->projectadvance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.ProjectAdvance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->projectadvance(), target);
  }

  // optional string IssueDate = 10;
  if (has_issuedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuedate().data(), this->issuedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.IssueDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->issuedate(), target);
  }

  // optional string IssueTarget = 11;
  if (has_issuetarget()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuetarget().data(), this->issuetarget().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueDetaileInfo.IssueTarget");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->issuetarget(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.IssueDetaileInfo)
  return target;
}

int IssueDetaileInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.IssueDetaileInfo)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional int64 IssueAmount = 3;
    if (has_issueamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->issueamount());
    }

    // optional int64 CollectCapital = 4;
    if (has_collectcapital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->collectcapital());
    }

    // optional string IssuePrice = 5;
    if (has_issueprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issueprice());
    }

    // optional int64 LastClose = 6;
    if (has_lastclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastclose());
    }

    // optional int64 IssuePE = 7;
    if (has_issuepe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->issuepe());
    }

    // optional int64 OverflowRatio = 8;
    if (has_overflowratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->overflowratio());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string ProjectAdvance = 9;
    if (has_projectadvance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectadvance());
    }

    // optional string IssueDate = 10;
    if (has_issuedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuedate());
    }

    // optional string IssueTarget = 11;
    if (has_issuetarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuetarget());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueDetaileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.IssueDetaileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IssueDetaileInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IssueDetaileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.IssueDetaileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.IssueDetaileInfo)
    MergeFrom(*source);
  }
}

void IssueDetaileInfo::MergeFrom(const IssueDetaileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.IssueDetaileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_issueamount()) {
      set_issueamount(from.issueamount());
    }
    if (from.has_collectcapital()) {
      set_collectcapital(from.collectcapital());
    }
    if (from.has_issueprice()) {
      set_has_issueprice();
      issueprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issueprice_);
    }
    if (from.has_lastclose()) {
      set_lastclose(from.lastclose());
    }
    if (from.has_issuepe()) {
      set_issuepe(from.issuepe());
    }
    if (from.has_overflowratio()) {
      set_overflowratio(from.overflowratio());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_projectadvance()) {
      set_has_projectadvance();
      projectadvance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectadvance_);
    }
    if (from.has_issuedate()) {
      set_has_issuedate();
      issuedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuedate_);
    }
    if (from.has_issuetarget()) {
      set_has_issuetarget();
      issuetarget_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuetarget_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IssueDetaileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.IssueDetaileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueDetaileInfo::CopyFrom(const IssueDetaileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.IssueDetaileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueDetaileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IssueDetaileInfo::Swap(IssueDetaileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssueDetaileInfo::InternalSwap(IssueDetaileInfo* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  std::swap(issueamount_, other->issueamount_);
  std::swap(collectcapital_, other->collectcapital_);
  issueprice_.Swap(&other->issueprice_);
  std::swap(lastclose_, other->lastclose_);
  std::swap(issuepe_, other->issuepe_);
  std::swap(overflowratio_, other->overflowratio_);
  projectadvance_.Swap(&other->projectadvance_);
  issuedate_.Swap(&other->issuedate_);
  issuetarget_.Swap(&other->issuetarget_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IssueDetaileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IssueDetaileInfo_descriptor_;
  metadata.reflection = IssueDetaileInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IssueDetaileInfo

// required string StockCode = 1;
bool IssueDetaileInfo::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IssueDetaileInfo::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void IssueDetaileInfo::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void IssueDetaileInfo::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& IssueDetaileInfo::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.StockCode)
}
 void IssueDetaileInfo::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.StockCode)
}
 void IssueDetaileInfo::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.StockCode)
}
 ::std::string* IssueDetaileInfo::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueDetaileInfo::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.StockCode)
}

// optional string StockName = 2;
bool IssueDetaileInfo::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IssueDetaileInfo::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void IssueDetaileInfo::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void IssueDetaileInfo::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& IssueDetaileInfo::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.StockName)
}
 void IssueDetaileInfo::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.StockName)
}
 void IssueDetaileInfo::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.StockName)
}
 ::std::string* IssueDetaileInfo::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueDetaileInfo::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.StockName)
}

// optional int64 IssueAmount = 3;
bool IssueDetaileInfo::has_issueamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IssueDetaileInfo::set_has_issueamount() {
  _has_bits_[0] |= 0x00000004u;
}
void IssueDetaileInfo::clear_has_issueamount() {
  _has_bits_[0] &= ~0x00000004u;
}
void IssueDetaileInfo::clear_issueamount() {
  issueamount_ = GOOGLE_LONGLONG(0);
  clear_has_issueamount();
}
 ::google::protobuf::int64 IssueDetaileInfo::issueamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssueAmount)
  return issueamount_;
}
 void IssueDetaileInfo::set_issueamount(::google::protobuf::int64 value) {
  set_has_issueamount();
  issueamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssueAmount)
}

// optional int64 CollectCapital = 4;
bool IssueDetaileInfo::has_collectcapital() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IssueDetaileInfo::set_has_collectcapital() {
  _has_bits_[0] |= 0x00000008u;
}
void IssueDetaileInfo::clear_has_collectcapital() {
  _has_bits_[0] &= ~0x00000008u;
}
void IssueDetaileInfo::clear_collectcapital() {
  collectcapital_ = GOOGLE_LONGLONG(0);
  clear_has_collectcapital();
}
 ::google::protobuf::int64 IssueDetaileInfo::collectcapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.CollectCapital)
  return collectcapital_;
}
 void IssueDetaileInfo::set_collectcapital(::google::protobuf::int64 value) {
  set_has_collectcapital();
  collectcapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.CollectCapital)
}

// optional string IssuePrice = 5;
bool IssueDetaileInfo::has_issueprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IssueDetaileInfo::set_has_issueprice() {
  _has_bits_[0] |= 0x00000010u;
}
void IssueDetaileInfo::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000010u;
}
void IssueDetaileInfo::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
 const ::std::string& IssueDetaileInfo::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssuePrice)
}
 void IssueDetaileInfo::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.IssuePrice)
}
 void IssueDetaileInfo::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.IssuePrice)
}
 ::std::string* IssueDetaileInfo::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueDetaileInfo::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.IssuePrice)
}

// optional int64 LastClose = 6;
bool IssueDetaileInfo::has_lastclose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IssueDetaileInfo::set_has_lastclose() {
  _has_bits_[0] |= 0x00000020u;
}
void IssueDetaileInfo::clear_has_lastclose() {
  _has_bits_[0] &= ~0x00000020u;
}
void IssueDetaileInfo::clear_lastclose() {
  lastclose_ = GOOGLE_LONGLONG(0);
  clear_has_lastclose();
}
 ::google::protobuf::int64 IssueDetaileInfo::lastclose() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.LastClose)
  return lastclose_;
}
 void IssueDetaileInfo::set_lastclose(::google::protobuf::int64 value) {
  set_has_lastclose();
  lastclose_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.LastClose)
}

// optional int64 IssuePE = 7;
bool IssueDetaileInfo::has_issuepe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IssueDetaileInfo::set_has_issuepe() {
  _has_bits_[0] |= 0x00000040u;
}
void IssueDetaileInfo::clear_has_issuepe() {
  _has_bits_[0] &= ~0x00000040u;
}
void IssueDetaileInfo::clear_issuepe() {
  issuepe_ = GOOGLE_LONGLONG(0);
  clear_has_issuepe();
}
 ::google::protobuf::int64 IssueDetaileInfo::issuepe() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssuePE)
  return issuepe_;
}
 void IssueDetaileInfo::set_issuepe(::google::protobuf::int64 value) {
  set_has_issuepe();
  issuepe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssuePE)
}

// optional int64 OverflowRatio = 8;
bool IssueDetaileInfo::has_overflowratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IssueDetaileInfo::set_has_overflowratio() {
  _has_bits_[0] |= 0x00000080u;
}
void IssueDetaileInfo::clear_has_overflowratio() {
  _has_bits_[0] &= ~0x00000080u;
}
void IssueDetaileInfo::clear_overflowratio() {
  overflowratio_ = GOOGLE_LONGLONG(0);
  clear_has_overflowratio();
}
 ::google::protobuf::int64 IssueDetaileInfo::overflowratio() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.OverflowRatio)
  return overflowratio_;
}
 void IssueDetaileInfo::set_overflowratio(::google::protobuf::int64 value) {
  set_has_overflowratio();
  overflowratio_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.OverflowRatio)
}

// optional string ProjectAdvance = 9;
bool IssueDetaileInfo::has_projectadvance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IssueDetaileInfo::set_has_projectadvance() {
  _has_bits_[0] |= 0x00000100u;
}
void IssueDetaileInfo::clear_has_projectadvance() {
  _has_bits_[0] &= ~0x00000100u;
}
void IssueDetaileInfo::clear_projectadvance() {
  projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projectadvance();
}
 const ::std::string& IssueDetaileInfo::projectadvance() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.ProjectAdvance)
  return projectadvance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_projectadvance(const ::std::string& value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.ProjectAdvance)
}
 void IssueDetaileInfo::set_projectadvance(const char* value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.ProjectAdvance)
}
 void IssueDetaileInfo::set_projectadvance(const char* value, size_t size) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.ProjectAdvance)
}
 ::std::string* IssueDetaileInfo::mutable_projectadvance() {
  set_has_projectadvance();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.ProjectAdvance)
  return projectadvance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueDetaileInfo::release_projectadvance() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.ProjectAdvance)
  clear_has_projectadvance();
  return projectadvance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_allocated_projectadvance(::std::string* projectadvance) {
  if (projectadvance != NULL) {
    set_has_projectadvance();
  } else {
    clear_has_projectadvance();
  }
  projectadvance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectadvance);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.ProjectAdvance)
}

// optional string IssueDate = 10;
bool IssueDetaileInfo::has_issuedate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void IssueDetaileInfo::set_has_issuedate() {
  _has_bits_[0] |= 0x00000200u;
}
void IssueDetaileInfo::clear_has_issuedate() {
  _has_bits_[0] &= ~0x00000200u;
}
void IssueDetaileInfo::clear_issuedate() {
  issuedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuedate();
}
 const ::std::string& IssueDetaileInfo::issuedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssueDate)
  return issuedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_issuedate(const ::std::string& value) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssueDate)
}
 void IssueDetaileInfo::set_issuedate(const char* value) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.IssueDate)
}
 void IssueDetaileInfo::set_issuedate(const char* value, size_t size) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.IssueDate)
}
 ::std::string* IssueDetaileInfo::mutable_issuedate() {
  set_has_issuedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.IssueDate)
  return issuedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueDetaileInfo::release_issuedate() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.IssueDate)
  clear_has_issuedate();
  return issuedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_allocated_issuedate(::std::string* issuedate) {
  if (issuedate != NULL) {
    set_has_issuedate();
  } else {
    clear_has_issuedate();
  }
  issuedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.IssueDate)
}

// optional string IssueTarget = 11;
bool IssueDetaileInfo::has_issuetarget() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void IssueDetaileInfo::set_has_issuetarget() {
  _has_bits_[0] |= 0x00000400u;
}
void IssueDetaileInfo::clear_has_issuetarget() {
  _has_bits_[0] &= ~0x00000400u;
}
void IssueDetaileInfo::clear_issuetarget() {
  issuetarget_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuetarget();
}
 const ::std::string& IssueDetaileInfo::issuetarget() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssueTarget)
  return issuetarget_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_issuetarget(const ::std::string& value) {
  set_has_issuetarget();
  issuetarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssueTarget)
}
 void IssueDetaileInfo::set_issuetarget(const char* value) {
  set_has_issuetarget();
  issuetarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.IssueTarget)
}
 void IssueDetaileInfo::set_issuetarget(const char* value, size_t size) {
  set_has_issuetarget();
  issuetarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.IssueTarget)
}
 ::std::string* IssueDetaileInfo::mutable_issuetarget() {
  set_has_issuetarget();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.IssueTarget)
  return issuetarget_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueDetaileInfo::release_issuetarget() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.IssueTarget)
  clear_has_issuetarget();
  return issuetarget_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueDetaileInfo::set_allocated_issuetarget(::std::string* issuetarget) {
  if (issuetarget != NULL) {
    set_has_issuetarget();
  } else {
    clear_has_issuetarget();
  }
  issuetarget_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuetarget);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.IssueTarget)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssueStock::kStockCodeFieldNumber;
const int IssueStock::kStockNameFieldNumber;
const int IssueStock::kNoticeDateFieldNumber;
const int IssueStock::kIssueScaleFieldNumber;
const int IssueStock::kIssuePriceFieldNumber;
const int IssueStock::kProjectAdvanceFieldNumber;
const int IssueStock::kPEFieldNumber;
const int IssueStock::kLatestNoticeDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssueStock::IssueStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.IssueStock)
}

void IssueStock::InitAsDefaultInstance() {
}

IssueStock::IssueStock(const IssueStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.IssueStock)
}

void IssueStock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noticedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuescale_ = GOOGLE_LONGLONG(0);
  issueprice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectadvance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pe_ = GOOGLE_LONGLONG(0);
  latestnoticedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IssueStock::~IssueStock() {
  // @@protoc_insertion_point(destructor:dzhyun.IssueStock)
  SharedDtor();
}

void IssueStock::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noticedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issueprice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectadvance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latestnoticedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IssueStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IssueStock_descriptor_;
}

const IssueStock& IssueStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

IssueStock* IssueStock::default_instance_ = NULL;

IssueStock* IssueStock::New(::google::protobuf::Arena* arena) const {
  IssueStock* n = new IssueStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IssueStock::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.IssueStock)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_noticedate()) {
      noticedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    issuescale_ = GOOGLE_LONGLONG(0);
    if (has_issueprice()) {
      issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_projectadvance()) {
      projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pe_ = GOOGLE_LONGLONG(0);
    if (has_latestnoticedate()) {
      latestnoticedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IssueStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.IssueStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueStock.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueStock.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_NoticeDate;
        break;
      }

      // optional string NoticeDate = 3;
      case 3: {
        if (tag == 26) {
         parse_NoticeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noticedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->noticedate().data(), this->noticedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueStock.NoticeDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IssueScale;
        break;
      }

      // optional int64 IssueScale = 4;
      case 4: {
        if (tag == 32) {
         parse_IssueScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &issuescale_)));
          set_has_issuescale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_IssuePrice;
        break;
      }

      // optional string IssuePrice = 5;
      case 5: {
        if (tag == 42) {
         parse_IssuePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issueprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issueprice().data(), this->issueprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueStock.IssuePrice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ProjectAdvance;
        break;
      }

      // optional string ProjectAdvance = 6;
      case 6: {
        if (tag == 50) {
         parse_ProjectAdvance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectadvance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projectadvance().data(), this->projectadvance().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueStock.ProjectAdvance");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PE;
        break;
      }

      // optional int64 PE = 7;
      case 7: {
        if (tag == 56) {
         parse_PE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pe_)));
          set_has_pe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LatestNoticeDate;
        break;
      }

      // optional string LatestNoticeDate = 8;
      case 8: {
        if (tag == 66) {
         parse_LatestNoticeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latestnoticedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latestnoticedate().data(), this->latestnoticedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.IssueStock.LatestNoticeDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.IssueStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.IssueStock)
  return false;
#undef DO_
}

void IssueStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.IssueStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional string NoticeDate = 3;
  if (has_noticedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noticedate().data(), this->noticedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.NoticeDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->noticedate(), output);
  }

  // optional int64 IssueScale = 4;
  if (has_issuescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->issuescale(), output);
  }

  // optional string IssuePrice = 5;
  if (has_issueprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueprice().data(), this->issueprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.IssuePrice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->issueprice(), output);
  }

  // optional string ProjectAdvance = 6;
  if (has_projectadvance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projectadvance().data(), this->projectadvance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.ProjectAdvance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->projectadvance(), output);
  }

  // optional int64 PE = 7;
  if (has_pe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pe(), output);
  }

  // optional string LatestNoticeDate = 8;
  if (has_latestnoticedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latestnoticedate().data(), this->latestnoticedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.LatestNoticeDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->latestnoticedate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.IssueStock)
}

::google::protobuf::uint8* IssueStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.IssueStock)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional string NoticeDate = 3;
  if (has_noticedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noticedate().data(), this->noticedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.NoticeDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->noticedate(), target);
  }

  // optional int64 IssueScale = 4;
  if (has_issuescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->issuescale(), target);
  }

  // optional string IssuePrice = 5;
  if (has_issueprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueprice().data(), this->issueprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.IssuePrice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->issueprice(), target);
  }

  // optional string ProjectAdvance = 6;
  if (has_projectadvance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projectadvance().data(), this->projectadvance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.ProjectAdvance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->projectadvance(), target);
  }

  // optional int64 PE = 7;
  if (has_pe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->pe(), target);
  }

  // optional string LatestNoticeDate = 8;
  if (has_latestnoticedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latestnoticedate().data(), this->latestnoticedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.IssueStock.LatestNoticeDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->latestnoticedate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.IssueStock)
  return target;
}

int IssueStock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.IssueStock)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional string NoticeDate = 3;
    if (has_noticedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noticedate());
    }

    // optional int64 IssueScale = 4;
    if (has_issuescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->issuescale());
    }

    // optional string IssuePrice = 5;
    if (has_issueprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issueprice());
    }

    // optional string ProjectAdvance = 6;
    if (has_projectadvance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectadvance());
    }

    // optional int64 PE = 7;
    if (has_pe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pe());
    }

    // optional string LatestNoticeDate = 8;
    if (has_latestnoticedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latestnoticedate());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.IssueStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IssueStock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IssueStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.IssueStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.IssueStock)
    MergeFrom(*source);
  }
}

void IssueStock::MergeFrom(const IssueStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.IssueStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_noticedate()) {
      set_has_noticedate();
      noticedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noticedate_);
    }
    if (from.has_issuescale()) {
      set_issuescale(from.issuescale());
    }
    if (from.has_issueprice()) {
      set_has_issueprice();
      issueprice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issueprice_);
    }
    if (from.has_projectadvance()) {
      set_has_projectadvance();
      projectadvance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectadvance_);
    }
    if (from.has_pe()) {
      set_pe(from.pe());
    }
    if (from.has_latestnoticedate()) {
      set_has_latestnoticedate();
      latestnoticedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latestnoticedate_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IssueStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.IssueStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueStock::CopyFrom(const IssueStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.IssueStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IssueStock::Swap(IssueStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssueStock::InternalSwap(IssueStock* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  noticedate_.Swap(&other->noticedate_);
  std::swap(issuescale_, other->issuescale_);
  issueprice_.Swap(&other->issueprice_);
  projectadvance_.Swap(&other->projectadvance_);
  std::swap(pe_, other->pe_);
  latestnoticedate_.Swap(&other->latestnoticedate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IssueStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IssueStock_descriptor_;
  metadata.reflection = IssueStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IssueStock

// required string StockCode = 1;
bool IssueStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IssueStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void IssueStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void IssueStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& IssueStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.StockCode)
}
 void IssueStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.StockCode)
}
 void IssueStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.StockCode)
}
 ::std::string* IssueStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.StockCode)
}

// optional string StockName = 2;
bool IssueStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IssueStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void IssueStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void IssueStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& IssueStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.StockName)
}
 void IssueStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.StockName)
}
 void IssueStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.StockName)
}
 ::std::string* IssueStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.StockName)
}

// optional string NoticeDate = 3;
bool IssueStock::has_noticedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IssueStock::set_has_noticedate() {
  _has_bits_[0] |= 0x00000004u;
}
void IssueStock::clear_has_noticedate() {
  _has_bits_[0] &= ~0x00000004u;
}
void IssueStock::clear_noticedate() {
  noticedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_noticedate();
}
 const ::std::string& IssueStock::noticedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.NoticeDate)
  return noticedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_noticedate(const ::std::string& value) {
  set_has_noticedate();
  noticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.NoticeDate)
}
 void IssueStock::set_noticedate(const char* value) {
  set_has_noticedate();
  noticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.NoticeDate)
}
 void IssueStock::set_noticedate(const char* value, size_t size) {
  set_has_noticedate();
  noticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.NoticeDate)
}
 ::std::string* IssueStock::mutable_noticedate() {
  set_has_noticedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.NoticeDate)
  return noticedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueStock::release_noticedate() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.NoticeDate)
  clear_has_noticedate();
  return noticedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_allocated_noticedate(::std::string* noticedate) {
  if (noticedate != NULL) {
    set_has_noticedate();
  } else {
    clear_has_noticedate();
  }
  noticedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noticedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.NoticeDate)
}

// optional int64 IssueScale = 4;
bool IssueStock::has_issuescale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IssueStock::set_has_issuescale() {
  _has_bits_[0] |= 0x00000008u;
}
void IssueStock::clear_has_issuescale() {
  _has_bits_[0] &= ~0x00000008u;
}
void IssueStock::clear_issuescale() {
  issuescale_ = GOOGLE_LONGLONG(0);
  clear_has_issuescale();
}
 ::google::protobuf::int64 IssueStock::issuescale() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.IssueScale)
  return issuescale_;
}
 void IssueStock::set_issuescale(::google::protobuf::int64 value) {
  set_has_issuescale();
  issuescale_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.IssueScale)
}

// optional string IssuePrice = 5;
bool IssueStock::has_issueprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IssueStock::set_has_issueprice() {
  _has_bits_[0] |= 0x00000010u;
}
void IssueStock::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000010u;
}
void IssueStock::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
 const ::std::string& IssueStock::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.IssuePrice)
}
 void IssueStock::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.IssuePrice)
}
 void IssueStock::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.IssuePrice)
}
 ::std::string* IssueStock::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueStock::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.IssuePrice)
}

// optional string ProjectAdvance = 6;
bool IssueStock::has_projectadvance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IssueStock::set_has_projectadvance() {
  _has_bits_[0] |= 0x00000020u;
}
void IssueStock::clear_has_projectadvance() {
  _has_bits_[0] &= ~0x00000020u;
}
void IssueStock::clear_projectadvance() {
  projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projectadvance();
}
 const ::std::string& IssueStock::projectadvance() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.ProjectAdvance)
  return projectadvance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_projectadvance(const ::std::string& value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.ProjectAdvance)
}
 void IssueStock::set_projectadvance(const char* value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.ProjectAdvance)
}
 void IssueStock::set_projectadvance(const char* value, size_t size) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.ProjectAdvance)
}
 ::std::string* IssueStock::mutable_projectadvance() {
  set_has_projectadvance();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.ProjectAdvance)
  return projectadvance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueStock::release_projectadvance() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.ProjectAdvance)
  clear_has_projectadvance();
  return projectadvance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_allocated_projectadvance(::std::string* projectadvance) {
  if (projectadvance != NULL) {
    set_has_projectadvance();
  } else {
    clear_has_projectadvance();
  }
  projectadvance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectadvance);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.ProjectAdvance)
}

// optional int64 PE = 7;
bool IssueStock::has_pe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IssueStock::set_has_pe() {
  _has_bits_[0] |= 0x00000040u;
}
void IssueStock::clear_has_pe() {
  _has_bits_[0] &= ~0x00000040u;
}
void IssueStock::clear_pe() {
  pe_ = GOOGLE_LONGLONG(0);
  clear_has_pe();
}
 ::google::protobuf::int64 IssueStock::pe() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.PE)
  return pe_;
}
 void IssueStock::set_pe(::google::protobuf::int64 value) {
  set_has_pe();
  pe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.PE)
}

// optional string LatestNoticeDate = 8;
bool IssueStock::has_latestnoticedate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IssueStock::set_has_latestnoticedate() {
  _has_bits_[0] |= 0x00000080u;
}
void IssueStock::clear_has_latestnoticedate() {
  _has_bits_[0] &= ~0x00000080u;
}
void IssueStock::clear_latestnoticedate() {
  latestnoticedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latestnoticedate();
}
 const ::std::string& IssueStock::latestnoticedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.LatestNoticeDate)
  return latestnoticedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_latestnoticedate(const ::std::string& value) {
  set_has_latestnoticedate();
  latestnoticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.LatestNoticeDate)
}
 void IssueStock::set_latestnoticedate(const char* value) {
  set_has_latestnoticedate();
  latestnoticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.LatestNoticeDate)
}
 void IssueStock::set_latestnoticedate(const char* value, size_t size) {
  set_has_latestnoticedate();
  latestnoticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.LatestNoticeDate)
}
 ::std::string* IssueStock::mutable_latestnoticedate() {
  set_has_latestnoticedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.LatestNoticeDate)
  return latestnoticedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IssueStock::release_latestnoticedate() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.LatestNoticeDate)
  clear_has_latestnoticedate();
  return latestnoticedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IssueStock::set_allocated_latestnoticedate(::std::string* latestnoticedate) {
  if (latestnoticedate != NULL) {
    set_has_latestnoticedate();
  } else {
    clear_has_latestnoticedate();
  }
  latestnoticedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latestnoticedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.LatestNoticeDate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssueStatInfo::kStockNumFieldNumber;
const int IssueStatInfo::kTotalScaleFieldNumber;
const int IssueStatInfo::kAvgPEFieldNumber;
const int IssueStatInfo::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssueStatInfo::IssueStatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.IssueStatInfo)
}

void IssueStatInfo::InitAsDefaultInstance() {
}

IssueStatInfo::IssueStatInfo(const IssueStatInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.IssueStatInfo)
}

void IssueStatInfo::SharedCtor() {
  _cached_size_ = 0;
  stocknum_ = GOOGLE_LONGLONG(0);
  totalscale_ = GOOGLE_LONGLONG(0);
  avgpe_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IssueStatInfo::~IssueStatInfo() {
  // @@protoc_insertion_point(destructor:dzhyun.IssueStatInfo)
  SharedDtor();
}

void IssueStatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IssueStatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueStatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IssueStatInfo_descriptor_;
}

const IssueStatInfo& IssueStatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

IssueStatInfo* IssueStatInfo::default_instance_ = NULL;

IssueStatInfo* IssueStatInfo::New(::google::protobuf::Arena* arena) const {
  IssueStatInfo* n = new IssueStatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IssueStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.IssueStatInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IssueStatInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IssueStatInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stocknum_, avgpe_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IssueStatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.IssueStatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 StockNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stocknum_)));
          set_has_stocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalScale;
        break;
      }

      // optional int64 TotalScale = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalscale_)));
          set_has_totalscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AvgPE;
        break;
      }

      // optional int64 AvgPE = 3;
      case 3: {
        if (tag == 24) {
         parse_AvgPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &avgpe_)));
          set_has_avgpe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.IssueStock Data = 4;
      case 4: {
        if (tag == 34) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.IssueStatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.IssueStatInfo)
  return false;
#undef DO_
}

void IssueStatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.IssueStatInfo)
  // optional int64 StockNum = 1;
  if (has_stocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stocknum(), output);
  }

  // optional int64 TotalScale = 2;
  if (has_totalscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->totalscale(), output);
  }

  // optional int64 AvgPE = 3;
  if (has_avgpe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->avgpe(), output);
  }

  // repeated .dzhyun.IssueStock Data = 4;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.IssueStatInfo)
}

::google::protobuf::uint8* IssueStatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.IssueStatInfo)
  // optional int64 StockNum = 1;
  if (has_stocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stocknum(), target);
  }

  // optional int64 TotalScale = 2;
  if (has_totalscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->totalscale(), target);
  }

  // optional int64 AvgPE = 3;
  if (has_avgpe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->avgpe(), target);
  }

  // repeated .dzhyun.IssueStock Data = 4;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.IssueStatInfo)
  return target;
}

int IssueStatInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.IssueStatInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 StockNum = 1;
    if (has_stocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stocknum());
    }

    // optional int64 TotalScale = 2;
    if (has_totalscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalscale());
    }

    // optional int64 AvgPE = 3;
    if (has_avgpe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->avgpe());
    }

  }
  // repeated .dzhyun.IssueStock Data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueStatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.IssueStatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IssueStatInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IssueStatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.IssueStatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.IssueStatInfo)
    MergeFrom(*source);
  }
}

void IssueStatInfo::MergeFrom(const IssueStatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.IssueStatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stocknum()) {
      set_stocknum(from.stocknum());
    }
    if (from.has_totalscale()) {
      set_totalscale(from.totalscale());
    }
    if (from.has_avgpe()) {
      set_avgpe(from.avgpe());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IssueStatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.IssueStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueStatInfo::CopyFrom(const IssueStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.IssueStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueStatInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void IssueStatInfo::Swap(IssueStatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssueStatInfo::InternalSwap(IssueStatInfo* other) {
  std::swap(stocknum_, other->stocknum_);
  std::swap(totalscale_, other->totalscale_);
  std::swap(avgpe_, other->avgpe_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IssueStatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IssueStatInfo_descriptor_;
  metadata.reflection = IssueStatInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IssueStatInfo

// optional int64 StockNum = 1;
bool IssueStatInfo::has_stocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IssueStatInfo::set_has_stocknum() {
  _has_bits_[0] |= 0x00000001u;
}
void IssueStatInfo::clear_has_stocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
void IssueStatInfo::clear_stocknum() {
  stocknum_ = GOOGLE_LONGLONG(0);
  clear_has_stocknum();
}
 ::google::protobuf::int64 IssueStatInfo::stocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.StockNum)
  return stocknum_;
}
 void IssueStatInfo::set_stocknum(::google::protobuf::int64 value) {
  set_has_stocknum();
  stocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStatInfo.StockNum)
}

// optional int64 TotalScale = 2;
bool IssueStatInfo::has_totalscale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IssueStatInfo::set_has_totalscale() {
  _has_bits_[0] |= 0x00000002u;
}
void IssueStatInfo::clear_has_totalscale() {
  _has_bits_[0] &= ~0x00000002u;
}
void IssueStatInfo::clear_totalscale() {
  totalscale_ = GOOGLE_LONGLONG(0);
  clear_has_totalscale();
}
 ::google::protobuf::int64 IssueStatInfo::totalscale() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.TotalScale)
  return totalscale_;
}
 void IssueStatInfo::set_totalscale(::google::protobuf::int64 value) {
  set_has_totalscale();
  totalscale_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStatInfo.TotalScale)
}

// optional int64 AvgPE = 3;
bool IssueStatInfo::has_avgpe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IssueStatInfo::set_has_avgpe() {
  _has_bits_[0] |= 0x00000004u;
}
void IssueStatInfo::clear_has_avgpe() {
  _has_bits_[0] &= ~0x00000004u;
}
void IssueStatInfo::clear_avgpe() {
  avgpe_ = GOOGLE_LONGLONG(0);
  clear_has_avgpe();
}
 ::google::protobuf::int64 IssueStatInfo::avgpe() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.AvgPE)
  return avgpe_;
}
 void IssueStatInfo::set_avgpe(::google::protobuf::int64 value) {
  set_has_avgpe();
  avgpe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStatInfo.AvgPE)
}

// repeated .dzhyun.IssueStock Data = 4;
int IssueStatInfo::data_size() const {
  return data_.size();
}
void IssueStatInfo::clear_data() {
  data_.Clear();
}
const ::dzhyun::IssueStock& IssueStatInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.Data)
  return data_.Get(index);
}
::dzhyun::IssueStock* IssueStatInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStatInfo.Data)
  return data_.Mutable(index);
}
::dzhyun::IssueStock* IssueStatInfo::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.IssueStatInfo.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock >*
IssueStatInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.IssueStatInfo.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock >&
IssueStatInfo::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.IssueStatInfo.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerData::kBrokerNameFieldNumber;
const int BrokerData::kLastStockNumFieldNumber;
const int BrokerData::kFirstStockNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerData::BrokerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.BrokerData)
}

void BrokerData::InitAsDefaultInstance() {
}

BrokerData::BrokerData(const BrokerData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.BrokerData)
}

void BrokerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  laststocknum_ = GOOGLE_LONGLONG(0);
  firststocknum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerData::~BrokerData() {
  // @@protoc_insertion_point(destructor:dzhyun.BrokerData)
  SharedDtor();
}

void BrokerData::SharedDtor() {
  brokername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BrokerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerData_descriptor_;
}

const BrokerData& BrokerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

BrokerData* BrokerData::default_instance_ = NULL;

BrokerData* BrokerData::New(::google::protobuf::Arena* arena) const {
  BrokerData* n = new BrokerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrokerData::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.BrokerData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BrokerData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BrokerData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(laststocknum_, firststocknum_);
    if (has_brokername()) {
      brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BrokerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.BrokerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokername().data(), this->brokername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.BrokerData.BrokerName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LastStockNum;
        break;
      }

      // optional int64 LastStockNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LastStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &laststocknum_)));
          set_has_laststocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FirstStockNum;
        break;
      }

      // optional int64 FirstStockNum = 3;
      case 3: {
        if (tag == 24) {
         parse_FirstStockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firststocknum_)));
          set_has_firststocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.BrokerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.BrokerData)
  return false;
#undef DO_
}

void BrokerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.BrokerData)
  // required string BrokerName = 1;
  if (has_brokername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), this->brokername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerData.BrokerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->brokername(), output);
  }

  // optional int64 LastStockNum = 2;
  if (has_laststocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->laststocknum(), output);
  }

  // optional int64 FirstStockNum = 3;
  if (has_firststocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->firststocknum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.BrokerData)
}

::google::protobuf::uint8* BrokerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.BrokerData)
  // required string BrokerName = 1;
  if (has_brokername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), this->brokername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.BrokerData.BrokerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokername(), target);
  }

  // optional int64 LastStockNum = 2;
  if (has_laststocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->laststocknum(), target);
  }

  // optional int64 FirstStockNum = 3;
  if (has_firststocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->firststocknum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.BrokerData)
  return target;
}

int BrokerData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.BrokerData)
  int total_size = 0;

  // required string BrokerName = 1;
  if (has_brokername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokername());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int64 LastStockNum = 2;
    if (has_laststocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->laststocknum());
    }

    // optional int64 FirstStockNum = 3;
    if (has_firststocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firststocknum());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.BrokerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrokerData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.BrokerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.BrokerData)
    MergeFrom(*source);
  }
}

void BrokerData::MergeFrom(const BrokerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.BrokerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokername()) {
      set_has_brokername();
      brokername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokername_);
    }
    if (from.has_laststocknum()) {
      set_laststocknum(from.laststocknum());
    }
    if (from.has_firststocknum()) {
      set_firststocknum(from.firststocknum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BrokerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.BrokerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerData::CopyFrom(const BrokerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.BrokerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BrokerData::Swap(BrokerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerData::InternalSwap(BrokerData* other) {
  brokername_.Swap(&other->brokername_);
  std::swap(laststocknum_, other->laststocknum_);
  std::swap(firststocknum_, other->firststocknum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrokerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerData_descriptor_;
  metadata.reflection = BrokerData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrokerData

// required string BrokerName = 1;
bool BrokerData::has_brokername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrokerData::set_has_brokername() {
  _has_bits_[0] |= 0x00000001u;
}
void BrokerData::clear_has_brokername() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrokerData::clear_brokername() {
  brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokername();
}
 const ::std::string& BrokerData::brokername() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerData.BrokerName)
  return brokername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerData::set_brokername(const ::std::string& value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerData.BrokerName)
}
 void BrokerData::set_brokername(const char* value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerData.BrokerName)
}
 void BrokerData::set_brokername(const char* value, size_t size) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerData.BrokerName)
}
 ::std::string* BrokerData::mutable_brokername() {
  set_has_brokername();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerData.BrokerName)
  return brokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrokerData::release_brokername() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerData.BrokerName)
  clear_has_brokername();
  return brokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrokerData::set_allocated_brokername(::std::string* brokername) {
  if (brokername != NULL) {
    set_has_brokername();
  } else {
    clear_has_brokername();
  }
  brokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokername);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerData.BrokerName)
}

// optional int64 LastStockNum = 2;
bool BrokerData::has_laststocknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrokerData::set_has_laststocknum() {
  _has_bits_[0] |= 0x00000002u;
}
void BrokerData::clear_has_laststocknum() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrokerData::clear_laststocknum() {
  laststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_laststocknum();
}
 ::google::protobuf::int64 BrokerData::laststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerData.LastStockNum)
  return laststocknum_;
}
 void BrokerData::set_laststocknum(::google::protobuf::int64 value) {
  set_has_laststocknum();
  laststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerData.LastStockNum)
}

// optional int64 FirstStockNum = 3;
bool BrokerData::has_firststocknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrokerData::set_has_firststocknum() {
  _has_bits_[0] |= 0x00000004u;
}
void BrokerData::clear_has_firststocknum() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrokerData::clear_firststocknum() {
  firststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_firststocknum();
}
 ::google::protobuf::int64 BrokerData::firststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerData.FirstStockNum)
  return firststocknum_;
}
 void BrokerData::set_firststocknum(::google::protobuf::int64 value) {
  set_has_firststocknum();
  firststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerData.FirstStockNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerList::kBrokerNumFieldNumber;
const int BrokerList::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerList::BrokerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.BrokerList)
}

void BrokerList::InitAsDefaultInstance() {
}

BrokerList::BrokerList(const BrokerList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.BrokerList)
}

void BrokerList::SharedCtor() {
  _cached_size_ = 0;
  brokernum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerList::~BrokerList() {
  // @@protoc_insertion_point(destructor:dzhyun.BrokerList)
  SharedDtor();
}

void BrokerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrokerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerList_descriptor_;
}

const BrokerList& BrokerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

BrokerList* BrokerList::default_instance_ = NULL;

BrokerList* BrokerList::New(::google::protobuf::Arena* arena) const {
  BrokerList* n = new BrokerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrokerList::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.BrokerList)
  brokernum_ = GOOGLE_LONGLONG(0);
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BrokerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.BrokerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 BrokerNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokernum_)));
          set_has_brokernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .dzhyun.BrokerData Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.BrokerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.BrokerList)
  return false;
#undef DO_
}

void BrokerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.BrokerList)
  // required int64 BrokerNum = 1;
  if (has_brokernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->brokernum(), output);
  }

  // repeated .dzhyun.BrokerData Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.BrokerList)
}

::google::protobuf::uint8* BrokerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.BrokerList)
  // required int64 BrokerNum = 1;
  if (has_brokernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->brokernum(), target);
  }

  // repeated .dzhyun.BrokerData Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.BrokerList)
  return target;
}

int BrokerList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.BrokerList)
  int total_size = 0;

  // required int64 BrokerNum = 1;
  if (has_brokernum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokernum());
  }
  // repeated .dzhyun.BrokerData Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.BrokerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BrokerList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.BrokerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.BrokerList)
    MergeFrom(*source);
  }
}

void BrokerList::MergeFrom(const BrokerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.BrokerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokernum()) {
      set_brokernum(from.brokernum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BrokerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.BrokerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerList::CopyFrom(const BrokerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.BrokerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void BrokerList::Swap(BrokerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerList::InternalSwap(BrokerList* other) {
  std::swap(brokernum_, other->brokernum_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrokerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerList_descriptor_;
  metadata.reflection = BrokerList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrokerList

// required int64 BrokerNum = 1;
bool BrokerList::has_brokernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrokerList::set_has_brokernum() {
  _has_bits_[0] |= 0x00000001u;
}
void BrokerList::clear_has_brokernum() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrokerList::clear_brokernum() {
  brokernum_ = GOOGLE_LONGLONG(0);
  clear_has_brokernum();
}
 ::google::protobuf::int64 BrokerList::brokernum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerList.BrokerNum)
  return brokernum_;
}
 void BrokerList::set_brokernum(::google::protobuf::int64 value) {
  set_has_brokernum();
  brokernum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerList.BrokerNum)
}

// repeated .dzhyun.BrokerData Data = 2;
int BrokerList::data_size() const {
  return data_.size();
}
void BrokerList::clear_data() {
  data_.Clear();
}
const ::dzhyun::BrokerData& BrokerList::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerList.Data)
  return data_.Get(index);
}
::dzhyun::BrokerData* BrokerList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerList.Data)
  return data_.Mutable(index);
}
::dzhyun::BrokerData* BrokerList::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.BrokerList.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData >*
BrokerList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.BrokerList.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData >&
BrokerList::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.BrokerList.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuickReportData::kStockCodeFieldNumber;
const int QuickReportData::kStockNameFieldNumber;
const int QuickReportData::kReportDateFieldNumber;
const int QuickReportData::kReportTitleFieldNumber;
const int QuickReportData::kClassTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuickReportData::QuickReportData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.QuickReportData)
}

void QuickReportData::InitAsDefaultInstance() {
}

QuickReportData::QuickReportData(const QuickReportData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.QuickReportData)
}

void QuickReportData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stockcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reporttitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classtag_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickReportData::~QuickReportData() {
  // @@protoc_insertion_point(destructor:dzhyun.QuickReportData)
  SharedDtor();
}

void QuickReportData::SharedDtor() {
  stockcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stockname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reporttitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QuickReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickReportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickReportData_descriptor_;
}

const QuickReportData& QuickReportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

QuickReportData* QuickReportData::default_instance_ = NULL;

QuickReportData* QuickReportData::New(::google::protobuf::Arena* arena) const {
  QuickReportData* n = new QuickReportData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuickReportData::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.QuickReportData)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_stockcode()) {
      stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stockname()) {
      stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reportdate()) {
      reportdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reporttitle()) {
      reporttitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    classtag_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QuickReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.QuickReportData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string StockCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.QuickReportData.StockCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StockName;
        break;
      }

      // optional string StockName = 2;
      case 2: {
        if (tag == 18) {
         parse_StockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.QuickReportData.StockName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ReportDate;
        break;
      }

      // optional string ReportDate = 3;
      case 3: {
        if (tag == 26) {
         parse_ReportDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reportdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reportdate().data(), this->reportdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.QuickReportData.ReportDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ReportTitle;
        break;
      }

      // optional string ReportTitle = 4;
      case 4: {
        if (tag == 34) {
         parse_ReportTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reporttitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reporttitle().data(), this->reporttitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dzhyun.QuickReportData.ReportTitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ClassTag;
        break;
      }

      // optional int64 ClassTag = 5;
      case 5: {
        if (tag == 40) {
         parse_ClassTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &classtag_)));
          set_has_classtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.QuickReportData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.QuickReportData)
  return false;
#undef DO_
}

void QuickReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.QuickReportData)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.StockCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stockcode(), output);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.StockName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stockname(), output);
  }

  // optional string ReportDate = 3;
  if (has_reportdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reportdate().data(), this->reportdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.ReportDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reportdate(), output);
  }

  // optional string ReportTitle = 4;
  if (has_reporttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reporttitle().data(), this->reporttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.ReportTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reporttitle(), output);
  }

  // optional int64 ClassTag = 5;
  if (has_classtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->classtag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.QuickReportData)
}

::google::protobuf::uint8* QuickReportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.QuickReportData)
  // required string StockCode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.StockCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // optional string StockName = 2;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.StockName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockname(), target);
  }

  // optional string ReportDate = 3;
  if (has_reportdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reportdate().data(), this->reportdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.ReportDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reportdate(), target);
  }

  // optional string ReportTitle = 4;
  if (has_reporttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reporttitle().data(), this->reporttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dzhyun.QuickReportData.ReportTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reporttitle(), target);
  }

  // optional int64 ClassTag = 5;
  if (has_classtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->classtag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.QuickReportData)
  return target;
}

int QuickReportData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.QuickReportData)
  int total_size = 0;

  // required string StockCode = 1;
  if (has_stockcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stockcode());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional string StockName = 2;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }

    // optional string ReportDate = 3;
    if (has_reportdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reportdate());
    }

    // optional string ReportTitle = 4;
    if (has_reporttitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reporttitle());
    }

    // optional int64 ClassTag = 5;
    if (has_classtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->classtag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickReportData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.QuickReportData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuickReportData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuickReportData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.QuickReportData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.QuickReportData)
    MergeFrom(*source);
  }
}

void QuickReportData::MergeFrom(const QuickReportData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.QuickReportData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_has_stockcode();
      stockcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockcode_);
    }
    if (from.has_stockname()) {
      set_has_stockname();
      stockname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stockname_);
    }
    if (from.has_reportdate()) {
      set_has_reportdate();
      reportdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reportdate_);
    }
    if (from.has_reporttitle()) {
      set_has_reporttitle();
      reporttitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reporttitle_);
    }
    if (from.has_classtag()) {
      set_classtag(from.classtag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QuickReportData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.QuickReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickReportData::CopyFrom(const QuickReportData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.QuickReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickReportData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuickReportData::Swap(QuickReportData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuickReportData::InternalSwap(QuickReportData* other) {
  stockcode_.Swap(&other->stockcode_);
  stockname_.Swap(&other->stockname_);
  reportdate_.Swap(&other->reportdate_);
  reporttitle_.Swap(&other->reporttitle_);
  std::swap(classtag_, other->classtag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuickReportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickReportData_descriptor_;
  metadata.reflection = QuickReportData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuickReportData

// required string StockCode = 1;
bool QuickReportData::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuickReportData::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
void QuickReportData::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuickReportData::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
 const ::std::string& QuickReportData::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.StockCode)
}
 void QuickReportData::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.StockCode)
}
 void QuickReportData::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.StockCode)
}
 ::std::string* QuickReportData::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuickReportData::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.StockCode)
}

// optional string StockName = 2;
bool QuickReportData::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuickReportData::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
void QuickReportData::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuickReportData::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
 const ::std::string& QuickReportData::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.StockName)
}
 void QuickReportData::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.StockName)
}
 void QuickReportData::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.StockName)
}
 ::std::string* QuickReportData::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuickReportData::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.StockName)
}

// optional string ReportDate = 3;
bool QuickReportData::has_reportdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuickReportData::set_has_reportdate() {
  _has_bits_[0] |= 0x00000004u;
}
void QuickReportData::clear_has_reportdate() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuickReportData::clear_reportdate() {
  reportdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reportdate();
}
 const ::std::string& QuickReportData::reportdate() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.ReportDate)
  return reportdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_reportdate(const ::std::string& value) {
  set_has_reportdate();
  reportdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.ReportDate)
}
 void QuickReportData::set_reportdate(const char* value) {
  set_has_reportdate();
  reportdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.ReportDate)
}
 void QuickReportData::set_reportdate(const char* value, size_t size) {
  set_has_reportdate();
  reportdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.ReportDate)
}
 ::std::string* QuickReportData::mutable_reportdate() {
  set_has_reportdate();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.ReportDate)
  return reportdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuickReportData::release_reportdate() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.ReportDate)
  clear_has_reportdate();
  return reportdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_allocated_reportdate(::std::string* reportdate) {
  if (reportdate != NULL) {
    set_has_reportdate();
  } else {
    clear_has_reportdate();
  }
  reportdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reportdate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.ReportDate)
}

// optional string ReportTitle = 4;
bool QuickReportData::has_reporttitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QuickReportData::set_has_reporttitle() {
  _has_bits_[0] |= 0x00000008u;
}
void QuickReportData::clear_has_reporttitle() {
  _has_bits_[0] &= ~0x00000008u;
}
void QuickReportData::clear_reporttitle() {
  reporttitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reporttitle();
}
 const ::std::string& QuickReportData::reporttitle() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.ReportTitle)
  return reporttitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_reporttitle(const ::std::string& value) {
  set_has_reporttitle();
  reporttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.ReportTitle)
}
 void QuickReportData::set_reporttitle(const char* value) {
  set_has_reporttitle();
  reporttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.ReportTitle)
}
 void QuickReportData::set_reporttitle(const char* value, size_t size) {
  set_has_reporttitle();
  reporttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.ReportTitle)
}
 ::std::string* QuickReportData::mutable_reporttitle() {
  set_has_reporttitle();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.ReportTitle)
  return reporttitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuickReportData::release_reporttitle() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.ReportTitle)
  clear_has_reporttitle();
  return reporttitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuickReportData::set_allocated_reporttitle(::std::string* reporttitle) {
  if (reporttitle != NULL) {
    set_has_reporttitle();
  } else {
    clear_has_reporttitle();
  }
  reporttitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reporttitle);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.ReportTitle)
}

// optional int64 ClassTag = 5;
bool QuickReportData::has_classtag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QuickReportData::set_has_classtag() {
  _has_bits_[0] |= 0x00000010u;
}
void QuickReportData::clear_has_classtag() {
  _has_bits_[0] &= ~0x00000010u;
}
void QuickReportData::clear_classtag() {
  classtag_ = GOOGLE_LONGLONG(0);
  clear_has_classtag();
}
 ::google::protobuf::int64 QuickReportData::classtag() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.ClassTag)
  return classtag_;
}
 void QuickReportData::set_classtag(::google::protobuf::int64 value) {
  set_has_classtag();
  classtag_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.ClassTag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinanceQuickReport::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinanceQuickReport::FinanceQuickReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dzhyun.FinanceQuickReport)
}

void FinanceQuickReport::InitAsDefaultInstance() {
}

FinanceQuickReport::FinanceQuickReport(const FinanceQuickReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dzhyun.FinanceQuickReport)
}

void FinanceQuickReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinanceQuickReport::~FinanceQuickReport() {
  // @@protoc_insertion_point(destructor:dzhyun.FinanceQuickReport)
  SharedDtor();
}

void FinanceQuickReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinanceQuickReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinanceQuickReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinanceQuickReport_descriptor_;
}

const FinanceQuickReport& FinanceQuickReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CldSanBanData_2eproto();
  return *default_instance_;
}

FinanceQuickReport* FinanceQuickReport::default_instance_ = NULL;

FinanceQuickReport* FinanceQuickReport::New(::google::protobuf::Arena* arena) const {
  FinanceQuickReport* n = new FinanceQuickReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FinanceQuickReport::Clear() {
// @@protoc_insertion_point(message_clear_start:dzhyun.FinanceQuickReport)
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FinanceQuickReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dzhyun.FinanceQuickReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dzhyun.QuickReportData Data = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dzhyun.FinanceQuickReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dzhyun.FinanceQuickReport)
  return false;
#undef DO_
}

void FinanceQuickReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dzhyun.FinanceQuickReport)
  // repeated .dzhyun.QuickReportData Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dzhyun.FinanceQuickReport)
}

::google::protobuf::uint8* FinanceQuickReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dzhyun.FinanceQuickReport)
  // repeated .dzhyun.QuickReportData Data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dzhyun.FinanceQuickReport)
  return target;
}

int FinanceQuickReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dzhyun.FinanceQuickReport)
  int total_size = 0;

  // repeated .dzhyun.QuickReportData Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinanceQuickReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dzhyun.FinanceQuickReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FinanceQuickReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FinanceQuickReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dzhyun.FinanceQuickReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dzhyun.FinanceQuickReport)
    MergeFrom(*source);
  }
}

void FinanceQuickReport::MergeFrom(const FinanceQuickReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dzhyun.FinanceQuickReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FinanceQuickReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dzhyun.FinanceQuickReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinanceQuickReport::CopyFrom(const FinanceQuickReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dzhyun.FinanceQuickReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinanceQuickReport::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void FinanceQuickReport::Swap(FinanceQuickReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinanceQuickReport::InternalSwap(FinanceQuickReport* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FinanceQuickReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinanceQuickReport_descriptor_;
  metadata.reflection = FinanceQuickReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FinanceQuickReport

// repeated .dzhyun.QuickReportData Data = 2;
int FinanceQuickReport::data_size() const {
  return data_.size();
}
void FinanceQuickReport::clear_data() {
  data_.Clear();
}
const ::dzhyun::QuickReportData& FinanceQuickReport::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.FinanceQuickReport.Data)
  return data_.Get(index);
}
::dzhyun::QuickReportData* FinanceQuickReport::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.FinanceQuickReport.Data)
  return data_.Mutable(index);
}
::dzhyun::QuickReportData* FinanceQuickReport::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.FinanceQuickReport.Data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData >*
FinanceQuickReport::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.FinanceQuickReport.Data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData >&
FinanceQuickReport::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.FinanceQuickReport.Data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)
