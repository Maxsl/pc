// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CldSanBanData.proto

#ifndef PROTOBUF_CldSanBanData_2eproto__INCLUDED
#define PROTOBUF_CldSanBanData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CldSanBanData_2eproto();
void protobuf_AssignDesc_CldSanBanData_2eproto();
void protobuf_ShutdownFile_CldSanBanData_2eproto();

class BrokerData;
class BrokerDetaileInfo;
class BrokerInfo;
class BrokerList;
class BrokerStock;
class FinanceQuickReport;
class IssueDetaileInfo;
class IssueStatInfo;
class IssueStock;
class OverallInfo;
class QuickReportData;
class StockBrokerInfo;
class TodayBrokerStock;
class TodayBrokerStocks;
class TodayConvertStock;
class TodayConvertStocks;
class TodayIssueStock;
class TodayIssueStocks;
class TodayListStock;
class TodayListStocks;

// ===================================================================

class OverallInfo : public ::google::protobuf::Message {
 public:
  OverallInfo();
  virtual ~OverallInfo();

  OverallInfo(const OverallInfo& from);

  inline OverallInfo& operator=(const OverallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OverallInfo& default_instance();

  void Swap(OverallInfo* other);

  // implements Message ----------------------------------------------

  inline OverallInfo* New() const { return New(NULL); }

  OverallInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OverallInfo& from);
  void MergeFrom(const OverallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OverallInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 TotalStockNum = 1;
  bool has_totalstocknum() const;
  void clear_totalstocknum();
  static const int kTotalStockNumFieldNumber = 1;
  ::google::protobuf::int64 totalstocknum() const;
  void set_totalstocknum(::google::protobuf::int64 value);

  // optional int64 AgreementStockNum = 2;
  bool has_agreementstocknum() const;
  void clear_agreementstocknum();
  static const int kAgreementStockNumFieldNumber = 2;
  ::google::protobuf::int64 agreementstocknum() const;
  void set_agreementstocknum(::google::protobuf::int64 value);

  // optional int64 BrokerStockNum = 3;
  bool has_brokerstocknum() const;
  void clear_brokerstocknum();
  static const int kBrokerStockNumFieldNumber = 3;
  ::google::protobuf::int64 brokerstocknum() const;
  void set_brokerstocknum(::google::protobuf::int64 value);

  // optional int64 WaitStockNum = 4;
  bool has_waitstocknum() const;
  void clear_waitstocknum();
  static const int kWaitStockNumFieldNumber = 4;
  ::google::protobuf::int64 waitstocknum() const;
  void set_waitstocknum(::google::protobuf::int64 value);

  // optional int64 ApplyStockNum = 5;
  bool has_applystocknum() const;
  void clear_applystocknum();
  static const int kApplyStockNumFieldNumber = 5;
  ::google::protobuf::int64 applystocknum() const;
  void set_applystocknum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.OverallInfo)
 private:
  inline void set_has_totalstocknum();
  inline void clear_has_totalstocknum();
  inline void set_has_agreementstocknum();
  inline void clear_has_agreementstocknum();
  inline void set_has_brokerstocknum();
  inline void clear_has_brokerstocknum();
  inline void set_has_waitstocknum();
  inline void clear_has_waitstocknum();
  inline void set_has_applystocknum();
  inline void clear_has_applystocknum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 totalstocknum_;
  ::google::protobuf::int64 agreementstocknum_;
  ::google::protobuf::int64 brokerstocknum_;
  ::google::protobuf::int64 waitstocknum_;
  ::google::protobuf::int64 applystocknum_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static OverallInfo* default_instance_;
};
// -------------------------------------------------------------------

class TodayListStock : public ::google::protobuf::Message {
 public:
  TodayListStock();
  virtual ~TodayListStock();

  TodayListStock(const TodayListStock& from);

  inline TodayListStock& operator=(const TodayListStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayListStock& default_instance();

  void Swap(TodayListStock* other);

  // implements Message ----------------------------------------------

  inline TodayListStock* New() const { return New(NULL); }

  TodayListStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayListStock& from);
  void MergeFrom(const TodayListStock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayListStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional string MainBroker = 3;
  bool has_mainbroker() const;
  void clear_mainbroker();
  static const int kMainBrokerFieldNumber = 3;
  const ::std::string& mainbroker() const;
  void set_mainbroker(const ::std::string& value);
  void set_mainbroker(const char* value);
  void set_mainbroker(const char* value, size_t size);
  ::std::string* mutable_mainbroker();
  ::std::string* release_mainbroker();
  void set_allocated_mainbroker(::std::string* mainbroker);

  // optional string Industry = 4;
  bool has_industry() const;
  void clear_industry();
  static const int kIndustryFieldNumber = 4;
  const ::std::string& industry() const;
  void set_industry(const ::std::string& value);
  void set_industry(const char* value);
  void set_industry(const char* value, size_t size);
  ::std::string* mutable_industry();
  ::std::string* release_industry();
  void set_allocated_industry(::std::string* industry);

  // @@protoc_insertion_point(class_scope:dzhyun.TodayListStock)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_mainbroker();
  inline void clear_has_mainbroker();
  inline void set_has_industry();
  inline void clear_has_industry();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::internal::ArenaStringPtr mainbroker_;
  ::google::protobuf::internal::ArenaStringPtr industry_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayListStock* default_instance_;
};
// -------------------------------------------------------------------

class TodayListStocks : public ::google::protobuf::Message {
 public:
  TodayListStocks();
  virtual ~TodayListStocks();

  TodayListStocks(const TodayListStocks& from);

  inline TodayListStocks& operator=(const TodayListStocks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayListStocks& default_instance();

  void Swap(TodayListStocks* other);

  // implements Message ----------------------------------------------

  inline TodayListStocks* New() const { return New(NULL); }

  TodayListStocks* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayListStocks& from);
  void MergeFrom(const TodayListStocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayListStocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ListStockNum = 1;
  bool has_liststocknum() const;
  void clear_liststocknum();
  static const int kListStockNumFieldNumber = 1;
  ::google::protobuf::int64 liststocknum() const;
  void set_liststocknum(::google::protobuf::int64 value);

  // repeated .dzhyun.TodayListStock Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::TodayListStock& data(int index) const;
  ::dzhyun::TodayListStock* mutable_data(int index);
  ::dzhyun::TodayListStock* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.TodayListStocks)
 private:
  inline void set_has_liststocknum();
  inline void clear_has_liststocknum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 liststocknum_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayListStocks* default_instance_;
};
// -------------------------------------------------------------------

class TodayBrokerStock : public ::google::protobuf::Message {
 public:
  TodayBrokerStock();
  virtual ~TodayBrokerStock();

  TodayBrokerStock(const TodayBrokerStock& from);

  inline TodayBrokerStock& operator=(const TodayBrokerStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayBrokerStock& default_instance();

  void Swap(TodayBrokerStock* other);

  // implements Message ----------------------------------------------

  inline TodayBrokerStock* New() const { return New(NULL); }

  TodayBrokerStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayBrokerStock& from);
  void MergeFrom(const TodayBrokerStock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayBrokerStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional int64 BrokerNum = 3;
  bool has_brokernum() const;
  void clear_brokernum();
  static const int kBrokerNumFieldNumber = 3;
  ::google::protobuf::int64 brokernum() const;
  void set_brokernum(::google::protobuf::int64 value);

  // optional int64 NewAddNum = 4;
  bool has_newaddnum() const;
  void clear_newaddnum();
  static const int kNewAddNumFieldNumber = 4;
  ::google::protobuf::int64 newaddnum() const;
  void set_newaddnum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.TodayBrokerStock)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_brokernum();
  inline void clear_has_brokernum();
  inline void set_has_newaddnum();
  inline void clear_has_newaddnum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::int64 brokernum_;
  ::google::protobuf::int64 newaddnum_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayBrokerStock* default_instance_;
};
// -------------------------------------------------------------------

class TodayBrokerStocks : public ::google::protobuf::Message {
 public:
  TodayBrokerStocks();
  virtual ~TodayBrokerStocks();

  TodayBrokerStocks(const TodayBrokerStocks& from);

  inline TodayBrokerStocks& operator=(const TodayBrokerStocks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayBrokerStocks& default_instance();

  void Swap(TodayBrokerStocks* other);

  // implements Message ----------------------------------------------

  inline TodayBrokerStocks* New() const { return New(NULL); }

  TodayBrokerStocks* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayBrokerStocks& from);
  void MergeFrom(const TodayBrokerStocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayBrokerStocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 BrokerStockNum = 1;
  bool has_brokerstocknum() const;
  void clear_brokerstocknum();
  static const int kBrokerStockNumFieldNumber = 1;
  ::google::protobuf::int64 brokerstocknum() const;
  void set_brokerstocknum(::google::protobuf::int64 value);

  // repeated .dzhyun.TodayBrokerStock Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::TodayBrokerStock& data(int index) const;
  ::dzhyun::TodayBrokerStock* mutable_data(int index);
  ::dzhyun::TodayBrokerStock* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.TodayBrokerStocks)
 private:
  inline void set_has_brokerstocknum();
  inline void clear_has_brokerstocknum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 brokerstocknum_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayBrokerStocks* default_instance_;
};
// -------------------------------------------------------------------

class TodayConvertStock : public ::google::protobuf::Message {
 public:
  TodayConvertStock();
  virtual ~TodayConvertStock();

  TodayConvertStock(const TodayConvertStock& from);

  inline TodayConvertStock& operator=(const TodayConvertStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayConvertStock& default_instance();

  void Swap(TodayConvertStock* other);

  // implements Message ----------------------------------------------

  inline TodayConvertStock* New() const { return New(NULL); }

  TodayConvertStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayConvertStock& from);
  void MergeFrom(const TodayConvertStock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayConvertStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional int64 BrokerNum = 3;
  bool has_brokernum() const;
  void clear_brokernum();
  static const int kBrokerNumFieldNumber = 3;
  ::google::protobuf::int64 brokernum() const;
  void set_brokernum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.TodayConvertStock)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_brokernum();
  inline void clear_has_brokernum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::int64 brokernum_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayConvertStock* default_instance_;
};
// -------------------------------------------------------------------

class TodayConvertStocks : public ::google::protobuf::Message {
 public:
  TodayConvertStocks();
  virtual ~TodayConvertStocks();

  TodayConvertStocks(const TodayConvertStocks& from);

  inline TodayConvertStocks& operator=(const TodayConvertStocks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayConvertStocks& default_instance();

  void Swap(TodayConvertStocks* other);

  // implements Message ----------------------------------------------

  inline TodayConvertStocks* New() const { return New(NULL); }

  TodayConvertStocks* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayConvertStocks& from);
  void MergeFrom(const TodayConvertStocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayConvertStocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ConvertStockNum = 1;
  bool has_convertstocknum() const;
  void clear_convertstocknum();
  static const int kConvertStockNumFieldNumber = 1;
  ::google::protobuf::int64 convertstocknum() const;
  void set_convertstocknum(::google::protobuf::int64 value);

  // repeated .dzhyun.TodayConvertStock Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::TodayConvertStock& data(int index) const;
  ::dzhyun::TodayConvertStock* mutable_data(int index);
  ::dzhyun::TodayConvertStock* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.TodayConvertStocks)
 private:
  inline void set_has_convertstocknum();
  inline void clear_has_convertstocknum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 convertstocknum_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayConvertStocks* default_instance_;
};
// -------------------------------------------------------------------

class TodayIssueStock : public ::google::protobuf::Message {
 public:
  TodayIssueStock();
  virtual ~TodayIssueStock();

  TodayIssueStock(const TodayIssueStock& from);

  inline TodayIssueStock& operator=(const TodayIssueStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayIssueStock& default_instance();

  void Swap(TodayIssueStock* other);

  // implements Message ----------------------------------------------

  inline TodayIssueStock* New() const { return New(NULL); }

  TodayIssueStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayIssueStock& from);
  void MergeFrom(const TodayIssueStock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayIssueStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional string ProjectAdvance = 3;
  bool has_projectadvance() const;
  void clear_projectadvance();
  static const int kProjectAdvanceFieldNumber = 3;
  const ::std::string& projectadvance() const;
  void set_projectadvance(const ::std::string& value);
  void set_projectadvance(const char* value);
  void set_projectadvance(const char* value, size_t size);
  ::std::string* mutable_projectadvance();
  ::std::string* release_projectadvance();
  void set_allocated_projectadvance(::std::string* projectadvance);

  // optional string IssuePrice = 4;
  bool has_issueprice() const;
  void clear_issueprice();
  static const int kIssuePriceFieldNumber = 4;
  const ::std::string& issueprice() const;
  void set_issueprice(const ::std::string& value);
  void set_issueprice(const char* value);
  void set_issueprice(const char* value, size_t size);
  ::std::string* mutable_issueprice();
  ::std::string* release_issueprice();
  void set_allocated_issueprice(::std::string* issueprice);

  // @@protoc_insertion_point(class_scope:dzhyun.TodayIssueStock)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_projectadvance();
  inline void clear_has_projectadvance();
  inline void set_has_issueprice();
  inline void clear_has_issueprice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::internal::ArenaStringPtr projectadvance_;
  ::google::protobuf::internal::ArenaStringPtr issueprice_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayIssueStock* default_instance_;
};
// -------------------------------------------------------------------

class TodayIssueStocks : public ::google::protobuf::Message {
 public:
  TodayIssueStocks();
  virtual ~TodayIssueStocks();

  TodayIssueStocks(const TodayIssueStocks& from);

  inline TodayIssueStocks& operator=(const TodayIssueStocks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayIssueStocks& default_instance();

  void Swap(TodayIssueStocks* other);

  // implements Message ----------------------------------------------

  inline TodayIssueStocks* New() const { return New(NULL); }

  TodayIssueStocks* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayIssueStocks& from);
  void MergeFrom(const TodayIssueStocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TodayIssueStocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 IssueStockNum = 1;
  bool has_issuestocknum() const;
  void clear_issuestocknum();
  static const int kIssueStockNumFieldNumber = 1;
  ::google::protobuf::int64 issuestocknum() const;
  void set_issuestocknum(::google::protobuf::int64 value);

  // repeated .dzhyun.TodayIssueStock Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::TodayIssueStock& data(int index) const;
  ::dzhyun::TodayIssueStock* mutable_data(int index);
  ::dzhyun::TodayIssueStock* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.TodayIssueStocks)
 private:
  inline void set_has_issuestocknum();
  inline void clear_has_issuestocknum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 issuestocknum_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static TodayIssueStocks* default_instance_;
};
// -------------------------------------------------------------------

class BrokerStock : public ::google::protobuf::Message {
 public:
  BrokerStock();
  virtual ~BrokerStock();

  BrokerStock(const BrokerStock& from);

  inline BrokerStock& operator=(const BrokerStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerStock& default_instance();

  void Swap(BrokerStock* other);

  // implements Message ----------------------------------------------

  inline BrokerStock* New() const { return New(NULL); }

  BrokerStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerStock& from);
  void MergeFrom(const BrokerStock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional int64 Price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional int64 InitAmount = 4;
  bool has_initamount() const;
  void clear_initamount();
  static const int kInitAmountFieldNumber = 4;
  ::google::protobuf::int64 initamount() const;
  void set_initamount(::google::protobuf::int64 value);

  // optional int64 InitCost = 5;
  bool has_initcost() const;
  void clear_initcost();
  static const int kInitCostFieldNumber = 5;
  ::google::protobuf::int64 initcost() const;
  void set_initcost(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.BrokerStock)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_initamount();
  inline void clear_has_initamount();
  inline void set_has_initcost();
  inline void clear_has_initcost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 initamount_;
  ::google::protobuf::int64 initcost_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static BrokerStock* default_instance_;
};
// -------------------------------------------------------------------

class BrokerDetaileInfo : public ::google::protobuf::Message {
 public:
  BrokerDetaileInfo();
  virtual ~BrokerDetaileInfo();

  BrokerDetaileInfo(const BrokerDetaileInfo& from);

  inline BrokerDetaileInfo& operator=(const BrokerDetaileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerDetaileInfo& default_instance();

  void Swap(BrokerDetaileInfo* other);

  // implements Message ----------------------------------------------

  inline BrokerDetaileInfo* New() const { return New(NULL); }

  BrokerDetaileInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerDetaileInfo& from);
  void MergeFrom(const BrokerDetaileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerDetaileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BrokerName = 1;
  bool has_brokername() const;
  void clear_brokername();
  static const int kBrokerNameFieldNumber = 1;
  const ::std::string& brokername() const;
  void set_brokername(const ::std::string& value);
  void set_brokername(const char* value);
  void set_brokername(const char* value, size_t size);
  ::std::string* mutable_brokername();
  ::std::string* release_brokername();
  void set_allocated_brokername(::std::string* brokername);

  // optional int64 FirstStockNum = 2;
  bool has_firststocknum() const;
  void clear_firststocknum();
  static const int kFirstStockNumFieldNumber = 2;
  ::google::protobuf::int64 firststocknum() const;
  void set_firststocknum(::google::protobuf::int64 value);

  // optional int64 LastStockNum = 3;
  bool has_laststocknum() const;
  void clear_laststocknum();
  static const int kLastStockNumFieldNumber = 3;
  ::google::protobuf::int64 laststocknum() const;
  void set_laststocknum(::google::protobuf::int64 value);

  // optional int64 MainStockNum = 4;
  bool has_mainstocknum() const;
  void clear_mainstocknum();
  static const int kMainStockNumFieldNumber = 4;
  ::google::protobuf::int64 mainstocknum() const;
  void set_mainstocknum(::google::protobuf::int64 value);

  // optional int64 AvgPE = 5;
  bool has_avgpe() const;
  void clear_avgpe();
  static const int kAvgPEFieldNumber = 5;
  ::google::protobuf::int64 avgpe() const;
  void set_avgpe(::google::protobuf::int64 value);

  // optional int64 AvgPB = 6;
  bool has_avgpb() const;
  void clear_avgpb();
  static const int kAvgPBFieldNumber = 6;
  ::google::protobuf::int64 avgpb() const;
  void set_avgpb(::google::protobuf::int64 value);

  // optional int64 TotalValue = 7;
  bool has_totalvalue() const;
  void clear_totalvalue();
  static const int kTotalValueFieldNumber = 7;
  ::google::protobuf::int64 totalvalue() const;
  void set_totalvalue(::google::protobuf::int64 value);

  // repeated .dzhyun.BrokerStock Data = 8;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::dzhyun::BrokerStock& data(int index) const;
  ::dzhyun::BrokerStock* mutable_data(int index);
  ::dzhyun::BrokerStock* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.BrokerDetaileInfo)
 private:
  inline void set_has_brokername();
  inline void clear_has_brokername();
  inline void set_has_firststocknum();
  inline void clear_has_firststocknum();
  inline void set_has_laststocknum();
  inline void clear_has_laststocknum();
  inline void set_has_mainstocknum();
  inline void clear_has_mainstocknum();
  inline void set_has_avgpe();
  inline void clear_has_avgpe();
  inline void set_has_avgpb();
  inline void clear_has_avgpb();
  inline void set_has_totalvalue();
  inline void clear_has_totalvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr brokername_;
  ::google::protobuf::int64 firststocknum_;
  ::google::protobuf::int64 laststocknum_;
  ::google::protobuf::int64 mainstocknum_;
  ::google::protobuf::int64 avgpe_;
  ::google::protobuf::int64 avgpb_;
  ::google::protobuf::int64 totalvalue_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static BrokerDetaileInfo* default_instance_;
};
// -------------------------------------------------------------------

class BrokerInfo : public ::google::protobuf::Message {
 public:
  BrokerInfo();
  virtual ~BrokerInfo();

  BrokerInfo(const BrokerInfo& from);

  inline BrokerInfo& operator=(const BrokerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerInfo& default_instance();

  void Swap(BrokerInfo* other);

  // implements Message ----------------------------------------------

  inline BrokerInfo* New() const { return New(NULL); }

  BrokerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerInfo& from);
  void MergeFrom(const BrokerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BrokerName = 1;
  bool has_brokername() const;
  void clear_brokername();
  static const int kBrokerNameFieldNumber = 1;
  const ::std::string& brokername() const;
  void set_brokername(const ::std::string& value);
  void set_brokername(const char* value);
  void set_brokername(const char* value, size_t size);
  ::std::string* mutable_brokername();
  ::std::string* release_brokername();
  void set_allocated_brokername(::std::string* brokername);

  // required string BeginDate = 2;
  bool has_begindate() const;
  void clear_begindate();
  static const int kBeginDateFieldNumber = 2;
  const ::std::string& begindate() const;
  void set_begindate(const ::std::string& value);
  void set_begindate(const char* value);
  void set_begindate(const char* value, size_t size);
  ::std::string* mutable_begindate();
  ::std::string* release_begindate();
  void set_allocated_begindate(::std::string* begindate);

  // optional int64 InitAmount = 3;
  bool has_initamount() const;
  void clear_initamount();
  static const int kInitAmountFieldNumber = 3;
  ::google::protobuf::int64 initamount() const;
  void set_initamount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.BrokerInfo)
 private:
  inline void set_has_brokername();
  inline void clear_has_brokername();
  inline void set_has_begindate();
  inline void clear_has_begindate();
  inline void set_has_initamount();
  inline void clear_has_initamount();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr brokername_;
  ::google::protobuf::internal::ArenaStringPtr begindate_;
  ::google::protobuf::int64 initamount_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static BrokerInfo* default_instance_;
};
// -------------------------------------------------------------------

class StockBrokerInfo : public ::google::protobuf::Message {
 public:
  StockBrokerInfo();
  virtual ~StockBrokerInfo();

  StockBrokerInfo(const StockBrokerInfo& from);

  inline StockBrokerInfo& operator=(const StockBrokerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockBrokerInfo& default_instance();

  void Swap(StockBrokerInfo* other);

  // implements Message ----------------------------------------------

  inline StockBrokerInfo* New() const { return New(NULL); }

  StockBrokerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockBrokerInfo& from);
  void MergeFrom(const StockBrokerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockBrokerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // repeated .dzhyun.BrokerInfo Data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::dzhyun::BrokerInfo& data(int index) const;
  ::dzhyun::BrokerInfo* mutable_data(int index);
  ::dzhyun::BrokerInfo* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.StockBrokerInfo)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static StockBrokerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IssueDetaileInfo : public ::google::protobuf::Message {
 public:
  IssueDetaileInfo();
  virtual ~IssueDetaileInfo();

  IssueDetaileInfo(const IssueDetaileInfo& from);

  inline IssueDetaileInfo& operator=(const IssueDetaileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueDetaileInfo& default_instance();

  void Swap(IssueDetaileInfo* other);

  // implements Message ----------------------------------------------

  inline IssueDetaileInfo* New() const { return New(NULL); }

  IssueDetaileInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IssueDetaileInfo& from);
  void MergeFrom(const IssueDetaileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IssueDetaileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional int64 IssueAmount = 3;
  bool has_issueamount() const;
  void clear_issueamount();
  static const int kIssueAmountFieldNumber = 3;
  ::google::protobuf::int64 issueamount() const;
  void set_issueamount(::google::protobuf::int64 value);

  // optional int64 CollectCapital = 4;
  bool has_collectcapital() const;
  void clear_collectcapital();
  static const int kCollectCapitalFieldNumber = 4;
  ::google::protobuf::int64 collectcapital() const;
  void set_collectcapital(::google::protobuf::int64 value);

  // optional string IssuePrice = 5;
  bool has_issueprice() const;
  void clear_issueprice();
  static const int kIssuePriceFieldNumber = 5;
  const ::std::string& issueprice() const;
  void set_issueprice(const ::std::string& value);
  void set_issueprice(const char* value);
  void set_issueprice(const char* value, size_t size);
  ::std::string* mutable_issueprice();
  ::std::string* release_issueprice();
  void set_allocated_issueprice(::std::string* issueprice);

  // optional int64 LastClose = 6;
  bool has_lastclose() const;
  void clear_lastclose();
  static const int kLastCloseFieldNumber = 6;
  ::google::protobuf::int64 lastclose() const;
  void set_lastclose(::google::protobuf::int64 value);

  // optional int64 IssuePE = 7;
  bool has_issuepe() const;
  void clear_issuepe();
  static const int kIssuePEFieldNumber = 7;
  ::google::protobuf::int64 issuepe() const;
  void set_issuepe(::google::protobuf::int64 value);

  // optional int64 OverflowRatio = 8;
  bool has_overflowratio() const;
  void clear_overflowratio();
  static const int kOverflowRatioFieldNumber = 8;
  ::google::protobuf::int64 overflowratio() const;
  void set_overflowratio(::google::protobuf::int64 value);

  // optional string ProjectAdvance = 9;
  bool has_projectadvance() const;
  void clear_projectadvance();
  static const int kProjectAdvanceFieldNumber = 9;
  const ::std::string& projectadvance() const;
  void set_projectadvance(const ::std::string& value);
  void set_projectadvance(const char* value);
  void set_projectadvance(const char* value, size_t size);
  ::std::string* mutable_projectadvance();
  ::std::string* release_projectadvance();
  void set_allocated_projectadvance(::std::string* projectadvance);

  // optional string IssueDate = 10;
  bool has_issuedate() const;
  void clear_issuedate();
  static const int kIssueDateFieldNumber = 10;
  const ::std::string& issuedate() const;
  void set_issuedate(const ::std::string& value);
  void set_issuedate(const char* value);
  void set_issuedate(const char* value, size_t size);
  ::std::string* mutable_issuedate();
  ::std::string* release_issuedate();
  void set_allocated_issuedate(::std::string* issuedate);

  // optional string IssueTarget = 11;
  bool has_issuetarget() const;
  void clear_issuetarget();
  static const int kIssueTargetFieldNumber = 11;
  const ::std::string& issuetarget() const;
  void set_issuetarget(const ::std::string& value);
  void set_issuetarget(const char* value);
  void set_issuetarget(const char* value, size_t size);
  ::std::string* mutable_issuetarget();
  ::std::string* release_issuetarget();
  void set_allocated_issuetarget(::std::string* issuetarget);

  // @@protoc_insertion_point(class_scope:dzhyun.IssueDetaileInfo)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_issueamount();
  inline void clear_has_issueamount();
  inline void set_has_collectcapital();
  inline void clear_has_collectcapital();
  inline void set_has_issueprice();
  inline void clear_has_issueprice();
  inline void set_has_lastclose();
  inline void clear_has_lastclose();
  inline void set_has_issuepe();
  inline void clear_has_issuepe();
  inline void set_has_overflowratio();
  inline void clear_has_overflowratio();
  inline void set_has_projectadvance();
  inline void clear_has_projectadvance();
  inline void set_has_issuedate();
  inline void clear_has_issuedate();
  inline void set_has_issuetarget();
  inline void clear_has_issuetarget();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::int64 issueamount_;
  ::google::protobuf::int64 collectcapital_;
  ::google::protobuf::internal::ArenaStringPtr issueprice_;
  ::google::protobuf::int64 lastclose_;
  ::google::protobuf::int64 issuepe_;
  ::google::protobuf::int64 overflowratio_;
  ::google::protobuf::internal::ArenaStringPtr projectadvance_;
  ::google::protobuf::internal::ArenaStringPtr issuedate_;
  ::google::protobuf::internal::ArenaStringPtr issuetarget_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static IssueDetaileInfo* default_instance_;
};
// -------------------------------------------------------------------

class IssueStock : public ::google::protobuf::Message {
 public:
  IssueStock();
  virtual ~IssueStock();

  IssueStock(const IssueStock& from);

  inline IssueStock& operator=(const IssueStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueStock& default_instance();

  void Swap(IssueStock* other);

  // implements Message ----------------------------------------------

  inline IssueStock* New() const { return New(NULL); }

  IssueStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IssueStock& from);
  void MergeFrom(const IssueStock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IssueStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional string NoticeDate = 3;
  bool has_noticedate() const;
  void clear_noticedate();
  static const int kNoticeDateFieldNumber = 3;
  const ::std::string& noticedate() const;
  void set_noticedate(const ::std::string& value);
  void set_noticedate(const char* value);
  void set_noticedate(const char* value, size_t size);
  ::std::string* mutable_noticedate();
  ::std::string* release_noticedate();
  void set_allocated_noticedate(::std::string* noticedate);

  // optional int64 IssueScale = 4;
  bool has_issuescale() const;
  void clear_issuescale();
  static const int kIssueScaleFieldNumber = 4;
  ::google::protobuf::int64 issuescale() const;
  void set_issuescale(::google::protobuf::int64 value);

  // optional string IssuePrice = 5;
  bool has_issueprice() const;
  void clear_issueprice();
  static const int kIssuePriceFieldNumber = 5;
  const ::std::string& issueprice() const;
  void set_issueprice(const ::std::string& value);
  void set_issueprice(const char* value);
  void set_issueprice(const char* value, size_t size);
  ::std::string* mutable_issueprice();
  ::std::string* release_issueprice();
  void set_allocated_issueprice(::std::string* issueprice);

  // optional string ProjectAdvance = 6;
  bool has_projectadvance() const;
  void clear_projectadvance();
  static const int kProjectAdvanceFieldNumber = 6;
  const ::std::string& projectadvance() const;
  void set_projectadvance(const ::std::string& value);
  void set_projectadvance(const char* value);
  void set_projectadvance(const char* value, size_t size);
  ::std::string* mutable_projectadvance();
  ::std::string* release_projectadvance();
  void set_allocated_projectadvance(::std::string* projectadvance);

  // optional int64 PE = 7;
  bool has_pe() const;
  void clear_pe();
  static const int kPEFieldNumber = 7;
  ::google::protobuf::int64 pe() const;
  void set_pe(::google::protobuf::int64 value);

  // optional string LatestNoticeDate = 8;
  bool has_latestnoticedate() const;
  void clear_latestnoticedate();
  static const int kLatestNoticeDateFieldNumber = 8;
  const ::std::string& latestnoticedate() const;
  void set_latestnoticedate(const ::std::string& value);
  void set_latestnoticedate(const char* value);
  void set_latestnoticedate(const char* value, size_t size);
  ::std::string* mutable_latestnoticedate();
  ::std::string* release_latestnoticedate();
  void set_allocated_latestnoticedate(::std::string* latestnoticedate);

  // @@protoc_insertion_point(class_scope:dzhyun.IssueStock)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_noticedate();
  inline void clear_has_noticedate();
  inline void set_has_issuescale();
  inline void clear_has_issuescale();
  inline void set_has_issueprice();
  inline void clear_has_issueprice();
  inline void set_has_projectadvance();
  inline void clear_has_projectadvance();
  inline void set_has_pe();
  inline void clear_has_pe();
  inline void set_has_latestnoticedate();
  inline void clear_has_latestnoticedate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::internal::ArenaStringPtr noticedate_;
  ::google::protobuf::int64 issuescale_;
  ::google::protobuf::internal::ArenaStringPtr issueprice_;
  ::google::protobuf::internal::ArenaStringPtr projectadvance_;
  ::google::protobuf::int64 pe_;
  ::google::protobuf::internal::ArenaStringPtr latestnoticedate_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static IssueStock* default_instance_;
};
// -------------------------------------------------------------------

class IssueStatInfo : public ::google::protobuf::Message {
 public:
  IssueStatInfo();
  virtual ~IssueStatInfo();

  IssueStatInfo(const IssueStatInfo& from);

  inline IssueStatInfo& operator=(const IssueStatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueStatInfo& default_instance();

  void Swap(IssueStatInfo* other);

  // implements Message ----------------------------------------------

  inline IssueStatInfo* New() const { return New(NULL); }

  IssueStatInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IssueStatInfo& from);
  void MergeFrom(const IssueStatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IssueStatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 StockNum = 1;
  bool has_stocknum() const;
  void clear_stocknum();
  static const int kStockNumFieldNumber = 1;
  ::google::protobuf::int64 stocknum() const;
  void set_stocknum(::google::protobuf::int64 value);

  // optional int64 TotalScale = 2;
  bool has_totalscale() const;
  void clear_totalscale();
  static const int kTotalScaleFieldNumber = 2;
  ::google::protobuf::int64 totalscale() const;
  void set_totalscale(::google::protobuf::int64 value);

  // optional int64 AvgPE = 3;
  bool has_avgpe() const;
  void clear_avgpe();
  static const int kAvgPEFieldNumber = 3;
  ::google::protobuf::int64 avgpe() const;
  void set_avgpe(::google::protobuf::int64 value);

  // repeated .dzhyun.IssueStock Data = 4;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::dzhyun::IssueStock& data(int index) const;
  ::dzhyun::IssueStock* mutable_data(int index);
  ::dzhyun::IssueStock* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.IssueStatInfo)
 private:
  inline void set_has_stocknum();
  inline void clear_has_stocknum();
  inline void set_has_totalscale();
  inline void clear_has_totalscale();
  inline void set_has_avgpe();
  inline void clear_has_avgpe();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 stocknum_;
  ::google::protobuf::int64 totalscale_;
  ::google::protobuf::int64 avgpe_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static IssueStatInfo* default_instance_;
};
// -------------------------------------------------------------------

class BrokerData : public ::google::protobuf::Message {
 public:
  BrokerData();
  virtual ~BrokerData();

  BrokerData(const BrokerData& from);

  inline BrokerData& operator=(const BrokerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerData& default_instance();

  void Swap(BrokerData* other);

  // implements Message ----------------------------------------------

  inline BrokerData* New() const { return New(NULL); }

  BrokerData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerData& from);
  void MergeFrom(const BrokerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BrokerName = 1;
  bool has_brokername() const;
  void clear_brokername();
  static const int kBrokerNameFieldNumber = 1;
  const ::std::string& brokername() const;
  void set_brokername(const ::std::string& value);
  void set_brokername(const char* value);
  void set_brokername(const char* value, size_t size);
  ::std::string* mutable_brokername();
  ::std::string* release_brokername();
  void set_allocated_brokername(::std::string* brokername);

  // optional int64 LastStockNum = 2;
  bool has_laststocknum() const;
  void clear_laststocknum();
  static const int kLastStockNumFieldNumber = 2;
  ::google::protobuf::int64 laststocknum() const;
  void set_laststocknum(::google::protobuf::int64 value);

  // optional int64 FirstStockNum = 3;
  bool has_firststocknum() const;
  void clear_firststocknum();
  static const int kFirstStockNumFieldNumber = 3;
  ::google::protobuf::int64 firststocknum() const;
  void set_firststocknum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.BrokerData)
 private:
  inline void set_has_brokername();
  inline void clear_has_brokername();
  inline void set_has_laststocknum();
  inline void clear_has_laststocknum();
  inline void set_has_firststocknum();
  inline void clear_has_firststocknum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr brokername_;
  ::google::protobuf::int64 laststocknum_;
  ::google::protobuf::int64 firststocknum_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static BrokerData* default_instance_;
};
// -------------------------------------------------------------------

class BrokerList : public ::google::protobuf::Message {
 public:
  BrokerList();
  virtual ~BrokerList();

  BrokerList(const BrokerList& from);

  inline BrokerList& operator=(const BrokerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerList& default_instance();

  void Swap(BrokerList* other);

  // implements Message ----------------------------------------------

  inline BrokerList* New() const { return New(NULL); }

  BrokerList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerList& from);
  void MergeFrom(const BrokerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrokerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 BrokerNum = 1;
  bool has_brokernum() const;
  void clear_brokernum();
  static const int kBrokerNumFieldNumber = 1;
  ::google::protobuf::int64 brokernum() const;
  void set_brokernum(::google::protobuf::int64 value);

  // repeated .dzhyun.BrokerData Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::BrokerData& data(int index) const;
  ::dzhyun::BrokerData* mutable_data(int index);
  ::dzhyun::BrokerData* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.BrokerList)
 private:
  inline void set_has_brokernum();
  inline void clear_has_brokernum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 brokernum_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static BrokerList* default_instance_;
};
// -------------------------------------------------------------------

class QuickReportData : public ::google::protobuf::Message {
 public:
  QuickReportData();
  virtual ~QuickReportData();

  QuickReportData(const QuickReportData& from);

  inline QuickReportData& operator=(const QuickReportData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickReportData& default_instance();

  void Swap(QuickReportData* other);

  // implements Message ----------------------------------------------

  inline QuickReportData* New() const { return New(NULL); }

  QuickReportData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickReportData& from);
  void MergeFrom(const QuickReportData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuickReportData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string StockCode = 1;
  bool has_stockcode() const;
  void clear_stockcode();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stockcode() const;
  void set_stockcode(const ::std::string& value);
  void set_stockcode(const char* value);
  void set_stockcode(const char* value, size_t size);
  ::std::string* mutable_stockcode();
  ::std::string* release_stockcode();
  void set_allocated_stockcode(::std::string* stockcode);

  // optional string StockName = 2;
  bool has_stockname() const;
  void clear_stockname();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stockname() const;
  void set_stockname(const ::std::string& value);
  void set_stockname(const char* value);
  void set_stockname(const char* value, size_t size);
  ::std::string* mutable_stockname();
  ::std::string* release_stockname();
  void set_allocated_stockname(::std::string* stockname);

  // optional string ReportDate = 3;
  bool has_reportdate() const;
  void clear_reportdate();
  static const int kReportDateFieldNumber = 3;
  const ::std::string& reportdate() const;
  void set_reportdate(const ::std::string& value);
  void set_reportdate(const char* value);
  void set_reportdate(const char* value, size_t size);
  ::std::string* mutable_reportdate();
  ::std::string* release_reportdate();
  void set_allocated_reportdate(::std::string* reportdate);

  // optional string ReportTitle = 4;
  bool has_reporttitle() const;
  void clear_reporttitle();
  static const int kReportTitleFieldNumber = 4;
  const ::std::string& reporttitle() const;
  void set_reporttitle(const ::std::string& value);
  void set_reporttitle(const char* value);
  void set_reporttitle(const char* value, size_t size);
  ::std::string* mutable_reporttitle();
  ::std::string* release_reporttitle();
  void set_allocated_reporttitle(::std::string* reporttitle);

  // optional int64 ClassTag = 5;
  bool has_classtag() const;
  void clear_classtag();
  static const int kClassTagFieldNumber = 5;
  ::google::protobuf::int64 classtag() const;
  void set_classtag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.QuickReportData)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_reportdate();
  inline void clear_has_reportdate();
  inline void set_has_reporttitle();
  inline void clear_has_reporttitle();
  inline void set_has_classtag();
  inline void clear_has_classtag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stockcode_;
  ::google::protobuf::internal::ArenaStringPtr stockname_;
  ::google::protobuf::internal::ArenaStringPtr reportdate_;
  ::google::protobuf::internal::ArenaStringPtr reporttitle_;
  ::google::protobuf::int64 classtag_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static QuickReportData* default_instance_;
};
// -------------------------------------------------------------------

class FinanceQuickReport : public ::google::protobuf::Message {
 public:
  FinanceQuickReport();
  virtual ~FinanceQuickReport();

  FinanceQuickReport(const FinanceQuickReport& from);

  inline FinanceQuickReport& operator=(const FinanceQuickReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinanceQuickReport& default_instance();

  void Swap(FinanceQuickReport* other);

  // implements Message ----------------------------------------------

  inline FinanceQuickReport* New() const { return New(NULL); }

  FinanceQuickReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinanceQuickReport& from);
  void MergeFrom(const FinanceQuickReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FinanceQuickReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dzhyun.QuickReportData Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::dzhyun::QuickReportData& data(int index) const;
  ::dzhyun::QuickReportData* mutable_data(int index);
  ::dzhyun::QuickReportData* add_data();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData >&
      data() const;

  // @@protoc_insertion_point(class_scope:dzhyun.FinanceQuickReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData > data_;
  friend void  protobuf_AddDesc_CldSanBanData_2eproto();
  friend void protobuf_AssignDesc_CldSanBanData_2eproto();
  friend void protobuf_ShutdownFile_CldSanBanData_2eproto();

  void InitAsDefaultInstance();
  static FinanceQuickReport* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OverallInfo

// optional int64 TotalStockNum = 1;
inline bool OverallInfo::has_totalstocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OverallInfo::set_has_totalstocknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OverallInfo::clear_has_totalstocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OverallInfo::clear_totalstocknum() {
  totalstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_totalstocknum();
}
inline ::google::protobuf::int64 OverallInfo::totalstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.TotalStockNum)
  return totalstocknum_;
}
inline void OverallInfo::set_totalstocknum(::google::protobuf::int64 value) {
  set_has_totalstocknum();
  totalstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.TotalStockNum)
}

// optional int64 AgreementStockNum = 2;
inline bool OverallInfo::has_agreementstocknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OverallInfo::set_has_agreementstocknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OverallInfo::clear_has_agreementstocknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OverallInfo::clear_agreementstocknum() {
  agreementstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_agreementstocknum();
}
inline ::google::protobuf::int64 OverallInfo::agreementstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.AgreementStockNum)
  return agreementstocknum_;
}
inline void OverallInfo::set_agreementstocknum(::google::protobuf::int64 value) {
  set_has_agreementstocknum();
  agreementstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.AgreementStockNum)
}

// optional int64 BrokerStockNum = 3;
inline bool OverallInfo::has_brokerstocknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OverallInfo::set_has_brokerstocknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OverallInfo::clear_has_brokerstocknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OverallInfo::clear_brokerstocknum() {
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_brokerstocknum();
}
inline ::google::protobuf::int64 OverallInfo::brokerstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.BrokerStockNum)
  return brokerstocknum_;
}
inline void OverallInfo::set_brokerstocknum(::google::protobuf::int64 value) {
  set_has_brokerstocknum();
  brokerstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.BrokerStockNum)
}

// optional int64 WaitStockNum = 4;
inline bool OverallInfo::has_waitstocknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OverallInfo::set_has_waitstocknum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OverallInfo::clear_has_waitstocknum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OverallInfo::clear_waitstocknum() {
  waitstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_waitstocknum();
}
inline ::google::protobuf::int64 OverallInfo::waitstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.WaitStockNum)
  return waitstocknum_;
}
inline void OverallInfo::set_waitstocknum(::google::protobuf::int64 value) {
  set_has_waitstocknum();
  waitstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.WaitStockNum)
}

// optional int64 ApplyStockNum = 5;
inline bool OverallInfo::has_applystocknum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OverallInfo::set_has_applystocknum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OverallInfo::clear_has_applystocknum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OverallInfo::clear_applystocknum() {
  applystocknum_ = GOOGLE_LONGLONG(0);
  clear_has_applystocknum();
}
inline ::google::protobuf::int64 OverallInfo::applystocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.OverallInfo.ApplyStockNum)
  return applystocknum_;
}
inline void OverallInfo::set_applystocknum(::google::protobuf::int64 value) {
  set_has_applystocknum();
  applystocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OverallInfo.ApplyStockNum)
}

// -------------------------------------------------------------------

// TodayListStock

// required string StockCode = 1;
inline bool TodayListStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayListStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayListStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayListStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& TodayListStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.StockCode)
}
inline void TodayListStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.StockCode)
}
inline void TodayListStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.StockCode)
}
inline ::std::string* TodayListStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayListStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.StockCode)
}

// optional string StockName = 2;
inline bool TodayListStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayListStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayListStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayListStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& TodayListStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.StockName)
}
inline void TodayListStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.StockName)
}
inline void TodayListStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.StockName)
}
inline ::std::string* TodayListStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayListStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.StockName)
}

// optional string MainBroker = 3;
inline bool TodayListStock::has_mainbroker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayListStock::set_has_mainbroker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayListStock::clear_has_mainbroker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayListStock::clear_mainbroker() {
  mainbroker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainbroker();
}
inline const ::std::string& TodayListStock::mainbroker() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.MainBroker)
  return mainbroker_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_mainbroker(const ::std::string& value) {
  set_has_mainbroker();
  mainbroker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.MainBroker)
}
inline void TodayListStock::set_mainbroker(const char* value) {
  set_has_mainbroker();
  mainbroker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.MainBroker)
}
inline void TodayListStock::set_mainbroker(const char* value, size_t size) {
  set_has_mainbroker();
  mainbroker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.MainBroker)
}
inline ::std::string* TodayListStock::mutable_mainbroker() {
  set_has_mainbroker();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.MainBroker)
  return mainbroker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayListStock::release_mainbroker() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.MainBroker)
  clear_has_mainbroker();
  return mainbroker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_allocated_mainbroker(::std::string* mainbroker) {
  if (mainbroker != NULL) {
    set_has_mainbroker();
  } else {
    clear_has_mainbroker();
  }
  mainbroker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainbroker);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.MainBroker)
}

// optional string Industry = 4;
inline bool TodayListStock::has_industry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TodayListStock::set_has_industry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TodayListStock::clear_has_industry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TodayListStock::clear_industry() {
  industry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_industry();
}
inline const ::std::string& TodayListStock::industry() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStock.Industry)
  return industry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_industry(const ::std::string& value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStock.Industry)
}
inline void TodayListStock::set_industry(const char* value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayListStock.Industry)
}
inline void TodayListStock::set_industry(const char* value, size_t size) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayListStock.Industry)
}
inline ::std::string* TodayListStock::mutable_industry() {
  set_has_industry();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStock.Industry)
  return industry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayListStock::release_industry() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayListStock.Industry)
  clear_has_industry();
  return industry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayListStock::set_allocated_industry(::std::string* industry) {
  if (industry != NULL) {
    set_has_industry();
  } else {
    clear_has_industry();
  }
  industry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industry);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayListStock.Industry)
}

// -------------------------------------------------------------------

// TodayListStocks

// required int64 ListStockNum = 1;
inline bool TodayListStocks::has_liststocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayListStocks::set_has_liststocknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayListStocks::clear_has_liststocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayListStocks::clear_liststocknum() {
  liststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_liststocknum();
}
inline ::google::protobuf::int64 TodayListStocks::liststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStocks.ListStockNum)
  return liststocknum_;
}
inline void TodayListStocks::set_liststocknum(::google::protobuf::int64 value) {
  set_has_liststocknum();
  liststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayListStocks.ListStockNum)
}

// repeated .dzhyun.TodayListStock Data = 2;
inline int TodayListStocks::data_size() const {
  return data_.size();
}
inline void TodayListStocks::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::TodayListStock& TodayListStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayListStocks.Data)
  return data_.Get(index);
}
inline ::dzhyun::TodayListStock* TodayListStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayListStocks.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::TodayListStock* TodayListStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayListStocks.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock >*
TodayListStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayListStocks.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayListStock >&
TodayListStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayListStocks.Data)
  return data_;
}

// -------------------------------------------------------------------

// TodayBrokerStock

// required string StockCode = 1;
inline bool TodayBrokerStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayBrokerStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayBrokerStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayBrokerStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& TodayBrokerStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayBrokerStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.StockCode)
}
inline void TodayBrokerStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayBrokerStock.StockCode)
}
inline void TodayBrokerStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayBrokerStock.StockCode)
}
inline ::std::string* TodayBrokerStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayBrokerStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayBrokerStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayBrokerStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayBrokerStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayBrokerStock.StockCode)
}

// optional string StockName = 2;
inline bool TodayBrokerStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayBrokerStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayBrokerStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayBrokerStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& TodayBrokerStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayBrokerStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.StockName)
}
inline void TodayBrokerStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayBrokerStock.StockName)
}
inline void TodayBrokerStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayBrokerStock.StockName)
}
inline ::std::string* TodayBrokerStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayBrokerStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayBrokerStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayBrokerStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayBrokerStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayBrokerStock.StockName)
}

// optional int64 BrokerNum = 3;
inline bool TodayBrokerStock::has_brokernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayBrokerStock::set_has_brokernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayBrokerStock::clear_has_brokernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayBrokerStock::clear_brokernum() {
  brokernum_ = GOOGLE_LONGLONG(0);
  clear_has_brokernum();
}
inline ::google::protobuf::int64 TodayBrokerStock::brokernum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.BrokerNum)
  return brokernum_;
}
inline void TodayBrokerStock::set_brokernum(::google::protobuf::int64 value) {
  set_has_brokernum();
  brokernum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.BrokerNum)
}

// optional int64 NewAddNum = 4;
inline bool TodayBrokerStock::has_newaddnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TodayBrokerStock::set_has_newaddnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TodayBrokerStock::clear_has_newaddnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TodayBrokerStock::clear_newaddnum() {
  newaddnum_ = GOOGLE_LONGLONG(0);
  clear_has_newaddnum();
}
inline ::google::protobuf::int64 TodayBrokerStock::newaddnum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStock.NewAddNum)
  return newaddnum_;
}
inline void TodayBrokerStock::set_newaddnum(::google::protobuf::int64 value) {
  set_has_newaddnum();
  newaddnum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStock.NewAddNum)
}

// -------------------------------------------------------------------

// TodayBrokerStocks

// required int64 BrokerStockNum = 1;
inline bool TodayBrokerStocks::has_brokerstocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayBrokerStocks::set_has_brokerstocknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayBrokerStocks::clear_has_brokerstocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayBrokerStocks::clear_brokerstocknum() {
  brokerstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_brokerstocknum();
}
inline ::google::protobuf::int64 TodayBrokerStocks::brokerstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStocks.BrokerStockNum)
  return brokerstocknum_;
}
inline void TodayBrokerStocks::set_brokerstocknum(::google::protobuf::int64 value) {
  set_has_brokerstocknum();
  brokerstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayBrokerStocks.BrokerStockNum)
}

// repeated .dzhyun.TodayBrokerStock Data = 2;
inline int TodayBrokerStocks::data_size() const {
  return data_.size();
}
inline void TodayBrokerStocks::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::TodayBrokerStock& TodayBrokerStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayBrokerStocks.Data)
  return data_.Get(index);
}
inline ::dzhyun::TodayBrokerStock* TodayBrokerStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayBrokerStocks.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::TodayBrokerStock* TodayBrokerStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayBrokerStocks.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock >*
TodayBrokerStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayBrokerStocks.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayBrokerStock >&
TodayBrokerStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayBrokerStocks.Data)
  return data_;
}

// -------------------------------------------------------------------

// TodayConvertStock

// required string StockCode = 1;
inline bool TodayConvertStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayConvertStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayConvertStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayConvertStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& TodayConvertStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayConvertStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStock.StockCode)
}
inline void TodayConvertStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayConvertStock.StockCode)
}
inline void TodayConvertStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayConvertStock.StockCode)
}
inline ::std::string* TodayConvertStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayConvertStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayConvertStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayConvertStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayConvertStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayConvertStock.StockCode)
}

// optional string StockName = 2;
inline bool TodayConvertStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayConvertStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayConvertStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayConvertStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& TodayConvertStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayConvertStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStock.StockName)
}
inline void TodayConvertStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayConvertStock.StockName)
}
inline void TodayConvertStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayConvertStock.StockName)
}
inline ::std::string* TodayConvertStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayConvertStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayConvertStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayConvertStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayConvertStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayConvertStock.StockName)
}

// optional int64 BrokerNum = 3;
inline bool TodayConvertStock::has_brokernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayConvertStock::set_has_brokernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayConvertStock::clear_has_brokernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayConvertStock::clear_brokernum() {
  brokernum_ = GOOGLE_LONGLONG(0);
  clear_has_brokernum();
}
inline ::google::protobuf::int64 TodayConvertStock::brokernum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStock.BrokerNum)
  return brokernum_;
}
inline void TodayConvertStock::set_brokernum(::google::protobuf::int64 value) {
  set_has_brokernum();
  brokernum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStock.BrokerNum)
}

// -------------------------------------------------------------------

// TodayConvertStocks

// required int64 ConvertStockNum = 1;
inline bool TodayConvertStocks::has_convertstocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayConvertStocks::set_has_convertstocknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayConvertStocks::clear_has_convertstocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayConvertStocks::clear_convertstocknum() {
  convertstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_convertstocknum();
}
inline ::google::protobuf::int64 TodayConvertStocks::convertstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStocks.ConvertStockNum)
  return convertstocknum_;
}
inline void TodayConvertStocks::set_convertstocknum(::google::protobuf::int64 value) {
  set_has_convertstocknum();
  convertstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayConvertStocks.ConvertStockNum)
}

// repeated .dzhyun.TodayConvertStock Data = 2;
inline int TodayConvertStocks::data_size() const {
  return data_.size();
}
inline void TodayConvertStocks::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::TodayConvertStock& TodayConvertStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayConvertStocks.Data)
  return data_.Get(index);
}
inline ::dzhyun::TodayConvertStock* TodayConvertStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayConvertStocks.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::TodayConvertStock* TodayConvertStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayConvertStocks.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock >*
TodayConvertStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayConvertStocks.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayConvertStock >&
TodayConvertStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayConvertStocks.Data)
  return data_;
}

// -------------------------------------------------------------------

// TodayIssueStock

// required string StockCode = 1;
inline bool TodayIssueStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayIssueStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayIssueStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayIssueStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& TodayIssueStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.StockCode)
}
inline void TodayIssueStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.StockCode)
}
inline void TodayIssueStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.StockCode)
}
inline ::std::string* TodayIssueStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayIssueStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.StockCode)
}

// optional string StockName = 2;
inline bool TodayIssueStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayIssueStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayIssueStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayIssueStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& TodayIssueStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.StockName)
}
inline void TodayIssueStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.StockName)
}
inline void TodayIssueStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.StockName)
}
inline ::std::string* TodayIssueStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayIssueStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.StockName)
}

// optional string ProjectAdvance = 3;
inline bool TodayIssueStock::has_projectadvance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayIssueStock::set_has_projectadvance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayIssueStock::clear_has_projectadvance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayIssueStock::clear_projectadvance() {
  projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projectadvance();
}
inline const ::std::string& TodayIssueStock::projectadvance() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.ProjectAdvance)
  return projectadvance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_projectadvance(const ::std::string& value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.ProjectAdvance)
}
inline void TodayIssueStock::set_projectadvance(const char* value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.ProjectAdvance)
}
inline void TodayIssueStock::set_projectadvance(const char* value, size_t size) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.ProjectAdvance)
}
inline ::std::string* TodayIssueStock::mutable_projectadvance() {
  set_has_projectadvance();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.ProjectAdvance)
  return projectadvance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayIssueStock::release_projectadvance() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.ProjectAdvance)
  clear_has_projectadvance();
  return projectadvance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_allocated_projectadvance(::std::string* projectadvance) {
  if (projectadvance != NULL) {
    set_has_projectadvance();
  } else {
    clear_has_projectadvance();
  }
  projectadvance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectadvance);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.ProjectAdvance)
}

// optional string IssuePrice = 4;
inline bool TodayIssueStock::has_issueprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TodayIssueStock::set_has_issueprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TodayIssueStock::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TodayIssueStock::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
inline const ::std::string& TodayIssueStock::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStock.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStock.IssuePrice)
}
inline void TodayIssueStock::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TodayIssueStock.IssuePrice)
}
inline void TodayIssueStock::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TodayIssueStock.IssuePrice)
}
inline ::std::string* TodayIssueStock::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStock.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TodayIssueStock::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.TodayIssueStock.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TodayIssueStock::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TodayIssueStock.IssuePrice)
}

// -------------------------------------------------------------------

// TodayIssueStocks

// required int64 IssueStockNum = 1;
inline bool TodayIssueStocks::has_issuestocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayIssueStocks::set_has_issuestocknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayIssueStocks::clear_has_issuestocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayIssueStocks::clear_issuestocknum() {
  issuestocknum_ = GOOGLE_LONGLONG(0);
  clear_has_issuestocknum();
}
inline ::google::protobuf::int64 TodayIssueStocks::issuestocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStocks.IssueStockNum)
  return issuestocknum_;
}
inline void TodayIssueStocks::set_issuestocknum(::google::protobuf::int64 value) {
  set_has_issuestocknum();
  issuestocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TodayIssueStocks.IssueStockNum)
}

// repeated .dzhyun.TodayIssueStock Data = 2;
inline int TodayIssueStocks::data_size() const {
  return data_.size();
}
inline void TodayIssueStocks::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::TodayIssueStock& TodayIssueStocks::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.TodayIssueStocks.Data)
  return data_.Get(index);
}
inline ::dzhyun::TodayIssueStock* TodayIssueStocks::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.TodayIssueStocks.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::TodayIssueStock* TodayIssueStocks::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.TodayIssueStocks.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock >*
TodayIssueStocks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.TodayIssueStocks.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::TodayIssueStock >&
TodayIssueStocks::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.TodayIssueStocks.Data)
  return data_;
}

// -------------------------------------------------------------------

// BrokerStock

// required string StockCode = 1;
inline bool BrokerStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& BrokerStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.StockCode)
}
inline void BrokerStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerStock.StockCode)
}
inline void BrokerStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerStock.StockCode)
}
inline ::std::string* BrokerStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerStock.StockCode)
}

// optional string StockName = 2;
inline bool BrokerStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrokerStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrokerStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrokerStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& BrokerStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.StockName)
}
inline void BrokerStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerStock.StockName)
}
inline void BrokerStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerStock.StockName)
}
inline ::std::string* BrokerStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerStock.StockName)
}

// optional int64 Price = 3;
inline bool BrokerStock::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrokerStock::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrokerStock::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrokerStock::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 BrokerStock::price() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.Price)
  return price_;
}
inline void BrokerStock::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.Price)
}

// optional int64 InitAmount = 4;
inline bool BrokerStock::has_initamount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BrokerStock::set_has_initamount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BrokerStock::clear_has_initamount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BrokerStock::clear_initamount() {
  initamount_ = GOOGLE_LONGLONG(0);
  clear_has_initamount();
}
inline ::google::protobuf::int64 BrokerStock::initamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.InitAmount)
  return initamount_;
}
inline void BrokerStock::set_initamount(::google::protobuf::int64 value) {
  set_has_initamount();
  initamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.InitAmount)
}

// optional int64 InitCost = 5;
inline bool BrokerStock::has_initcost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BrokerStock::set_has_initcost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BrokerStock::clear_has_initcost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BrokerStock::clear_initcost() {
  initcost_ = GOOGLE_LONGLONG(0);
  clear_has_initcost();
}
inline ::google::protobuf::int64 BrokerStock::initcost() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerStock.InitCost)
  return initcost_;
}
inline void BrokerStock::set_initcost(::google::protobuf::int64 value) {
  set_has_initcost();
  initcost_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerStock.InitCost)
}

// -------------------------------------------------------------------

// BrokerDetaileInfo

// required string BrokerName = 1;
inline bool BrokerDetaileInfo::has_brokername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerDetaileInfo::set_has_brokername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerDetaileInfo::clear_has_brokername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerDetaileInfo::clear_brokername() {
  brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokername();
}
inline const ::std::string& BrokerDetaileInfo::brokername() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.BrokerName)
  return brokername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerDetaileInfo::set_brokername(const ::std::string& value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.BrokerName)
}
inline void BrokerDetaileInfo::set_brokername(const char* value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerDetaileInfo.BrokerName)
}
inline void BrokerDetaileInfo::set_brokername(const char* value, size_t size) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerDetaileInfo.BrokerName)
}
inline ::std::string* BrokerDetaileInfo::mutable_brokername() {
  set_has_brokername();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerDetaileInfo.BrokerName)
  return brokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerDetaileInfo::release_brokername() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerDetaileInfo.BrokerName)
  clear_has_brokername();
  return brokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerDetaileInfo::set_allocated_brokername(::std::string* brokername) {
  if (brokername != NULL) {
    set_has_brokername();
  } else {
    clear_has_brokername();
  }
  brokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokername);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerDetaileInfo.BrokerName)
}

// optional int64 FirstStockNum = 2;
inline bool BrokerDetaileInfo::has_firststocknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrokerDetaileInfo::set_has_firststocknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrokerDetaileInfo::clear_has_firststocknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrokerDetaileInfo::clear_firststocknum() {
  firststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_firststocknum();
}
inline ::google::protobuf::int64 BrokerDetaileInfo::firststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.FirstStockNum)
  return firststocknum_;
}
inline void BrokerDetaileInfo::set_firststocknum(::google::protobuf::int64 value) {
  set_has_firststocknum();
  firststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.FirstStockNum)
}

// optional int64 LastStockNum = 3;
inline bool BrokerDetaileInfo::has_laststocknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrokerDetaileInfo::set_has_laststocknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrokerDetaileInfo::clear_has_laststocknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrokerDetaileInfo::clear_laststocknum() {
  laststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_laststocknum();
}
inline ::google::protobuf::int64 BrokerDetaileInfo::laststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.LastStockNum)
  return laststocknum_;
}
inline void BrokerDetaileInfo::set_laststocknum(::google::protobuf::int64 value) {
  set_has_laststocknum();
  laststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.LastStockNum)
}

// optional int64 MainStockNum = 4;
inline bool BrokerDetaileInfo::has_mainstocknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BrokerDetaileInfo::set_has_mainstocknum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BrokerDetaileInfo::clear_has_mainstocknum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BrokerDetaileInfo::clear_mainstocknum() {
  mainstocknum_ = GOOGLE_LONGLONG(0);
  clear_has_mainstocknum();
}
inline ::google::protobuf::int64 BrokerDetaileInfo::mainstocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.MainStockNum)
  return mainstocknum_;
}
inline void BrokerDetaileInfo::set_mainstocknum(::google::protobuf::int64 value) {
  set_has_mainstocknum();
  mainstocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.MainStockNum)
}

// optional int64 AvgPE = 5;
inline bool BrokerDetaileInfo::has_avgpe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BrokerDetaileInfo::set_has_avgpe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BrokerDetaileInfo::clear_has_avgpe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BrokerDetaileInfo::clear_avgpe() {
  avgpe_ = GOOGLE_LONGLONG(0);
  clear_has_avgpe();
}
inline ::google::protobuf::int64 BrokerDetaileInfo::avgpe() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.AvgPE)
  return avgpe_;
}
inline void BrokerDetaileInfo::set_avgpe(::google::protobuf::int64 value) {
  set_has_avgpe();
  avgpe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.AvgPE)
}

// optional int64 AvgPB = 6;
inline bool BrokerDetaileInfo::has_avgpb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BrokerDetaileInfo::set_has_avgpb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BrokerDetaileInfo::clear_has_avgpb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BrokerDetaileInfo::clear_avgpb() {
  avgpb_ = GOOGLE_LONGLONG(0);
  clear_has_avgpb();
}
inline ::google::protobuf::int64 BrokerDetaileInfo::avgpb() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.AvgPB)
  return avgpb_;
}
inline void BrokerDetaileInfo::set_avgpb(::google::protobuf::int64 value) {
  set_has_avgpb();
  avgpb_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.AvgPB)
}

// optional int64 TotalValue = 7;
inline bool BrokerDetaileInfo::has_totalvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BrokerDetaileInfo::set_has_totalvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BrokerDetaileInfo::clear_has_totalvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BrokerDetaileInfo::clear_totalvalue() {
  totalvalue_ = GOOGLE_LONGLONG(0);
  clear_has_totalvalue();
}
inline ::google::protobuf::int64 BrokerDetaileInfo::totalvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.TotalValue)
  return totalvalue_;
}
inline void BrokerDetaileInfo::set_totalvalue(::google::protobuf::int64 value) {
  set_has_totalvalue();
  totalvalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerDetaileInfo.TotalValue)
}

// repeated .dzhyun.BrokerStock Data = 8;
inline int BrokerDetaileInfo::data_size() const {
  return data_.size();
}
inline void BrokerDetaileInfo::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::BrokerStock& BrokerDetaileInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerDetaileInfo.Data)
  return data_.Get(index);
}
inline ::dzhyun::BrokerStock* BrokerDetaileInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerDetaileInfo.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::BrokerStock* BrokerDetaileInfo::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.BrokerDetaileInfo.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock >*
BrokerDetaileInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.BrokerDetaileInfo.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerStock >&
BrokerDetaileInfo::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.BrokerDetaileInfo.Data)
  return data_;
}

// -------------------------------------------------------------------

// BrokerInfo

// required string BrokerName = 1;
inline bool BrokerInfo::has_brokername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerInfo::set_has_brokername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerInfo::clear_has_brokername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerInfo::clear_brokername() {
  brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokername();
}
inline const ::std::string& BrokerInfo::brokername() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerInfo.BrokerName)
  return brokername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerInfo::set_brokername(const ::std::string& value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerInfo.BrokerName)
}
inline void BrokerInfo::set_brokername(const char* value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerInfo.BrokerName)
}
inline void BrokerInfo::set_brokername(const char* value, size_t size) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerInfo.BrokerName)
}
inline ::std::string* BrokerInfo::mutable_brokername() {
  set_has_brokername();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerInfo.BrokerName)
  return brokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerInfo::release_brokername() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerInfo.BrokerName)
  clear_has_brokername();
  return brokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerInfo::set_allocated_brokername(::std::string* brokername) {
  if (brokername != NULL) {
    set_has_brokername();
  } else {
    clear_has_brokername();
  }
  brokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokername);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerInfo.BrokerName)
}

// required string BeginDate = 2;
inline bool BrokerInfo::has_begindate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrokerInfo::set_has_begindate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrokerInfo::clear_has_begindate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrokerInfo::clear_begindate() {
  begindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begindate();
}
inline const ::std::string& BrokerInfo::begindate() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerInfo.BeginDate)
  return begindate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerInfo::set_begindate(const ::std::string& value) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerInfo.BeginDate)
}
inline void BrokerInfo::set_begindate(const char* value) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerInfo.BeginDate)
}
inline void BrokerInfo::set_begindate(const char* value, size_t size) {
  set_has_begindate();
  begindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerInfo.BeginDate)
}
inline ::std::string* BrokerInfo::mutable_begindate() {
  set_has_begindate();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerInfo.BeginDate)
  return begindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerInfo::release_begindate() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerInfo.BeginDate)
  clear_has_begindate();
  return begindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerInfo::set_allocated_begindate(::std::string* begindate) {
  if (begindate != NULL) {
    set_has_begindate();
  } else {
    clear_has_begindate();
  }
  begindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begindate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerInfo.BeginDate)
}

// optional int64 InitAmount = 3;
inline bool BrokerInfo::has_initamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrokerInfo::set_has_initamount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrokerInfo::clear_has_initamount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrokerInfo::clear_initamount() {
  initamount_ = GOOGLE_LONGLONG(0);
  clear_has_initamount();
}
inline ::google::protobuf::int64 BrokerInfo::initamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerInfo.InitAmount)
  return initamount_;
}
inline void BrokerInfo::set_initamount(::google::protobuf::int64 value) {
  set_has_initamount();
  initamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerInfo.InitAmount)
}

// -------------------------------------------------------------------

// StockBrokerInfo

// required string StockCode = 1;
inline bool StockBrokerInfo::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockBrokerInfo::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockBrokerInfo::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockBrokerInfo::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& StockBrokerInfo::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockBrokerInfo.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBrokerInfo::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockBrokerInfo.StockCode)
}
inline void StockBrokerInfo::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockBrokerInfo.StockCode)
}
inline void StockBrokerInfo::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockBrokerInfo.StockCode)
}
inline ::std::string* StockBrokerInfo::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockBrokerInfo.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBrokerInfo::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.StockBrokerInfo.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBrokerInfo::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockBrokerInfo.StockCode)
}

// optional string StockName = 2;
inline bool StockBrokerInfo::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockBrokerInfo::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockBrokerInfo::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockBrokerInfo::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& StockBrokerInfo::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.StockBrokerInfo.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBrokerInfo::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.StockBrokerInfo.StockName)
}
inline void StockBrokerInfo::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.StockBrokerInfo.StockName)
}
inline void StockBrokerInfo::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.StockBrokerInfo.StockName)
}
inline ::std::string* StockBrokerInfo::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.StockBrokerInfo.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBrokerInfo::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.StockBrokerInfo.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBrokerInfo::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.StockBrokerInfo.StockName)
}

// repeated .dzhyun.BrokerInfo Data = 3;
inline int StockBrokerInfo::data_size() const {
  return data_.size();
}
inline void StockBrokerInfo::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::BrokerInfo& StockBrokerInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.StockBrokerInfo.Data)
  return data_.Get(index);
}
inline ::dzhyun::BrokerInfo* StockBrokerInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.StockBrokerInfo.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::BrokerInfo* StockBrokerInfo::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.StockBrokerInfo.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo >*
StockBrokerInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.StockBrokerInfo.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerInfo >&
StockBrokerInfo::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.StockBrokerInfo.Data)
  return data_;
}

// -------------------------------------------------------------------

// IssueDetaileInfo

// required string StockCode = 1;
inline bool IssueDetaileInfo::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IssueDetaileInfo::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IssueDetaileInfo::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IssueDetaileInfo::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& IssueDetaileInfo::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.StockCode)
}
inline void IssueDetaileInfo::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.StockCode)
}
inline void IssueDetaileInfo::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.StockCode)
}
inline ::std::string* IssueDetaileInfo::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueDetaileInfo::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.StockCode)
}

// optional string StockName = 2;
inline bool IssueDetaileInfo::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IssueDetaileInfo::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IssueDetaileInfo::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IssueDetaileInfo::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& IssueDetaileInfo::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.StockName)
}
inline void IssueDetaileInfo::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.StockName)
}
inline void IssueDetaileInfo::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.StockName)
}
inline ::std::string* IssueDetaileInfo::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueDetaileInfo::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.StockName)
}

// optional int64 IssueAmount = 3;
inline bool IssueDetaileInfo::has_issueamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IssueDetaileInfo::set_has_issueamount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IssueDetaileInfo::clear_has_issueamount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IssueDetaileInfo::clear_issueamount() {
  issueamount_ = GOOGLE_LONGLONG(0);
  clear_has_issueamount();
}
inline ::google::protobuf::int64 IssueDetaileInfo::issueamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssueAmount)
  return issueamount_;
}
inline void IssueDetaileInfo::set_issueamount(::google::protobuf::int64 value) {
  set_has_issueamount();
  issueamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssueAmount)
}

// optional int64 CollectCapital = 4;
inline bool IssueDetaileInfo::has_collectcapital() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IssueDetaileInfo::set_has_collectcapital() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IssueDetaileInfo::clear_has_collectcapital() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IssueDetaileInfo::clear_collectcapital() {
  collectcapital_ = GOOGLE_LONGLONG(0);
  clear_has_collectcapital();
}
inline ::google::protobuf::int64 IssueDetaileInfo::collectcapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.CollectCapital)
  return collectcapital_;
}
inline void IssueDetaileInfo::set_collectcapital(::google::protobuf::int64 value) {
  set_has_collectcapital();
  collectcapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.CollectCapital)
}

// optional string IssuePrice = 5;
inline bool IssueDetaileInfo::has_issueprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IssueDetaileInfo::set_has_issueprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IssueDetaileInfo::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IssueDetaileInfo::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
inline const ::std::string& IssueDetaileInfo::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssuePrice)
}
inline void IssueDetaileInfo::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.IssuePrice)
}
inline void IssueDetaileInfo::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.IssuePrice)
}
inline ::std::string* IssueDetaileInfo::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueDetaileInfo::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.IssuePrice)
}

// optional int64 LastClose = 6;
inline bool IssueDetaileInfo::has_lastclose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IssueDetaileInfo::set_has_lastclose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IssueDetaileInfo::clear_has_lastclose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IssueDetaileInfo::clear_lastclose() {
  lastclose_ = GOOGLE_LONGLONG(0);
  clear_has_lastclose();
}
inline ::google::protobuf::int64 IssueDetaileInfo::lastclose() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.LastClose)
  return lastclose_;
}
inline void IssueDetaileInfo::set_lastclose(::google::protobuf::int64 value) {
  set_has_lastclose();
  lastclose_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.LastClose)
}

// optional int64 IssuePE = 7;
inline bool IssueDetaileInfo::has_issuepe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IssueDetaileInfo::set_has_issuepe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IssueDetaileInfo::clear_has_issuepe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IssueDetaileInfo::clear_issuepe() {
  issuepe_ = GOOGLE_LONGLONG(0);
  clear_has_issuepe();
}
inline ::google::protobuf::int64 IssueDetaileInfo::issuepe() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssuePE)
  return issuepe_;
}
inline void IssueDetaileInfo::set_issuepe(::google::protobuf::int64 value) {
  set_has_issuepe();
  issuepe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssuePE)
}

// optional int64 OverflowRatio = 8;
inline bool IssueDetaileInfo::has_overflowratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IssueDetaileInfo::set_has_overflowratio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IssueDetaileInfo::clear_has_overflowratio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IssueDetaileInfo::clear_overflowratio() {
  overflowratio_ = GOOGLE_LONGLONG(0);
  clear_has_overflowratio();
}
inline ::google::protobuf::int64 IssueDetaileInfo::overflowratio() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.OverflowRatio)
  return overflowratio_;
}
inline void IssueDetaileInfo::set_overflowratio(::google::protobuf::int64 value) {
  set_has_overflowratio();
  overflowratio_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.OverflowRatio)
}

// optional string ProjectAdvance = 9;
inline bool IssueDetaileInfo::has_projectadvance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IssueDetaileInfo::set_has_projectadvance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IssueDetaileInfo::clear_has_projectadvance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IssueDetaileInfo::clear_projectadvance() {
  projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projectadvance();
}
inline const ::std::string& IssueDetaileInfo::projectadvance() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.ProjectAdvance)
  return projectadvance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_projectadvance(const ::std::string& value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.ProjectAdvance)
}
inline void IssueDetaileInfo::set_projectadvance(const char* value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.ProjectAdvance)
}
inline void IssueDetaileInfo::set_projectadvance(const char* value, size_t size) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.ProjectAdvance)
}
inline ::std::string* IssueDetaileInfo::mutable_projectadvance() {
  set_has_projectadvance();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.ProjectAdvance)
  return projectadvance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueDetaileInfo::release_projectadvance() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.ProjectAdvance)
  clear_has_projectadvance();
  return projectadvance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_allocated_projectadvance(::std::string* projectadvance) {
  if (projectadvance != NULL) {
    set_has_projectadvance();
  } else {
    clear_has_projectadvance();
  }
  projectadvance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectadvance);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.ProjectAdvance)
}

// optional string IssueDate = 10;
inline bool IssueDetaileInfo::has_issuedate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IssueDetaileInfo::set_has_issuedate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IssueDetaileInfo::clear_has_issuedate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IssueDetaileInfo::clear_issuedate() {
  issuedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuedate();
}
inline const ::std::string& IssueDetaileInfo::issuedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssueDate)
  return issuedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_issuedate(const ::std::string& value) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssueDate)
}
inline void IssueDetaileInfo::set_issuedate(const char* value) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.IssueDate)
}
inline void IssueDetaileInfo::set_issuedate(const char* value, size_t size) {
  set_has_issuedate();
  issuedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.IssueDate)
}
inline ::std::string* IssueDetaileInfo::mutable_issuedate() {
  set_has_issuedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.IssueDate)
  return issuedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueDetaileInfo::release_issuedate() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.IssueDate)
  clear_has_issuedate();
  return issuedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_allocated_issuedate(::std::string* issuedate) {
  if (issuedate != NULL) {
    set_has_issuedate();
  } else {
    clear_has_issuedate();
  }
  issuedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.IssueDate)
}

// optional string IssueTarget = 11;
inline bool IssueDetaileInfo::has_issuetarget() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IssueDetaileInfo::set_has_issuetarget() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IssueDetaileInfo::clear_has_issuetarget() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IssueDetaileInfo::clear_issuetarget() {
  issuetarget_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuetarget();
}
inline const ::std::string& IssueDetaileInfo::issuetarget() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueDetaileInfo.IssueTarget)
  return issuetarget_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_issuetarget(const ::std::string& value) {
  set_has_issuetarget();
  issuetarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueDetaileInfo.IssueTarget)
}
inline void IssueDetaileInfo::set_issuetarget(const char* value) {
  set_has_issuetarget();
  issuetarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueDetaileInfo.IssueTarget)
}
inline void IssueDetaileInfo::set_issuetarget(const char* value, size_t size) {
  set_has_issuetarget();
  issuetarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueDetaileInfo.IssueTarget)
}
inline ::std::string* IssueDetaileInfo::mutable_issuetarget() {
  set_has_issuetarget();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueDetaileInfo.IssueTarget)
  return issuetarget_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueDetaileInfo::release_issuetarget() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueDetaileInfo.IssueTarget)
  clear_has_issuetarget();
  return issuetarget_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueDetaileInfo::set_allocated_issuetarget(::std::string* issuetarget) {
  if (issuetarget != NULL) {
    set_has_issuetarget();
  } else {
    clear_has_issuetarget();
  }
  issuetarget_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuetarget);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueDetaileInfo.IssueTarget)
}

// -------------------------------------------------------------------

// IssueStock

// required string StockCode = 1;
inline bool IssueStock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IssueStock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IssueStock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IssueStock::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& IssueStock::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.StockCode)
}
inline void IssueStock::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.StockCode)
}
inline void IssueStock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.StockCode)
}
inline ::std::string* IssueStock::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueStock::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.StockCode)
}

// optional string StockName = 2;
inline bool IssueStock::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IssueStock::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IssueStock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IssueStock::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& IssueStock::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.StockName)
}
inline void IssueStock::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.StockName)
}
inline void IssueStock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.StockName)
}
inline ::std::string* IssueStock::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueStock::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.StockName)
}

// optional string NoticeDate = 3;
inline bool IssueStock::has_noticedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IssueStock::set_has_noticedate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IssueStock::clear_has_noticedate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IssueStock::clear_noticedate() {
  noticedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_noticedate();
}
inline const ::std::string& IssueStock::noticedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.NoticeDate)
  return noticedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_noticedate(const ::std::string& value) {
  set_has_noticedate();
  noticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.NoticeDate)
}
inline void IssueStock::set_noticedate(const char* value) {
  set_has_noticedate();
  noticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.NoticeDate)
}
inline void IssueStock::set_noticedate(const char* value, size_t size) {
  set_has_noticedate();
  noticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.NoticeDate)
}
inline ::std::string* IssueStock::mutable_noticedate() {
  set_has_noticedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.NoticeDate)
  return noticedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueStock::release_noticedate() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.NoticeDate)
  clear_has_noticedate();
  return noticedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_allocated_noticedate(::std::string* noticedate) {
  if (noticedate != NULL) {
    set_has_noticedate();
  } else {
    clear_has_noticedate();
  }
  noticedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noticedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.NoticeDate)
}

// optional int64 IssueScale = 4;
inline bool IssueStock::has_issuescale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IssueStock::set_has_issuescale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IssueStock::clear_has_issuescale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IssueStock::clear_issuescale() {
  issuescale_ = GOOGLE_LONGLONG(0);
  clear_has_issuescale();
}
inline ::google::protobuf::int64 IssueStock::issuescale() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.IssueScale)
  return issuescale_;
}
inline void IssueStock::set_issuescale(::google::protobuf::int64 value) {
  set_has_issuescale();
  issuescale_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.IssueScale)
}

// optional string IssuePrice = 5;
inline bool IssueStock::has_issueprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IssueStock::set_has_issueprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IssueStock::clear_has_issueprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IssueStock::clear_issueprice() {
  issueprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issueprice();
}
inline const ::std::string& IssueStock::issueprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.IssuePrice)
  return issueprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_issueprice(const ::std::string& value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.IssuePrice)
}
inline void IssueStock::set_issueprice(const char* value) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.IssuePrice)
}
inline void IssueStock::set_issueprice(const char* value, size_t size) {
  set_has_issueprice();
  issueprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.IssuePrice)
}
inline ::std::string* IssueStock::mutable_issueprice() {
  set_has_issueprice();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.IssuePrice)
  return issueprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueStock::release_issueprice() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.IssuePrice)
  clear_has_issueprice();
  return issueprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_allocated_issueprice(::std::string* issueprice) {
  if (issueprice != NULL) {
    set_has_issueprice();
  } else {
    clear_has_issueprice();
  }
  issueprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issueprice);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.IssuePrice)
}

// optional string ProjectAdvance = 6;
inline bool IssueStock::has_projectadvance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IssueStock::set_has_projectadvance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IssueStock::clear_has_projectadvance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IssueStock::clear_projectadvance() {
  projectadvance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projectadvance();
}
inline const ::std::string& IssueStock::projectadvance() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.ProjectAdvance)
  return projectadvance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_projectadvance(const ::std::string& value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.ProjectAdvance)
}
inline void IssueStock::set_projectadvance(const char* value) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.ProjectAdvance)
}
inline void IssueStock::set_projectadvance(const char* value, size_t size) {
  set_has_projectadvance();
  projectadvance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.ProjectAdvance)
}
inline ::std::string* IssueStock::mutable_projectadvance() {
  set_has_projectadvance();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.ProjectAdvance)
  return projectadvance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueStock::release_projectadvance() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.ProjectAdvance)
  clear_has_projectadvance();
  return projectadvance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_allocated_projectadvance(::std::string* projectadvance) {
  if (projectadvance != NULL) {
    set_has_projectadvance();
  } else {
    clear_has_projectadvance();
  }
  projectadvance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectadvance);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.ProjectAdvance)
}

// optional int64 PE = 7;
inline bool IssueStock::has_pe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IssueStock::set_has_pe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IssueStock::clear_has_pe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IssueStock::clear_pe() {
  pe_ = GOOGLE_LONGLONG(0);
  clear_has_pe();
}
inline ::google::protobuf::int64 IssueStock::pe() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.PE)
  return pe_;
}
inline void IssueStock::set_pe(::google::protobuf::int64 value) {
  set_has_pe();
  pe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.PE)
}

// optional string LatestNoticeDate = 8;
inline bool IssueStock::has_latestnoticedate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IssueStock::set_has_latestnoticedate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IssueStock::clear_has_latestnoticedate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IssueStock::clear_latestnoticedate() {
  latestnoticedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latestnoticedate();
}
inline const ::std::string& IssueStock::latestnoticedate() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStock.LatestNoticeDate)
  return latestnoticedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_latestnoticedate(const ::std::string& value) {
  set_has_latestnoticedate();
  latestnoticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.IssueStock.LatestNoticeDate)
}
inline void IssueStock::set_latestnoticedate(const char* value) {
  set_has_latestnoticedate();
  latestnoticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.IssueStock.LatestNoticeDate)
}
inline void IssueStock::set_latestnoticedate(const char* value, size_t size) {
  set_has_latestnoticedate();
  latestnoticedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.IssueStock.LatestNoticeDate)
}
inline ::std::string* IssueStock::mutable_latestnoticedate() {
  set_has_latestnoticedate();
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStock.LatestNoticeDate)
  return latestnoticedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueStock::release_latestnoticedate() {
  // @@protoc_insertion_point(field_release:dzhyun.IssueStock.LatestNoticeDate)
  clear_has_latestnoticedate();
  return latestnoticedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueStock::set_allocated_latestnoticedate(::std::string* latestnoticedate) {
  if (latestnoticedate != NULL) {
    set_has_latestnoticedate();
  } else {
    clear_has_latestnoticedate();
  }
  latestnoticedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latestnoticedate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.IssueStock.LatestNoticeDate)
}

// -------------------------------------------------------------------

// IssueStatInfo

// optional int64 StockNum = 1;
inline bool IssueStatInfo::has_stocknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IssueStatInfo::set_has_stocknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IssueStatInfo::clear_has_stocknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IssueStatInfo::clear_stocknum() {
  stocknum_ = GOOGLE_LONGLONG(0);
  clear_has_stocknum();
}
inline ::google::protobuf::int64 IssueStatInfo::stocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.StockNum)
  return stocknum_;
}
inline void IssueStatInfo::set_stocknum(::google::protobuf::int64 value) {
  set_has_stocknum();
  stocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStatInfo.StockNum)
}

// optional int64 TotalScale = 2;
inline bool IssueStatInfo::has_totalscale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IssueStatInfo::set_has_totalscale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IssueStatInfo::clear_has_totalscale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IssueStatInfo::clear_totalscale() {
  totalscale_ = GOOGLE_LONGLONG(0);
  clear_has_totalscale();
}
inline ::google::protobuf::int64 IssueStatInfo::totalscale() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.TotalScale)
  return totalscale_;
}
inline void IssueStatInfo::set_totalscale(::google::protobuf::int64 value) {
  set_has_totalscale();
  totalscale_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStatInfo.TotalScale)
}

// optional int64 AvgPE = 3;
inline bool IssueStatInfo::has_avgpe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IssueStatInfo::set_has_avgpe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IssueStatInfo::clear_has_avgpe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IssueStatInfo::clear_avgpe() {
  avgpe_ = GOOGLE_LONGLONG(0);
  clear_has_avgpe();
}
inline ::google::protobuf::int64 IssueStatInfo::avgpe() const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.AvgPE)
  return avgpe_;
}
inline void IssueStatInfo::set_avgpe(::google::protobuf::int64 value) {
  set_has_avgpe();
  avgpe_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.IssueStatInfo.AvgPE)
}

// repeated .dzhyun.IssueStock Data = 4;
inline int IssueStatInfo::data_size() const {
  return data_.size();
}
inline void IssueStatInfo::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::IssueStock& IssueStatInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.IssueStatInfo.Data)
  return data_.Get(index);
}
inline ::dzhyun::IssueStock* IssueStatInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.IssueStatInfo.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::IssueStock* IssueStatInfo::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.IssueStatInfo.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock >*
IssueStatInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.IssueStatInfo.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::IssueStock >&
IssueStatInfo::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.IssueStatInfo.Data)
  return data_;
}

// -------------------------------------------------------------------

// BrokerData

// required string BrokerName = 1;
inline bool BrokerData::has_brokername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerData::set_has_brokername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerData::clear_has_brokername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerData::clear_brokername() {
  brokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokername();
}
inline const ::std::string& BrokerData::brokername() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerData.BrokerName)
  return brokername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerData::set_brokername(const ::std::string& value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.BrokerData.BrokerName)
}
inline void BrokerData::set_brokername(const char* value) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.BrokerData.BrokerName)
}
inline void BrokerData::set_brokername(const char* value, size_t size) {
  set_has_brokername();
  brokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BrokerData.BrokerName)
}
inline ::std::string* BrokerData::mutable_brokername() {
  set_has_brokername();
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerData.BrokerName)
  return brokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerData::release_brokername() {
  // @@protoc_insertion_point(field_release:dzhyun.BrokerData.BrokerName)
  clear_has_brokername();
  return brokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerData::set_allocated_brokername(::std::string* brokername) {
  if (brokername != NULL) {
    set_has_brokername();
  } else {
    clear_has_brokername();
  }
  brokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokername);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.BrokerData.BrokerName)
}

// optional int64 LastStockNum = 2;
inline bool BrokerData::has_laststocknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrokerData::set_has_laststocknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrokerData::clear_has_laststocknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrokerData::clear_laststocknum() {
  laststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_laststocknum();
}
inline ::google::protobuf::int64 BrokerData::laststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerData.LastStockNum)
  return laststocknum_;
}
inline void BrokerData::set_laststocknum(::google::protobuf::int64 value) {
  set_has_laststocknum();
  laststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerData.LastStockNum)
}

// optional int64 FirstStockNum = 3;
inline bool BrokerData::has_firststocknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrokerData::set_has_firststocknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrokerData::clear_has_firststocknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrokerData::clear_firststocknum() {
  firststocknum_ = GOOGLE_LONGLONG(0);
  clear_has_firststocknum();
}
inline ::google::protobuf::int64 BrokerData::firststocknum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerData.FirstStockNum)
  return firststocknum_;
}
inline void BrokerData::set_firststocknum(::google::protobuf::int64 value) {
  set_has_firststocknum();
  firststocknum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerData.FirstStockNum)
}

// -------------------------------------------------------------------

// BrokerList

// required int64 BrokerNum = 1;
inline bool BrokerList::has_brokernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerList::set_has_brokernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerList::clear_has_brokernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerList::clear_brokernum() {
  brokernum_ = GOOGLE_LONGLONG(0);
  clear_has_brokernum();
}
inline ::google::protobuf::int64 BrokerList::brokernum() const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerList.BrokerNum)
  return brokernum_;
}
inline void BrokerList::set_brokernum(::google::protobuf::int64 value) {
  set_has_brokernum();
  brokernum_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.BrokerList.BrokerNum)
}

// repeated .dzhyun.BrokerData Data = 2;
inline int BrokerList::data_size() const {
  return data_.size();
}
inline void BrokerList::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::BrokerData& BrokerList::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.BrokerList.Data)
  return data_.Get(index);
}
inline ::dzhyun::BrokerData* BrokerList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.BrokerList.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::BrokerData* BrokerList::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.BrokerList.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData >*
BrokerList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.BrokerList.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::BrokerData >&
BrokerList::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.BrokerList.Data)
  return data_;
}

// -------------------------------------------------------------------

// QuickReportData

// required string StockCode = 1;
inline bool QuickReportData::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuickReportData::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuickReportData::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuickReportData::clear_stockcode() {
  stockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockcode();
}
inline const ::std::string& QuickReportData::stockcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.StockCode)
  return stockcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.StockCode)
}
inline void QuickReportData::set_stockcode(const char* value) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.StockCode)
}
inline void QuickReportData::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  stockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.StockCode)
}
inline ::std::string* QuickReportData::mutable_stockcode() {
  set_has_stockcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.StockCode)
  return stockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuickReportData::release_stockcode() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.StockCode)
  clear_has_stockcode();
  return stockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_allocated_stockcode(::std::string* stockcode) {
  if (stockcode != NULL) {
    set_has_stockcode();
  } else {
    clear_has_stockcode();
  }
  stockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.StockCode)
}

// optional string StockName = 2;
inline bool QuickReportData::has_stockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuickReportData::set_has_stockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuickReportData::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuickReportData::clear_stockname() {
  stockname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stockname();
}
inline const ::std::string& QuickReportData::stockname() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.StockName)
  return stockname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_stockname(const ::std::string& value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.StockName)
}
inline void QuickReportData::set_stockname(const char* value) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.StockName)
}
inline void QuickReportData::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  stockname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.StockName)
}
inline ::std::string* QuickReportData::mutable_stockname() {
  set_has_stockname();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.StockName)
  return stockname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuickReportData::release_stockname() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.StockName)
  clear_has_stockname();
  return stockname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_allocated_stockname(::std::string* stockname) {
  if (stockname != NULL) {
    set_has_stockname();
  } else {
    clear_has_stockname();
  }
  stockname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stockname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.StockName)
}

// optional string ReportDate = 3;
inline bool QuickReportData::has_reportdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuickReportData::set_has_reportdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuickReportData::clear_has_reportdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuickReportData::clear_reportdate() {
  reportdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reportdate();
}
inline const ::std::string& QuickReportData::reportdate() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.ReportDate)
  return reportdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_reportdate(const ::std::string& value) {
  set_has_reportdate();
  reportdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.ReportDate)
}
inline void QuickReportData::set_reportdate(const char* value) {
  set_has_reportdate();
  reportdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.ReportDate)
}
inline void QuickReportData::set_reportdate(const char* value, size_t size) {
  set_has_reportdate();
  reportdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.ReportDate)
}
inline ::std::string* QuickReportData::mutable_reportdate() {
  set_has_reportdate();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.ReportDate)
  return reportdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuickReportData::release_reportdate() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.ReportDate)
  clear_has_reportdate();
  return reportdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_allocated_reportdate(::std::string* reportdate) {
  if (reportdate != NULL) {
    set_has_reportdate();
  } else {
    clear_has_reportdate();
  }
  reportdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reportdate);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.ReportDate)
}

// optional string ReportTitle = 4;
inline bool QuickReportData::has_reporttitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuickReportData::set_has_reporttitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuickReportData::clear_has_reporttitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuickReportData::clear_reporttitle() {
  reporttitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reporttitle();
}
inline const ::std::string& QuickReportData::reporttitle() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.ReportTitle)
  return reporttitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_reporttitle(const ::std::string& value) {
  set_has_reporttitle();
  reporttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.ReportTitle)
}
inline void QuickReportData::set_reporttitle(const char* value) {
  set_has_reporttitle();
  reporttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QuickReportData.ReportTitle)
}
inline void QuickReportData::set_reporttitle(const char* value, size_t size) {
  set_has_reporttitle();
  reporttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QuickReportData.ReportTitle)
}
inline ::std::string* QuickReportData::mutable_reporttitle() {
  set_has_reporttitle();
  // @@protoc_insertion_point(field_mutable:dzhyun.QuickReportData.ReportTitle)
  return reporttitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuickReportData::release_reporttitle() {
  // @@protoc_insertion_point(field_release:dzhyun.QuickReportData.ReportTitle)
  clear_has_reporttitle();
  return reporttitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickReportData::set_allocated_reporttitle(::std::string* reporttitle) {
  if (reporttitle != NULL) {
    set_has_reporttitle();
  } else {
    clear_has_reporttitle();
  }
  reporttitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reporttitle);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QuickReportData.ReportTitle)
}

// optional int64 ClassTag = 5;
inline bool QuickReportData::has_classtag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuickReportData::set_has_classtag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuickReportData::clear_has_classtag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuickReportData::clear_classtag() {
  classtag_ = GOOGLE_LONGLONG(0);
  clear_has_classtag();
}
inline ::google::protobuf::int64 QuickReportData::classtag() const {
  // @@protoc_insertion_point(field_get:dzhyun.QuickReportData.ClassTag)
  return classtag_;
}
inline void QuickReportData::set_classtag(::google::protobuf::int64 value) {
  set_has_classtag();
  classtag_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QuickReportData.ClassTag)
}

// -------------------------------------------------------------------

// FinanceQuickReport

// repeated .dzhyun.QuickReportData Data = 2;
inline int FinanceQuickReport::data_size() const {
  return data_.size();
}
inline void FinanceQuickReport::clear_data() {
  data_.Clear();
}
inline const ::dzhyun::QuickReportData& FinanceQuickReport::data(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.FinanceQuickReport.Data)
  return data_.Get(index);
}
inline ::dzhyun::QuickReportData* FinanceQuickReport::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.FinanceQuickReport.Data)
  return data_.Mutable(index);
}
inline ::dzhyun::QuickReportData* FinanceQuickReport::add_data() {
  // @@protoc_insertion_point(field_add:dzhyun.FinanceQuickReport.Data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData >*
FinanceQuickReport::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.FinanceQuickReport.Data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::QuickReportData >&
FinanceQuickReport::data() const {
  // @@protoc_insertion_point(field_list:dzhyun.FinanceQuickReport.Data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CldSanBanData_2eproto__INCLUDED
