// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzh.block.proto

#ifndef PROTOBUF_dzh_2eblock_2eproto__INCLUDED
#define PROTOBUF_dzh_2eblock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dzh_2eblock_2eproto();
void protobuf_AssignDesc_dzh_2eblock_2eproto();
void protobuf_ShutdownFile_dzh_2eblock_2eproto();

class BlockObjOutput;
class BlockPropOutput;

// ===================================================================

class BlockObjOutput : public ::google::protobuf::Message {
 public:
  BlockObjOutput();
  virtual ~BlockObjOutput();

  BlockObjOutput(const BlockObjOutput& from);

  inline BlockObjOutput& operator=(const BlockObjOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockObjOutput& default_instance();

  void Swap(BlockObjOutput* other);

  // implements Message ----------------------------------------------

  inline BlockObjOutput* New() const { return New(NULL); }

  BlockObjOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockObjOutput& from);
  void MergeFrom(const BlockObjOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockObjOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string obj = 1;
  int obj_size() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  const ::std::string& obj(int index) const;
  ::std::string* mutable_obj(int index);
  void set_obj(int index, const ::std::string& value);
  void set_obj(int index, const char* value);
  void set_obj(int index, const char* value, size_t size);
  ::std::string* add_obj();
  void add_obj(const ::std::string& value);
  void add_obj(const char* value);
  void add_obj(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& obj() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_obj();

  // @@protoc_insertion_point(class_scope:dzhyun.BlockObjOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> obj_;
  friend void  protobuf_AddDesc_dzh_2eblock_2eproto();
  friend void protobuf_AssignDesc_dzh_2eblock_2eproto();
  friend void protobuf_ShutdownFile_dzh_2eblock_2eproto();

  void InitAsDefaultInstance();
  static BlockObjOutput* default_instance_;
};
// -------------------------------------------------------------------

class BlockPropOutput : public ::google::protobuf::Message {
 public:
  BlockPropOutput();
  virtual ~BlockPropOutput();

  BlockPropOutput(const BlockPropOutput& from);

  inline BlockPropOutput& operator=(const BlockPropOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPropOutput& default_instance();

  void Swap(BlockPropOutput* other);

  // implements Message ----------------------------------------------

  inline BlockPropOutput* New() const { return New(NULL); }

  BlockPropOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockPropOutput& from);
  void MergeFrom(const BlockPropOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockPropOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:dzhyun.BlockPropOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend void  protobuf_AddDesc_dzh_2eblock_2eproto();
  friend void protobuf_AssignDesc_dzh_2eblock_2eproto();
  friend void protobuf_ShutdownFile_dzh_2eblock_2eproto();

  void InitAsDefaultInstance();
  static BlockPropOutput* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockObjOutput

// repeated string obj = 1;
inline int BlockObjOutput::obj_size() const {
  return obj_.size();
}
inline void BlockObjOutput::clear_obj() {
  obj_.Clear();
}
inline const ::std::string& BlockObjOutput::obj(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.BlockObjOutput.obj)
  return obj_.Get(index);
}
inline ::std::string* BlockObjOutput::mutable_obj(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.BlockObjOutput.obj)
  return obj_.Mutable(index);
}
inline void BlockObjOutput::set_obj(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dzhyun.BlockObjOutput.obj)
  obj_.Mutable(index)->assign(value);
}
inline void BlockObjOutput::set_obj(int index, const char* value) {
  obj_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dzhyun.BlockObjOutput.obj)
}
inline void BlockObjOutput::set_obj(int index, const char* value, size_t size) {
  obj_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BlockObjOutput.obj)
}
inline ::std::string* BlockObjOutput::add_obj() {
  // @@protoc_insertion_point(field_add_mutable:dzhyun.BlockObjOutput.obj)
  return obj_.Add();
}
inline void BlockObjOutput::add_obj(const ::std::string& value) {
  obj_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dzhyun.BlockObjOutput.obj)
}
inline void BlockObjOutput::add_obj(const char* value) {
  obj_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dzhyun.BlockObjOutput.obj)
}
inline void BlockObjOutput::add_obj(const char* value, size_t size) {
  obj_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dzhyun.BlockObjOutput.obj)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlockObjOutput::obj() const {
  // @@protoc_insertion_point(field_list:dzhyun.BlockObjOutput.obj)
  return obj_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlockObjOutput::mutable_obj() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.BlockObjOutput.obj)
  return &obj_;
}

// -------------------------------------------------------------------

// BlockPropOutput

// repeated string name = 1;
inline int BlockPropOutput::name_size() const {
  return name_.size();
}
inline void BlockPropOutput::clear_name() {
  name_.Clear();
}
inline const ::std::string& BlockPropOutput::name(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.BlockPropOutput.name)
  return name_.Get(index);
}
inline ::std::string* BlockPropOutput::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.BlockPropOutput.name)
  return name_.Mutable(index);
}
inline void BlockPropOutput::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dzhyun.BlockPropOutput.name)
  name_.Mutable(index)->assign(value);
}
inline void BlockPropOutput::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dzhyun.BlockPropOutput.name)
}
inline void BlockPropOutput::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dzhyun.BlockPropOutput.name)
}
inline ::std::string* BlockPropOutput::add_name() {
  // @@protoc_insertion_point(field_add_mutable:dzhyun.BlockPropOutput.name)
  return name_.Add();
}
inline void BlockPropOutput::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dzhyun.BlockPropOutput.name)
}
inline void BlockPropOutput::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dzhyun.BlockPropOutput.name)
}
inline void BlockPropOutput::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dzhyun.BlockPropOutput.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlockPropOutput::name() const {
  // @@protoc_insertion_point(field_list:dzhyun.BlockPropOutput.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlockPropOutput::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.BlockPropOutput.name)
  return &name_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dzh_2eblock_2eproto__INCLUDED
