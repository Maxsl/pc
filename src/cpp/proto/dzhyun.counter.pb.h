// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzhyun.counter.proto

#ifndef PROTOBUF_dzhyun_2ecounter_2eproto__INCLUDED
#define PROTOBUF_dzhyun_2ecounter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dzhyun {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dzhyun_2ecounter_2eproto();
void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

class CounterRsp;
class CounterSettleRsp;
class DealItem;
class HoldItem;
class OrderItem;
class QueryCapitalRsp;
class QueryDealRsp;
class QueryHoldRsp;
class QueryOrderRsp;
class RepCounterRsp;
class TradeRuleRsp;

// ===================================================================

class RepCounterRsp : public ::google::protobuf::Message {
 public:
  RepCounterRsp();
  virtual ~RepCounterRsp();

  RepCounterRsp(const RepCounterRsp& from);

  inline RepCounterRsp& operator=(const RepCounterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepCounterRsp& default_instance();

  void Swap(RepCounterRsp* other);

  // implements Message ----------------------------------------------

  inline RepCounterRsp* New() const { return New(NULL); }

  RepCounterRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepCounterRsp& from);
  void MergeFrom(const RepCounterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RepCounterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::uint32 rspno() const;
  void set_rspno(::google::protobuf::uint32 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // optional uint32 Status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional string StatusDesc = 4;
  bool has_statusdesc() const;
  void clear_statusdesc();
  static const int kStatusDescFieldNumber = 4;
  const ::std::string& statusdesc() const;
  void set_statusdesc(const ::std::string& value);
  void set_statusdesc(const char* value);
  void set_statusdesc(const char* value, size_t size);
  ::std::string* mutable_statusdesc();
  ::std::string* release_statusdesc();
  void set_allocated_statusdesc(::std::string* statusdesc);

  // @@protoc_insertion_point(class_scope:dzhyun.RepCounterRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_statusdesc();
  inline void clear_has_statusdesc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::uint32 rspno_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::internal::ArenaStringPtr statusdesc_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static RepCounterRsp* default_instance_;
};
// -------------------------------------------------------------------

class CounterRsp : public ::google::protobuf::Message {
 public:
  CounterRsp();
  virtual ~CounterRsp();

  CounterRsp(const CounterRsp& from);

  inline CounterRsp& operator=(const CounterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CounterRsp& default_instance();

  void Swap(CounterRsp* other);

  // implements Message ----------------------------------------------

  inline CounterRsp* New() const { return New(NULL); }

  CounterRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CounterRsp& from);
  void MergeFrom(const CounterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CounterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // @@protoc_insertion_point(class_scope:dzhyun.CounterRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static CounterRsp* default_instance_;
};
// -------------------------------------------------------------------

class QueryCapitalRsp : public ::google::protobuf::Message {
 public:
  QueryCapitalRsp();
  virtual ~QueryCapitalRsp();

  QueryCapitalRsp(const QueryCapitalRsp& from);

  inline QueryCapitalRsp& operator=(const QueryCapitalRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryCapitalRsp& default_instance();

  void Swap(QueryCapitalRsp* other);

  // implements Message ----------------------------------------------

  inline QueryCapitalRsp* New() const { return New(NULL); }

  QueryCapitalRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryCapitalRsp& from);
  void MergeFrom(const QueryCapitalRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryCapitalRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // optional int64 AvailCapital = 3;
  bool has_availcapital() const;
  void clear_availcapital();
  static const int kAvailCapitalFieldNumber = 3;
  ::google::protobuf::int64 availcapital() const;
  void set_availcapital(::google::protobuf::int64 value);

  // optional int64 FreezeCapital = 4;
  bool has_freezecapital() const;
  void clear_freezecapital();
  static const int kFreezeCapitalFieldNumber = 4;
  ::google::protobuf::int64 freezecapital() const;
  void set_freezecapital(::google::protobuf::int64 value);

  // optional int64 Margin = 5;
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 5;
  ::google::protobuf::int64 margin() const;
  void set_margin(::google::protobuf::int64 value);

  // optional int64 TotalValue = 6;
  bool has_totalvalue() const;
  void clear_totalvalue();
  static const int kTotalValueFieldNumber = 6;
  ::google::protobuf::int64 totalvalue() const;
  void set_totalvalue(::google::protobuf::int64 value);

  // optional int64 TotalCapital = 7;
  bool has_totalcapital() const;
  void clear_totalcapital();
  static const int kTotalCapitalFieldNumber = 7;
  ::google::protobuf::int64 totalcapital() const;
  void set_totalcapital(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.QueryCapitalRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_availcapital();
  inline void clear_has_availcapital();
  inline void set_has_freezecapital();
  inline void clear_has_freezecapital();
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_totalvalue();
  inline void clear_has_totalvalue();
  inline void set_has_totalcapital();
  inline void clear_has_totalcapital();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::int64 availcapital_;
  ::google::protobuf::int64 freezecapital_;
  ::google::protobuf::int64 margin_;
  ::google::protobuf::int64 totalvalue_;
  ::google::protobuf::int64 totalcapital_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static QueryCapitalRsp* default_instance_;
};
// -------------------------------------------------------------------

class HoldItem : public ::google::protobuf::Message {
 public:
  HoldItem();
  virtual ~HoldItem();

  HoldItem(const HoldItem& from);

  inline HoldItem& operator=(const HoldItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HoldItem& default_instance();

  void Swap(HoldItem* other);

  // implements Message ----------------------------------------------

  inline HoldItem* New() const { return New(NULL); }

  HoldItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HoldItem& from);
  void MergeFrom(const HoldItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HoldItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string HoldNo = 1;
  bool has_holdno() const;
  void clear_holdno();
  static const int kHoldNoFieldNumber = 1;
  const ::std::string& holdno() const;
  void set_holdno(const ::std::string& value);
  void set_holdno(const char* value);
  void set_holdno(const char* value, size_t size);
  ::std::string* mutable_holdno();
  ::std::string* release_holdno();
  void set_allocated_holdno(::std::string* holdno);

  // optional string ProductCode = 2;
  bool has_productcode() const;
  void clear_productcode();
  static const int kProductCodeFieldNumber = 2;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // optional string ProductName = 3;
  bool has_productname() const;
  void clear_productname();
  static const int kProductNameFieldNumber = 3;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // optional string BuyOrSell = 4;
  bool has_buyorsell() const;
  void clear_buyorsell();
  static const int kBuyOrSellFieldNumber = 4;
  const ::std::string& buyorsell() const;
  void set_buyorsell(const ::std::string& value);
  void set_buyorsell(const char* value);
  void set_buyorsell(const char* value, size_t size);
  ::std::string* mutable_buyorsell();
  ::std::string* release_buyorsell();
  void set_allocated_buyorsell(::std::string* buyorsell);

  // optional int64 Margin = 5;
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 5;
  ::google::protobuf::int64 margin() const;
  void set_margin(::google::protobuf::int64 value);

  // optional int64 PosAmount = 6;
  bool has_posamount() const;
  void clear_posamount();
  static const int kPosAmountFieldNumber = 6;
  ::google::protobuf::int64 posamount() const;
  void set_posamount(::google::protobuf::int64 value);

  // optional int64 AvailAmount = 7;
  bool has_availamount() const;
  void clear_availamount();
  static const int kAvailAmountFieldNumber = 7;
  ::google::protobuf::int64 availamount() const;
  void set_availamount(::google::protobuf::int64 value);

  // optional int64 AvgPosPrice = 8;
  bool has_avgposprice() const;
  void clear_avgposprice();
  static const int kAvgPosPriceFieldNumber = 8;
  ::google::protobuf::int64 avgposprice() const;
  void set_avgposprice(::google::protobuf::int64 value);

  // optional int64 NewPrice = 9;
  bool has_newprice() const;
  void clear_newprice();
  static const int kNewPriceFieldNumber = 9;
  ::google::protobuf::int64 newprice() const;
  void set_newprice(::google::protobuf::int64 value);

  // optional int64 Value = 10;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 10;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // optional int64 Profit = 11;
  bool has_profit() const;
  void clear_profit();
  static const int kProfitFieldNumber = 11;
  ::google::protobuf::int64 profit() const;
  void set_profit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.HoldItem)
 private:
  inline void set_has_holdno();
  inline void clear_has_holdno();
  inline void set_has_productcode();
  inline void clear_has_productcode();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_buyorsell();
  inline void clear_has_buyorsell();
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_posamount();
  inline void clear_has_posamount();
  inline void set_has_availamount();
  inline void clear_has_availamount();
  inline void set_has_avgposprice();
  inline void clear_has_avgposprice();
  inline void set_has_newprice();
  inline void clear_has_newprice();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_profit();
  inline void clear_has_profit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr holdno_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::internal::ArenaStringPtr buyorsell_;
  ::google::protobuf::int64 margin_;
  ::google::protobuf::int64 posamount_;
  ::google::protobuf::int64 availamount_;
  ::google::protobuf::int64 avgposprice_;
  ::google::protobuf::int64 newprice_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 profit_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static HoldItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryHoldRsp : public ::google::protobuf::Message {
 public:
  QueryHoldRsp();
  virtual ~QueryHoldRsp();

  QueryHoldRsp(const QueryHoldRsp& from);

  inline QueryHoldRsp& operator=(const QueryHoldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryHoldRsp& default_instance();

  void Swap(QueryHoldRsp* other);

  // implements Message ----------------------------------------------

  inline QueryHoldRsp* New() const { return New(NULL); }

  QueryHoldRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryHoldRsp& from);
  void MergeFrom(const QueryHoldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryHoldRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // optional int64 AvailCapital = 3;
  bool has_availcapital() const;
  void clear_availcapital();
  static const int kAvailCapitalFieldNumber = 3;
  ::google::protobuf::int64 availcapital() const;
  void set_availcapital(::google::protobuf::int64 value);

  // optional int64 FreezeCapital = 4;
  bool has_freezecapital() const;
  void clear_freezecapital();
  static const int kFreezeCapitalFieldNumber = 4;
  ::google::protobuf::int64 freezecapital() const;
  void set_freezecapital(::google::protobuf::int64 value);

  // optional int64 TotalMargin = 5;
  bool has_totalmargin() const;
  void clear_totalmargin();
  static const int kTotalMarginFieldNumber = 5;
  ::google::protobuf::int64 totalmargin() const;
  void set_totalmargin(::google::protobuf::int64 value);

  // optional int64 TotalValue = 6;
  bool has_totalvalue() const;
  void clear_totalvalue();
  static const int kTotalValueFieldNumber = 6;
  ::google::protobuf::int64 totalvalue() const;
  void set_totalvalue(::google::protobuf::int64 value);

  // optional int64 TotalCapital = 7;
  bool has_totalcapital() const;
  void clear_totalcapital();
  static const int kTotalCapitalFieldNumber = 7;
  ::google::protobuf::int64 totalcapital() const;
  void set_totalcapital(::google::protobuf::int64 value);

  // optional int64 TotalProfit = 8;
  bool has_totalprofit() const;
  void clear_totalprofit();
  static const int kTotalProfitFieldNumber = 8;
  ::google::protobuf::int64 totalprofit() const;
  void set_totalprofit(::google::protobuf::int64 value);

  // repeated .dzhyun.HoldItem HoldList = 9;
  int holdlist_size() const;
  void clear_holdlist();
  static const int kHoldListFieldNumber = 9;
  const ::dzhyun::HoldItem& holdlist(int index) const;
  ::dzhyun::HoldItem* mutable_holdlist(int index);
  ::dzhyun::HoldItem* add_holdlist();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::HoldItem >*
      mutable_holdlist();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::HoldItem >&
      holdlist() const;

  // optional string CapitalId = 10;
  bool has_capitalid() const;
  void clear_capitalid();
  static const int kCapitalIdFieldNumber = 10;
  const ::std::string& capitalid() const;
  void set_capitalid(const ::std::string& value);
  void set_capitalid(const char* value);
  void set_capitalid(const char* value, size_t size);
  ::std::string* mutable_capitalid();
  ::std::string* release_capitalid();
  void set_allocated_capitalid(::std::string* capitalid);

  // @@protoc_insertion_point(class_scope:dzhyun.QueryHoldRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_availcapital();
  inline void clear_has_availcapital();
  inline void set_has_freezecapital();
  inline void clear_has_freezecapital();
  inline void set_has_totalmargin();
  inline void clear_has_totalmargin();
  inline void set_has_totalvalue();
  inline void clear_has_totalvalue();
  inline void set_has_totalcapital();
  inline void clear_has_totalcapital();
  inline void set_has_totalprofit();
  inline void clear_has_totalprofit();
  inline void set_has_capitalid();
  inline void clear_has_capitalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::int64 availcapital_;
  ::google::protobuf::int64 freezecapital_;
  ::google::protobuf::int64 totalmargin_;
  ::google::protobuf::int64 totalvalue_;
  ::google::protobuf::int64 totalcapital_;
  ::google::protobuf::int64 totalprofit_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::HoldItem > holdlist_;
  ::google::protobuf::internal::ArenaStringPtr capitalid_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static QueryHoldRsp* default_instance_;
};
// -------------------------------------------------------------------

class OrderItem : public ::google::protobuf::Message {
 public:
  OrderItem();
  virtual ~OrderItem();

  OrderItem(const OrderItem& from);

  inline OrderItem& operator=(const OrderItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderItem& default_instance();

  void Swap(OrderItem* other);

  // implements Message ----------------------------------------------

  inline OrderItem* New() const { return New(NULL); }

  OrderItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderItem& from);
  void MergeFrom(const OrderItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OrderItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string OrderNo = 1;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrderNoFieldNumber = 1;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string OrderTime = 2;
  bool has_ordertime() const;
  void clear_ordertime();
  static const int kOrderTimeFieldNumber = 2;
  const ::std::string& ordertime() const;
  void set_ordertime(const ::std::string& value);
  void set_ordertime(const char* value);
  void set_ordertime(const char* value, size_t size);
  ::std::string* mutable_ordertime();
  ::std::string* release_ordertime();
  void set_allocated_ordertime(::std::string* ordertime);

  // optional string ProductCode = 3;
  bool has_productcode() const;
  void clear_productcode();
  static const int kProductCodeFieldNumber = 3;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // optional string ProductName = 4;
  bool has_productname() const;
  void clear_productname();
  static const int kProductNameFieldNumber = 4;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // optional string BuyOrSell = 5;
  bool has_buyorsell() const;
  void clear_buyorsell();
  static const int kBuyOrSellFieldNumber = 5;
  const ::std::string& buyorsell() const;
  void set_buyorsell(const ::std::string& value);
  void set_buyorsell(const char* value);
  void set_buyorsell(const char* value, size_t size);
  ::std::string* mutable_buyorsell();
  ::std::string* release_buyorsell();
  void set_allocated_buyorsell(::std::string* buyorsell);

  // optional string OpenOrClose = 6;
  bool has_openorclose() const;
  void clear_openorclose();
  static const int kOpenOrCloseFieldNumber = 6;
  const ::std::string& openorclose() const;
  void set_openorclose(const ::std::string& value);
  void set_openorclose(const char* value);
  void set_openorclose(const char* value, size_t size);
  ::std::string* mutable_openorclose();
  ::std::string* release_openorclose();
  void set_allocated_openorclose(::std::string* openorclose);

  // optional string OrderType = 7;
  bool has_ordertype() const;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 7;
  const ::std::string& ordertype() const;
  void set_ordertype(const ::std::string& value);
  void set_ordertype(const char* value);
  void set_ordertype(const char* value, size_t size);
  ::std::string* mutable_ordertype();
  ::std::string* release_ordertype();
  void set_allocated_ordertype(::std::string* ordertype);

  // optional int64 OrderAmount = 8;
  bool has_orderamount() const;
  void clear_orderamount();
  static const int kOrderAmountFieldNumber = 8;
  ::google::protobuf::int64 orderamount() const;
  void set_orderamount(::google::protobuf::int64 value);

  // optional int64 OrderPrice = 9;
  bool has_orderprice() const;
  void clear_orderprice();
  static const int kOrderPriceFieldNumber = 9;
  ::google::protobuf::int64 orderprice() const;
  void set_orderprice(::google::protobuf::int64 value);

  // optional string Status = 10;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:dzhyun.OrderItem)
 private:
  inline void set_has_orderno();
  inline void clear_has_orderno();
  inline void set_has_ordertime();
  inline void clear_has_ordertime();
  inline void set_has_productcode();
  inline void clear_has_productcode();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_buyorsell();
  inline void clear_has_buyorsell();
  inline void set_has_openorclose();
  inline void clear_has_openorclose();
  inline void set_has_ordertype();
  inline void clear_has_ordertype();
  inline void set_has_orderamount();
  inline void clear_has_orderamount();
  inline void set_has_orderprice();
  inline void clear_has_orderprice();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr ordertime_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::internal::ArenaStringPtr buyorsell_;
  ::google::protobuf::internal::ArenaStringPtr openorclose_;
  ::google::protobuf::internal::ArenaStringPtr ordertype_;
  ::google::protobuf::int64 orderamount_;
  ::google::protobuf::int64 orderprice_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static OrderItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryOrderRsp : public ::google::protobuf::Message {
 public:
  QueryOrderRsp();
  virtual ~QueryOrderRsp();

  QueryOrderRsp(const QueryOrderRsp& from);

  inline QueryOrderRsp& operator=(const QueryOrderRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOrderRsp& default_instance();

  void Swap(QueryOrderRsp* other);

  // implements Message ----------------------------------------------

  inline QueryOrderRsp* New() const { return New(NULL); }

  QueryOrderRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOrderRsp& from);
  void MergeFrom(const QueryOrderRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOrderRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // repeated .dzhyun.OrderItem OrderList = 3;
  int orderlist_size() const;
  void clear_orderlist();
  static const int kOrderListFieldNumber = 3;
  const ::dzhyun::OrderItem& orderlist(int index) const;
  ::dzhyun::OrderItem* mutable_orderlist(int index);
  ::dzhyun::OrderItem* add_orderlist();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::OrderItem >*
      mutable_orderlist();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::OrderItem >&
      orderlist() const;

  // optional string CapitalId = 4;
  bool has_capitalid() const;
  void clear_capitalid();
  static const int kCapitalIdFieldNumber = 4;
  const ::std::string& capitalid() const;
  void set_capitalid(const ::std::string& value);
  void set_capitalid(const char* value);
  void set_capitalid(const char* value, size_t size);
  ::std::string* mutable_capitalid();
  ::std::string* release_capitalid();
  void set_allocated_capitalid(::std::string* capitalid);

  // @@protoc_insertion_point(class_scope:dzhyun.QueryOrderRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_capitalid();
  inline void clear_has_capitalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::OrderItem > orderlist_;
  ::google::protobuf::internal::ArenaStringPtr capitalid_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static QueryOrderRsp* default_instance_;
};
// -------------------------------------------------------------------

class DealItem : public ::google::protobuf::Message {
 public:
  DealItem();
  virtual ~DealItem();

  DealItem(const DealItem& from);

  inline DealItem& operator=(const DealItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DealItem& default_instance();

  void Swap(DealItem* other);

  // implements Message ----------------------------------------------

  inline DealItem* New() const { return New(NULL); }

  DealItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DealItem& from);
  void MergeFrom(const DealItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DealItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DealNo = 1;
  bool has_dealno() const;
  void clear_dealno();
  static const int kDealNoFieldNumber = 1;
  const ::std::string& dealno() const;
  void set_dealno(const ::std::string& value);
  void set_dealno(const char* value);
  void set_dealno(const char* value, size_t size);
  ::std::string* mutable_dealno();
  ::std::string* release_dealno();
  void set_allocated_dealno(::std::string* dealno);

  // optional string DealTime = 2;
  bool has_dealtime() const;
  void clear_dealtime();
  static const int kDealTimeFieldNumber = 2;
  const ::std::string& dealtime() const;
  void set_dealtime(const ::std::string& value);
  void set_dealtime(const char* value);
  void set_dealtime(const char* value, size_t size);
  ::std::string* mutable_dealtime();
  ::std::string* release_dealtime();
  void set_allocated_dealtime(::std::string* dealtime);

  // optional string ProductCode = 3;
  bool has_productcode() const;
  void clear_productcode();
  static const int kProductCodeFieldNumber = 3;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // optional string ProductName = 4;
  bool has_productname() const;
  void clear_productname();
  static const int kProductNameFieldNumber = 4;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // optional string BuyOrSell = 5;
  bool has_buyorsell() const;
  void clear_buyorsell();
  static const int kBuyOrSellFieldNumber = 5;
  const ::std::string& buyorsell() const;
  void set_buyorsell(const ::std::string& value);
  void set_buyorsell(const char* value);
  void set_buyorsell(const char* value, size_t size);
  ::std::string* mutable_buyorsell();
  ::std::string* release_buyorsell();
  void set_allocated_buyorsell(::std::string* buyorsell);

  // optional string OpenOrClose = 6;
  bool has_openorclose() const;
  void clear_openorclose();
  static const int kOpenOrCloseFieldNumber = 6;
  const ::std::string& openorclose() const;
  void set_openorclose(const ::std::string& value);
  void set_openorclose(const char* value);
  void set_openorclose(const char* value, size_t size);
  ::std::string* mutable_openorclose();
  ::std::string* release_openorclose();
  void set_allocated_openorclose(::std::string* openorclose);

  // optional int64 DealAmount = 7;
  bool has_dealamount() const;
  void clear_dealamount();
  static const int kDealAmountFieldNumber = 7;
  ::google::protobuf::int64 dealamount() const;
  void set_dealamount(::google::protobuf::int64 value);

  // optional int64 DealPrice = 8;
  bool has_dealprice() const;
  void clear_dealprice();
  static const int kDealPriceFieldNumber = 8;
  ::google::protobuf::int64 dealprice() const;
  void set_dealprice(::google::protobuf::int64 value);

  // optional int64 Fee = 9;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 9;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.DealItem)
 private:
  inline void set_has_dealno();
  inline void clear_has_dealno();
  inline void set_has_dealtime();
  inline void clear_has_dealtime();
  inline void set_has_productcode();
  inline void clear_has_productcode();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_buyorsell();
  inline void clear_has_buyorsell();
  inline void set_has_openorclose();
  inline void clear_has_openorclose();
  inline void set_has_dealamount();
  inline void clear_has_dealamount();
  inline void set_has_dealprice();
  inline void clear_has_dealprice();
  inline void set_has_fee();
  inline void clear_has_fee();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dealno_;
  ::google::protobuf::internal::ArenaStringPtr dealtime_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::internal::ArenaStringPtr buyorsell_;
  ::google::protobuf::internal::ArenaStringPtr openorclose_;
  ::google::protobuf::int64 dealamount_;
  ::google::protobuf::int64 dealprice_;
  ::google::protobuf::int64 fee_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static DealItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryDealRsp : public ::google::protobuf::Message {
 public:
  QueryDealRsp();
  virtual ~QueryDealRsp();

  QueryDealRsp(const QueryDealRsp& from);

  inline QueryDealRsp& operator=(const QueryDealRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDealRsp& default_instance();

  void Swap(QueryDealRsp* other);

  // implements Message ----------------------------------------------

  inline QueryDealRsp* New() const { return New(NULL); }

  QueryDealRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDealRsp& from);
  void MergeFrom(const QueryDealRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryDealRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // repeated .dzhyun.DealItem DealList = 3;
  int deallist_size() const;
  void clear_deallist();
  static const int kDealListFieldNumber = 3;
  const ::dzhyun::DealItem& deallist(int index) const;
  ::dzhyun::DealItem* mutable_deallist(int index);
  ::dzhyun::DealItem* add_deallist();
  ::google::protobuf::RepeatedPtrField< ::dzhyun::DealItem >*
      mutable_deallist();
  const ::google::protobuf::RepeatedPtrField< ::dzhyun::DealItem >&
      deallist() const;

  // optional string CapitalId = 4;
  bool has_capitalid() const;
  void clear_capitalid();
  static const int kCapitalIdFieldNumber = 4;
  const ::std::string& capitalid() const;
  void set_capitalid(const ::std::string& value);
  void set_capitalid(const char* value);
  void set_capitalid(const char* value, size_t size);
  ::std::string* mutable_capitalid();
  ::std::string* release_capitalid();
  void set_allocated_capitalid(::std::string* capitalid);

  // @@protoc_insertion_point(class_scope:dzhyun.QueryDealRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_capitalid();
  inline void clear_has_capitalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::RepeatedPtrField< ::dzhyun::DealItem > deallist_;
  ::google::protobuf::internal::ArenaStringPtr capitalid_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static QueryDealRsp* default_instance_;
};
// -------------------------------------------------------------------

class CounterSettleRsp : public ::google::protobuf::Message {
 public:
  CounterSettleRsp();
  virtual ~CounterSettleRsp();

  CounterSettleRsp(const CounterSettleRsp& from);

  inline CounterSettleRsp& operator=(const CounterSettleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CounterSettleRsp& default_instance();

  void Swap(CounterSettleRsp* other);

  // implements Message ----------------------------------------------

  inline CounterSettleRsp* New() const { return New(NULL); }

  CounterSettleRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CounterSettleRsp& from);
  void MergeFrom(const CounterSettleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CounterSettleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // optional string SettleTime = 3;
  bool has_settletime() const;
  void clear_settletime();
  static const int kSettleTimeFieldNumber = 3;
  const ::std::string& settletime() const;
  void set_settletime(const ::std::string& value);
  void set_settletime(const char* value);
  void set_settletime(const char* value, size_t size);
  ::std::string* mutable_settletime();
  ::std::string* release_settletime();
  void set_allocated_settletime(::std::string* settletime);

  // optional int64 Status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int64 status() const;
  void set_status(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.CounterSettleRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::internal::ArenaStringPtr settletime_;
  ::google::protobuf::int64 status_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static CounterSettleRsp* default_instance_;
};
// -------------------------------------------------------------------

class TradeRuleRsp : public ::google::protobuf::Message {
 public:
  TradeRuleRsp();
  virtual ~TradeRuleRsp();

  TradeRuleRsp(const TradeRuleRsp& from);

  inline TradeRuleRsp& operator=(const TradeRuleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeRuleRsp& default_instance();

  void Swap(TradeRuleRsp* other);

  // implements Message ----------------------------------------------

  inline TradeRuleRsp* New() const { return New(NULL); }

  TradeRuleRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeRuleRsp& from);
  void MergeFrom(const TradeRuleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TradeRuleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 RspNo = 1;
  bool has_rspno() const;
  void clear_rspno();
  static const int kRspNoFieldNumber = 1;
  ::google::protobuf::int64 rspno() const;
  void set_rspno(::google::protobuf::int64 value);

  // optional string RspDesc = 2;
  bool has_rspdesc() const;
  void clear_rspdesc();
  static const int kRspDescFieldNumber = 2;
  const ::std::string& rspdesc() const;
  void set_rspdesc(const ::std::string& value);
  void set_rspdesc(const char* value);
  void set_rspdesc(const char* value, size_t size);
  ::std::string* mutable_rspdesc();
  ::std::string* release_rspdesc();
  void set_allocated_rspdesc(::std::string* rspdesc);

  // optional string UpdateTime = 3;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 3;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // optional int64 TradeRate = 4;
  bool has_traderate() const;
  void clear_traderate();
  static const int kTradeRateFieldNumber = 4;
  ::google::protobuf::int64 traderate() const;
  void set_traderate(::google::protobuf::int64 value);

  // optional int64 MinTradeFee = 5;
  bool has_mintradefee() const;
  void clear_mintradefee();
  static const int kMinTradeFeeFieldNumber = 5;
  ::google::protobuf::int64 mintradefee() const;
  void set_mintradefee(::google::protobuf::int64 value);

  // optional int64 MaxPosAmount = 6;
  bool has_maxposamount() const;
  void clear_maxposamount();
  static const int kMaxPosAmountFieldNumber = 6;
  ::google::protobuf::int64 maxposamount() const;
  void set_maxposamount(::google::protobuf::int64 value);

  // optional int64 MaxOrderAmount = 7;
  bool has_maxorderamount() const;
  void clear_maxorderamount();
  static const int kMaxOrderAmountFieldNumber = 7;
  ::google::protobuf::int64 maxorderamount() const;
  void set_maxorderamount(::google::protobuf::int64 value);

  // optional string SettleTime = 8;
  bool has_settletime() const;
  void clear_settletime();
  static const int kSettleTimeFieldNumber = 8;
  const ::std::string& settletime() const;
  void set_settletime(const ::std::string& value);
  void set_settletime(const char* value);
  void set_settletime(const char* value, size_t size);
  ::std::string* mutable_settletime();
  ::std::string* release_settletime();
  void set_allocated_settletime(::std::string* settletime);

  // optional int64 StopTrade = 9;
  bool has_stoptrade() const;
  void clear_stoptrade();
  static const int kStopTradeFieldNumber = 9;
  ::google::protobuf::int64 stoptrade() const;
  void set_stoptrade(::google::protobuf::int64 value);

  // optional int64 TradeRule = 10;
  bool has_traderule() const;
  void clear_traderule();
  static const int kTradeRuleFieldNumber = 10;
  ::google::protobuf::int64 traderule() const;
  void set_traderule(::google::protobuf::int64 value);

  // optional int64 MarginRate = 11;
  bool has_marginrate() const;
  void clear_marginrate();
  static const int kMarginRateFieldNumber = 11;
  ::google::protobuf::int64 marginrate() const;
  void set_marginrate(::google::protobuf::int64 value);

  // optional int64 ForceCloseRate = 12;
  bool has_forcecloserate() const;
  void clear_forcecloserate();
  static const int kForceCloseRateFieldNumber = 12;
  ::google::protobuf::int64 forcecloserate() const;
  void set_forcecloserate(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dzhyun.TradeRuleRsp)
 private:
  inline void set_has_rspno();
  inline void clear_has_rspno();
  inline void set_has_rspdesc();
  inline void clear_has_rspdesc();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_traderate();
  inline void clear_has_traderate();
  inline void set_has_mintradefee();
  inline void clear_has_mintradefee();
  inline void set_has_maxposamount();
  inline void clear_has_maxposamount();
  inline void set_has_maxorderamount();
  inline void clear_has_maxorderamount();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_stoptrade();
  inline void clear_has_stoptrade();
  inline void set_has_traderule();
  inline void clear_has_traderule();
  inline void set_has_marginrate();
  inline void clear_has_marginrate();
  inline void set_has_forcecloserate();
  inline void clear_has_forcecloserate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 rspno_;
  ::google::protobuf::internal::ArenaStringPtr rspdesc_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::int64 traderate_;
  ::google::protobuf::int64 mintradefee_;
  ::google::protobuf::int64 maxposamount_;
  ::google::protobuf::int64 maxorderamount_;
  ::google::protobuf::internal::ArenaStringPtr settletime_;
  ::google::protobuf::int64 stoptrade_;
  ::google::protobuf::int64 traderule_;
  ::google::protobuf::int64 marginrate_;
  ::google::protobuf::int64 forcecloserate_;
  friend void  protobuf_AddDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_AssignDesc_dzhyun_2ecounter_2eproto();
  friend void protobuf_ShutdownFile_dzhyun_2ecounter_2eproto();

  void InitAsDefaultInstance();
  static TradeRuleRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RepCounterRsp

// required uint32 RspNo = 1;
inline bool RepCounterRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepCounterRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepCounterRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepCounterRsp::clear_rspno() {
  rspno_ = 0u;
  clear_has_rspno();
}
inline ::google::protobuf::uint32 RepCounterRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.RepCounterRsp.RspNo)
  return rspno_;
}
inline void RepCounterRsp::set_rspno(::google::protobuf::uint32 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.RepCounterRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool RepCounterRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepCounterRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepCounterRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepCounterRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& RepCounterRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.RepCounterRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepCounterRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.RepCounterRsp.RspDesc)
}
inline void RepCounterRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.RepCounterRsp.RspDesc)
}
inline void RepCounterRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.RepCounterRsp.RspDesc)
}
inline ::std::string* RepCounterRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.RepCounterRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepCounterRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.RepCounterRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepCounterRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.RepCounterRsp.RspDesc)
}

// optional uint32 Status = 3;
inline bool RepCounterRsp::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RepCounterRsp::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RepCounterRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RepCounterRsp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 RepCounterRsp::status() const {
  // @@protoc_insertion_point(field_get:dzhyun.RepCounterRsp.Status)
  return status_;
}
inline void RepCounterRsp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.RepCounterRsp.Status)
}

// optional string StatusDesc = 4;
inline bool RepCounterRsp::has_statusdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RepCounterRsp::set_has_statusdesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RepCounterRsp::clear_has_statusdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RepCounterRsp::clear_statusdesc() {
  statusdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statusdesc();
}
inline const ::std::string& RepCounterRsp::statusdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.RepCounterRsp.StatusDesc)
  return statusdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepCounterRsp::set_statusdesc(const ::std::string& value) {
  set_has_statusdesc();
  statusdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.RepCounterRsp.StatusDesc)
}
inline void RepCounterRsp::set_statusdesc(const char* value) {
  set_has_statusdesc();
  statusdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.RepCounterRsp.StatusDesc)
}
inline void RepCounterRsp::set_statusdesc(const char* value, size_t size) {
  set_has_statusdesc();
  statusdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.RepCounterRsp.StatusDesc)
}
inline ::std::string* RepCounterRsp::mutable_statusdesc() {
  set_has_statusdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.RepCounterRsp.StatusDesc)
  return statusdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepCounterRsp::release_statusdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.RepCounterRsp.StatusDesc)
  clear_has_statusdesc();
  return statusdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepCounterRsp::set_allocated_statusdesc(::std::string* statusdesc) {
  if (statusdesc != NULL) {
    set_has_statusdesc();
  } else {
    clear_has_statusdesc();
  }
  statusdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.RepCounterRsp.StatusDesc)
}

// -------------------------------------------------------------------

// CounterRsp

// required int64 RspNo = 1;
inline bool CounterRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CounterRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CounterRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CounterRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 CounterRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.CounterRsp.RspNo)
  return rspno_;
}
inline void CounterRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CounterRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool CounterRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CounterRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CounterRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CounterRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& CounterRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.CounterRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CounterRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.CounterRsp.RspDesc)
}
inline void CounterRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.CounterRsp.RspDesc)
}
inline void CounterRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CounterRsp.RspDesc)
}
inline ::std::string* CounterRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.CounterRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CounterRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.CounterRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CounterRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CounterRsp.RspDesc)
}

// -------------------------------------------------------------------

// QueryCapitalRsp

// required int64 RspNo = 1;
inline bool QueryCapitalRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryCapitalRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryCapitalRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryCapitalRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 QueryCapitalRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.RspNo)
  return rspno_;
}
inline void QueryCapitalRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool QueryCapitalRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryCapitalRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryCapitalRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryCapitalRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& QueryCapitalRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCapitalRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.RspDesc)
}
inline void QueryCapitalRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryCapitalRsp.RspDesc)
}
inline void QueryCapitalRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryCapitalRsp.RspDesc)
}
inline ::std::string* QueryCapitalRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryCapitalRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCapitalRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryCapitalRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCapitalRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryCapitalRsp.RspDesc)
}

// optional int64 AvailCapital = 3;
inline bool QueryCapitalRsp::has_availcapital() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryCapitalRsp::set_has_availcapital() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryCapitalRsp::clear_has_availcapital() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryCapitalRsp::clear_availcapital() {
  availcapital_ = GOOGLE_LONGLONG(0);
  clear_has_availcapital();
}
inline ::google::protobuf::int64 QueryCapitalRsp::availcapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.AvailCapital)
  return availcapital_;
}
inline void QueryCapitalRsp::set_availcapital(::google::protobuf::int64 value) {
  set_has_availcapital();
  availcapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.AvailCapital)
}

// optional int64 FreezeCapital = 4;
inline bool QueryCapitalRsp::has_freezecapital() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryCapitalRsp::set_has_freezecapital() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryCapitalRsp::clear_has_freezecapital() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryCapitalRsp::clear_freezecapital() {
  freezecapital_ = GOOGLE_LONGLONG(0);
  clear_has_freezecapital();
}
inline ::google::protobuf::int64 QueryCapitalRsp::freezecapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.FreezeCapital)
  return freezecapital_;
}
inline void QueryCapitalRsp::set_freezecapital(::google::protobuf::int64 value) {
  set_has_freezecapital();
  freezecapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.FreezeCapital)
}

// optional int64 Margin = 5;
inline bool QueryCapitalRsp::has_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryCapitalRsp::set_has_margin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryCapitalRsp::clear_has_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryCapitalRsp::clear_margin() {
  margin_ = GOOGLE_LONGLONG(0);
  clear_has_margin();
}
inline ::google::protobuf::int64 QueryCapitalRsp::margin() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.Margin)
  return margin_;
}
inline void QueryCapitalRsp::set_margin(::google::protobuf::int64 value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.Margin)
}

// optional int64 TotalValue = 6;
inline bool QueryCapitalRsp::has_totalvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryCapitalRsp::set_has_totalvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryCapitalRsp::clear_has_totalvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryCapitalRsp::clear_totalvalue() {
  totalvalue_ = GOOGLE_LONGLONG(0);
  clear_has_totalvalue();
}
inline ::google::protobuf::int64 QueryCapitalRsp::totalvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.TotalValue)
  return totalvalue_;
}
inline void QueryCapitalRsp::set_totalvalue(::google::protobuf::int64 value) {
  set_has_totalvalue();
  totalvalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.TotalValue)
}

// optional int64 TotalCapital = 7;
inline bool QueryCapitalRsp::has_totalcapital() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryCapitalRsp::set_has_totalcapital() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryCapitalRsp::clear_has_totalcapital() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryCapitalRsp::clear_totalcapital() {
  totalcapital_ = GOOGLE_LONGLONG(0);
  clear_has_totalcapital();
}
inline ::google::protobuf::int64 QueryCapitalRsp::totalcapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryCapitalRsp.TotalCapital)
  return totalcapital_;
}
inline void QueryCapitalRsp::set_totalcapital(::google::protobuf::int64 value) {
  set_has_totalcapital();
  totalcapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryCapitalRsp.TotalCapital)
}

// -------------------------------------------------------------------

// HoldItem

// required string HoldNo = 1;
inline bool HoldItem::has_holdno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HoldItem::set_has_holdno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HoldItem::clear_has_holdno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HoldItem::clear_holdno() {
  holdno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holdno();
}
inline const ::std::string& HoldItem::holdno() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.HoldNo)
  return holdno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_holdno(const ::std::string& value) {
  set_has_holdno();
  holdno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.HoldNo)
}
inline void HoldItem::set_holdno(const char* value) {
  set_has_holdno();
  holdno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.HoldItem.HoldNo)
}
inline void HoldItem::set_holdno(const char* value, size_t size) {
  set_has_holdno();
  holdno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.HoldItem.HoldNo)
}
inline ::std::string* HoldItem::mutable_holdno() {
  set_has_holdno();
  // @@protoc_insertion_point(field_mutable:dzhyun.HoldItem.HoldNo)
  return holdno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HoldItem::release_holdno() {
  // @@protoc_insertion_point(field_release:dzhyun.HoldItem.HoldNo)
  clear_has_holdno();
  return holdno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_allocated_holdno(::std::string* holdno) {
  if (holdno != NULL) {
    set_has_holdno();
  } else {
    clear_has_holdno();
  }
  holdno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holdno);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.HoldItem.HoldNo)
}

// optional string ProductCode = 2;
inline bool HoldItem::has_productcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HoldItem::set_has_productcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HoldItem::clear_has_productcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HoldItem::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productcode();
}
inline const ::std::string& HoldItem::productcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.ProductCode)
  return productcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_productcode(const ::std::string& value) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.ProductCode)
}
inline void HoldItem::set_productcode(const char* value) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.HoldItem.ProductCode)
}
inline void HoldItem::set_productcode(const char* value, size_t size) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.HoldItem.ProductCode)
}
inline ::std::string* HoldItem::mutable_productcode() {
  set_has_productcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.HoldItem.ProductCode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HoldItem::release_productcode() {
  // @@protoc_insertion_point(field_release:dzhyun.HoldItem.ProductCode)
  clear_has_productcode();
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_allocated_productcode(::std::string* productcode) {
  if (productcode != NULL) {
    set_has_productcode();
  } else {
    clear_has_productcode();
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.HoldItem.ProductCode)
}

// optional string ProductName = 3;
inline bool HoldItem::has_productname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HoldItem::set_has_productname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HoldItem::clear_has_productname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HoldItem::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productname();
}
inline const ::std::string& HoldItem::productname() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.ProductName)
  return productname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_productname(const ::std::string& value) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.ProductName)
}
inline void HoldItem::set_productname(const char* value) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.HoldItem.ProductName)
}
inline void HoldItem::set_productname(const char* value, size_t size) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.HoldItem.ProductName)
}
inline ::std::string* HoldItem::mutable_productname() {
  set_has_productname();
  // @@protoc_insertion_point(field_mutable:dzhyun.HoldItem.ProductName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HoldItem::release_productname() {
  // @@protoc_insertion_point(field_release:dzhyun.HoldItem.ProductName)
  clear_has_productname();
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    set_has_productname();
  } else {
    clear_has_productname();
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.HoldItem.ProductName)
}

// optional string BuyOrSell = 4;
inline bool HoldItem::has_buyorsell() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HoldItem::set_has_buyorsell() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HoldItem::clear_has_buyorsell() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HoldItem::clear_buyorsell() {
  buyorsell_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyorsell();
}
inline const ::std::string& HoldItem::buyorsell() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.BuyOrSell)
  return buyorsell_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_buyorsell(const ::std::string& value) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.BuyOrSell)
}
inline void HoldItem::set_buyorsell(const char* value) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.HoldItem.BuyOrSell)
}
inline void HoldItem::set_buyorsell(const char* value, size_t size) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.HoldItem.BuyOrSell)
}
inline ::std::string* HoldItem::mutable_buyorsell() {
  set_has_buyorsell();
  // @@protoc_insertion_point(field_mutable:dzhyun.HoldItem.BuyOrSell)
  return buyorsell_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HoldItem::release_buyorsell() {
  // @@protoc_insertion_point(field_release:dzhyun.HoldItem.BuyOrSell)
  clear_has_buyorsell();
  return buyorsell_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HoldItem::set_allocated_buyorsell(::std::string* buyorsell) {
  if (buyorsell != NULL) {
    set_has_buyorsell();
  } else {
    clear_has_buyorsell();
  }
  buyorsell_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyorsell);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.HoldItem.BuyOrSell)
}

// optional int64 Margin = 5;
inline bool HoldItem::has_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HoldItem::set_has_margin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HoldItem::clear_has_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HoldItem::clear_margin() {
  margin_ = GOOGLE_LONGLONG(0);
  clear_has_margin();
}
inline ::google::protobuf::int64 HoldItem::margin() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.Margin)
  return margin_;
}
inline void HoldItem::set_margin(::google::protobuf::int64 value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.Margin)
}

// optional int64 PosAmount = 6;
inline bool HoldItem::has_posamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HoldItem::set_has_posamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HoldItem::clear_has_posamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HoldItem::clear_posamount() {
  posamount_ = GOOGLE_LONGLONG(0);
  clear_has_posamount();
}
inline ::google::protobuf::int64 HoldItem::posamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.PosAmount)
  return posamount_;
}
inline void HoldItem::set_posamount(::google::protobuf::int64 value) {
  set_has_posamount();
  posamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.PosAmount)
}

// optional int64 AvailAmount = 7;
inline bool HoldItem::has_availamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HoldItem::set_has_availamount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HoldItem::clear_has_availamount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HoldItem::clear_availamount() {
  availamount_ = GOOGLE_LONGLONG(0);
  clear_has_availamount();
}
inline ::google::protobuf::int64 HoldItem::availamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.AvailAmount)
  return availamount_;
}
inline void HoldItem::set_availamount(::google::protobuf::int64 value) {
  set_has_availamount();
  availamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.AvailAmount)
}

// optional int64 AvgPosPrice = 8;
inline bool HoldItem::has_avgposprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HoldItem::set_has_avgposprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HoldItem::clear_has_avgposprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HoldItem::clear_avgposprice() {
  avgposprice_ = GOOGLE_LONGLONG(0);
  clear_has_avgposprice();
}
inline ::google::protobuf::int64 HoldItem::avgposprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.AvgPosPrice)
  return avgposprice_;
}
inline void HoldItem::set_avgposprice(::google::protobuf::int64 value) {
  set_has_avgposprice();
  avgposprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.AvgPosPrice)
}

// optional int64 NewPrice = 9;
inline bool HoldItem::has_newprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HoldItem::set_has_newprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HoldItem::clear_has_newprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HoldItem::clear_newprice() {
  newprice_ = GOOGLE_LONGLONG(0);
  clear_has_newprice();
}
inline ::google::protobuf::int64 HoldItem::newprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.NewPrice)
  return newprice_;
}
inline void HoldItem::set_newprice(::google::protobuf::int64 value) {
  set_has_newprice();
  newprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.NewPrice)
}

// optional int64 Value = 10;
inline bool HoldItem::has_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HoldItem::set_has_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HoldItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HoldItem::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 HoldItem::value() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.Value)
  return value_;
}
inline void HoldItem::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.Value)
}

// optional int64 Profit = 11;
inline bool HoldItem::has_profit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HoldItem::set_has_profit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HoldItem::clear_has_profit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HoldItem::clear_profit() {
  profit_ = GOOGLE_LONGLONG(0);
  clear_has_profit();
}
inline ::google::protobuf::int64 HoldItem::profit() const {
  // @@protoc_insertion_point(field_get:dzhyun.HoldItem.Profit)
  return profit_;
}
inline void HoldItem::set_profit(::google::protobuf::int64 value) {
  set_has_profit();
  profit_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.HoldItem.Profit)
}

// -------------------------------------------------------------------

// QueryHoldRsp

// required int64 RspNo = 1;
inline bool QueryHoldRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryHoldRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryHoldRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryHoldRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 QueryHoldRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.RspNo)
  return rspno_;
}
inline void QueryHoldRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool QueryHoldRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryHoldRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryHoldRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryHoldRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& QueryHoldRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryHoldRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.RspDesc)
}
inline void QueryHoldRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryHoldRsp.RspDesc)
}
inline void QueryHoldRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryHoldRsp.RspDesc)
}
inline ::std::string* QueryHoldRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryHoldRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryHoldRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryHoldRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryHoldRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryHoldRsp.RspDesc)
}

// optional int64 AvailCapital = 3;
inline bool QueryHoldRsp::has_availcapital() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryHoldRsp::set_has_availcapital() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryHoldRsp::clear_has_availcapital() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryHoldRsp::clear_availcapital() {
  availcapital_ = GOOGLE_LONGLONG(0);
  clear_has_availcapital();
}
inline ::google::protobuf::int64 QueryHoldRsp::availcapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.AvailCapital)
  return availcapital_;
}
inline void QueryHoldRsp::set_availcapital(::google::protobuf::int64 value) {
  set_has_availcapital();
  availcapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.AvailCapital)
}

// optional int64 FreezeCapital = 4;
inline bool QueryHoldRsp::has_freezecapital() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryHoldRsp::set_has_freezecapital() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryHoldRsp::clear_has_freezecapital() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryHoldRsp::clear_freezecapital() {
  freezecapital_ = GOOGLE_LONGLONG(0);
  clear_has_freezecapital();
}
inline ::google::protobuf::int64 QueryHoldRsp::freezecapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.FreezeCapital)
  return freezecapital_;
}
inline void QueryHoldRsp::set_freezecapital(::google::protobuf::int64 value) {
  set_has_freezecapital();
  freezecapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.FreezeCapital)
}

// optional int64 TotalMargin = 5;
inline bool QueryHoldRsp::has_totalmargin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryHoldRsp::set_has_totalmargin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryHoldRsp::clear_has_totalmargin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryHoldRsp::clear_totalmargin() {
  totalmargin_ = GOOGLE_LONGLONG(0);
  clear_has_totalmargin();
}
inline ::google::protobuf::int64 QueryHoldRsp::totalmargin() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.TotalMargin)
  return totalmargin_;
}
inline void QueryHoldRsp::set_totalmargin(::google::protobuf::int64 value) {
  set_has_totalmargin();
  totalmargin_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.TotalMargin)
}

// optional int64 TotalValue = 6;
inline bool QueryHoldRsp::has_totalvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryHoldRsp::set_has_totalvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryHoldRsp::clear_has_totalvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryHoldRsp::clear_totalvalue() {
  totalvalue_ = GOOGLE_LONGLONG(0);
  clear_has_totalvalue();
}
inline ::google::protobuf::int64 QueryHoldRsp::totalvalue() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.TotalValue)
  return totalvalue_;
}
inline void QueryHoldRsp::set_totalvalue(::google::protobuf::int64 value) {
  set_has_totalvalue();
  totalvalue_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.TotalValue)
}

// optional int64 TotalCapital = 7;
inline bool QueryHoldRsp::has_totalcapital() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryHoldRsp::set_has_totalcapital() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryHoldRsp::clear_has_totalcapital() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryHoldRsp::clear_totalcapital() {
  totalcapital_ = GOOGLE_LONGLONG(0);
  clear_has_totalcapital();
}
inline ::google::protobuf::int64 QueryHoldRsp::totalcapital() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.TotalCapital)
  return totalcapital_;
}
inline void QueryHoldRsp::set_totalcapital(::google::protobuf::int64 value) {
  set_has_totalcapital();
  totalcapital_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.TotalCapital)
}

// optional int64 TotalProfit = 8;
inline bool QueryHoldRsp::has_totalprofit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryHoldRsp::set_has_totalprofit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryHoldRsp::clear_has_totalprofit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryHoldRsp::clear_totalprofit() {
  totalprofit_ = GOOGLE_LONGLONG(0);
  clear_has_totalprofit();
}
inline ::google::protobuf::int64 QueryHoldRsp::totalprofit() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.TotalProfit)
  return totalprofit_;
}
inline void QueryHoldRsp::set_totalprofit(::google::protobuf::int64 value) {
  set_has_totalprofit();
  totalprofit_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.TotalProfit)
}

// repeated .dzhyun.HoldItem HoldList = 9;
inline int QueryHoldRsp::holdlist_size() const {
  return holdlist_.size();
}
inline void QueryHoldRsp::clear_holdlist() {
  holdlist_.Clear();
}
inline const ::dzhyun::HoldItem& QueryHoldRsp::holdlist(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.HoldList)
  return holdlist_.Get(index);
}
inline ::dzhyun::HoldItem* QueryHoldRsp::mutable_holdlist(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryHoldRsp.HoldList)
  return holdlist_.Mutable(index);
}
inline ::dzhyun::HoldItem* QueryHoldRsp::add_holdlist() {
  // @@protoc_insertion_point(field_add:dzhyun.QueryHoldRsp.HoldList)
  return holdlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::HoldItem >*
QueryHoldRsp::mutable_holdlist() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.QueryHoldRsp.HoldList)
  return &holdlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::HoldItem >&
QueryHoldRsp::holdlist() const {
  // @@protoc_insertion_point(field_list:dzhyun.QueryHoldRsp.HoldList)
  return holdlist_;
}

// optional string CapitalId = 10;
inline bool QueryHoldRsp::has_capitalid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryHoldRsp::set_has_capitalid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryHoldRsp::clear_has_capitalid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryHoldRsp::clear_capitalid() {
  capitalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_capitalid();
}
inline const ::std::string& QueryHoldRsp::capitalid() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryHoldRsp.CapitalId)
  return capitalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryHoldRsp::set_capitalid(const ::std::string& value) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryHoldRsp.CapitalId)
}
inline void QueryHoldRsp::set_capitalid(const char* value) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryHoldRsp.CapitalId)
}
inline void QueryHoldRsp::set_capitalid(const char* value, size_t size) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryHoldRsp.CapitalId)
}
inline ::std::string* QueryHoldRsp::mutable_capitalid() {
  set_has_capitalid();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryHoldRsp.CapitalId)
  return capitalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryHoldRsp::release_capitalid() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryHoldRsp.CapitalId)
  clear_has_capitalid();
  return capitalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryHoldRsp::set_allocated_capitalid(::std::string* capitalid) {
  if (capitalid != NULL) {
    set_has_capitalid();
  } else {
    clear_has_capitalid();
  }
  capitalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capitalid);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryHoldRsp.CapitalId)
}

// -------------------------------------------------------------------

// OrderItem

// required string OrderNo = 1;
inline bool OrderItem::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderItem::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderItem::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderItem::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OrderItem::orderno() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.OrderNo)
  return orderno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.OrderNo)
}
inline void OrderItem::set_orderno(const char* value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.OrderNo)
}
inline void OrderItem::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.OrderNo)
}
inline ::std::string* OrderItem::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.OrderNo)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_orderno() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.OrderNo)
  clear_has_orderno();
  return orderno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.OrderNo)
}

// optional string OrderTime = 2;
inline bool OrderItem::has_ordertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderItem::set_has_ordertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderItem::clear_has_ordertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderItem::clear_ordertime() {
  ordertime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ordertime();
}
inline const ::std::string& OrderItem::ordertime() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.OrderTime)
  return ordertime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_ordertime(const ::std::string& value) {
  set_has_ordertime();
  ordertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.OrderTime)
}
inline void OrderItem::set_ordertime(const char* value) {
  set_has_ordertime();
  ordertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.OrderTime)
}
inline void OrderItem::set_ordertime(const char* value, size_t size) {
  set_has_ordertime();
  ordertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.OrderTime)
}
inline ::std::string* OrderItem::mutable_ordertime() {
  set_has_ordertime();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.OrderTime)
  return ordertime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_ordertime() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.OrderTime)
  clear_has_ordertime();
  return ordertime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_ordertime(::std::string* ordertime) {
  if (ordertime != NULL) {
    set_has_ordertime();
  } else {
    clear_has_ordertime();
  }
  ordertime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertime);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.OrderTime)
}

// optional string ProductCode = 3;
inline bool OrderItem::has_productcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderItem::set_has_productcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderItem::clear_has_productcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderItem::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productcode();
}
inline const ::std::string& OrderItem::productcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.ProductCode)
  return productcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_productcode(const ::std::string& value) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.ProductCode)
}
inline void OrderItem::set_productcode(const char* value) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.ProductCode)
}
inline void OrderItem::set_productcode(const char* value, size_t size) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.ProductCode)
}
inline ::std::string* OrderItem::mutable_productcode() {
  set_has_productcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.ProductCode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_productcode() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.ProductCode)
  clear_has_productcode();
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_productcode(::std::string* productcode) {
  if (productcode != NULL) {
    set_has_productcode();
  } else {
    clear_has_productcode();
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.ProductCode)
}

// optional string ProductName = 4;
inline bool OrderItem::has_productname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderItem::set_has_productname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderItem::clear_has_productname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderItem::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productname();
}
inline const ::std::string& OrderItem::productname() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.ProductName)
  return productname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_productname(const ::std::string& value) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.ProductName)
}
inline void OrderItem::set_productname(const char* value) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.ProductName)
}
inline void OrderItem::set_productname(const char* value, size_t size) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.ProductName)
}
inline ::std::string* OrderItem::mutable_productname() {
  set_has_productname();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.ProductName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_productname() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.ProductName)
  clear_has_productname();
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    set_has_productname();
  } else {
    clear_has_productname();
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.ProductName)
}

// optional string BuyOrSell = 5;
inline bool OrderItem::has_buyorsell() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderItem::set_has_buyorsell() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderItem::clear_has_buyorsell() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderItem::clear_buyorsell() {
  buyorsell_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyorsell();
}
inline const ::std::string& OrderItem::buyorsell() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.BuyOrSell)
  return buyorsell_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_buyorsell(const ::std::string& value) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.BuyOrSell)
}
inline void OrderItem::set_buyorsell(const char* value) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.BuyOrSell)
}
inline void OrderItem::set_buyorsell(const char* value, size_t size) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.BuyOrSell)
}
inline ::std::string* OrderItem::mutable_buyorsell() {
  set_has_buyorsell();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.BuyOrSell)
  return buyorsell_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_buyorsell() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.BuyOrSell)
  clear_has_buyorsell();
  return buyorsell_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_buyorsell(::std::string* buyorsell) {
  if (buyorsell != NULL) {
    set_has_buyorsell();
  } else {
    clear_has_buyorsell();
  }
  buyorsell_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyorsell);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.BuyOrSell)
}

// optional string OpenOrClose = 6;
inline bool OrderItem::has_openorclose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderItem::set_has_openorclose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderItem::clear_has_openorclose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderItem::clear_openorclose() {
  openorclose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openorclose();
}
inline const ::std::string& OrderItem::openorclose() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.OpenOrClose)
  return openorclose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_openorclose(const ::std::string& value) {
  set_has_openorclose();
  openorclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.OpenOrClose)
}
inline void OrderItem::set_openorclose(const char* value) {
  set_has_openorclose();
  openorclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.OpenOrClose)
}
inline void OrderItem::set_openorclose(const char* value, size_t size) {
  set_has_openorclose();
  openorclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.OpenOrClose)
}
inline ::std::string* OrderItem::mutable_openorclose() {
  set_has_openorclose();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.OpenOrClose)
  return openorclose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_openorclose() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.OpenOrClose)
  clear_has_openorclose();
  return openorclose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_openorclose(::std::string* openorclose) {
  if (openorclose != NULL) {
    set_has_openorclose();
  } else {
    clear_has_openorclose();
  }
  openorclose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openorclose);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.OpenOrClose)
}

// optional string OrderType = 7;
inline bool OrderItem::has_ordertype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderItem::set_has_ordertype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderItem::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderItem::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ordertype();
}
inline const ::std::string& OrderItem::ordertype() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.OrderType)
  return ordertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_ordertype(const ::std::string& value) {
  set_has_ordertype();
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.OrderType)
}
inline void OrderItem::set_ordertype(const char* value) {
  set_has_ordertype();
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.OrderType)
}
inline void OrderItem::set_ordertype(const char* value, size_t size) {
  set_has_ordertype();
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.OrderType)
}
inline ::std::string* OrderItem::mutable_ordertype() {
  set_has_ordertype();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.OrderType)
  return ordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_ordertype() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.OrderType)
  clear_has_ordertype();
  return ordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_ordertype(::std::string* ordertype) {
  if (ordertype != NULL) {
    set_has_ordertype();
  } else {
    clear_has_ordertype();
  }
  ordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.OrderType)
}

// optional int64 OrderAmount = 8;
inline bool OrderItem::has_orderamount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderItem::set_has_orderamount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderItem::clear_has_orderamount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderItem::clear_orderamount() {
  orderamount_ = GOOGLE_LONGLONG(0);
  clear_has_orderamount();
}
inline ::google::protobuf::int64 OrderItem::orderamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.OrderAmount)
  return orderamount_;
}
inline void OrderItem::set_orderamount(::google::protobuf::int64 value) {
  set_has_orderamount();
  orderamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.OrderAmount)
}

// optional int64 OrderPrice = 9;
inline bool OrderItem::has_orderprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderItem::set_has_orderprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderItem::clear_has_orderprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderItem::clear_orderprice() {
  orderprice_ = GOOGLE_LONGLONG(0);
  clear_has_orderprice();
}
inline ::google::protobuf::int64 OrderItem::orderprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.OrderPrice)
  return orderprice_;
}
inline void OrderItem::set_orderprice(::google::protobuf::int64 value) {
  set_has_orderprice();
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.OrderPrice)
}

// optional string Status = 10;
inline bool OrderItem::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OrderItem::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OrderItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OrderItem::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& OrderItem::status() const {
  // @@protoc_insertion_point(field_get:dzhyun.OrderItem.Status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.OrderItem.Status)
}
inline void OrderItem::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.OrderItem.Status)
}
inline void OrderItem::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.OrderItem.Status)
}
inline ::std::string* OrderItem::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:dzhyun.OrderItem.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderItem::release_status() {
  // @@protoc_insertion_point(field_release:dzhyun.OrderItem.Status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderItem::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.OrderItem.Status)
}

// -------------------------------------------------------------------

// QueryOrderRsp

// required int64 RspNo = 1;
inline bool QueryOrderRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryOrderRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryOrderRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryOrderRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 QueryOrderRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryOrderRsp.RspNo)
  return rspno_;
}
inline void QueryOrderRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryOrderRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool QueryOrderRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryOrderRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryOrderRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryOrderRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& QueryOrderRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryOrderRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryOrderRsp.RspDesc)
}
inline void QueryOrderRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryOrderRsp.RspDesc)
}
inline void QueryOrderRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryOrderRsp.RspDesc)
}
inline ::std::string* QueryOrderRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryOrderRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrderRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryOrderRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryOrderRsp.RspDesc)
}

// repeated .dzhyun.OrderItem OrderList = 3;
inline int QueryOrderRsp::orderlist_size() const {
  return orderlist_.size();
}
inline void QueryOrderRsp::clear_orderlist() {
  orderlist_.Clear();
}
inline const ::dzhyun::OrderItem& QueryOrderRsp::orderlist(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryOrderRsp.OrderList)
  return orderlist_.Get(index);
}
inline ::dzhyun::OrderItem* QueryOrderRsp::mutable_orderlist(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryOrderRsp.OrderList)
  return orderlist_.Mutable(index);
}
inline ::dzhyun::OrderItem* QueryOrderRsp::add_orderlist() {
  // @@protoc_insertion_point(field_add:dzhyun.QueryOrderRsp.OrderList)
  return orderlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::OrderItem >*
QueryOrderRsp::mutable_orderlist() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.QueryOrderRsp.OrderList)
  return &orderlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::OrderItem >&
QueryOrderRsp::orderlist() const {
  // @@protoc_insertion_point(field_list:dzhyun.QueryOrderRsp.OrderList)
  return orderlist_;
}

// optional string CapitalId = 4;
inline bool QueryOrderRsp::has_capitalid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryOrderRsp::set_has_capitalid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryOrderRsp::clear_has_capitalid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryOrderRsp::clear_capitalid() {
  capitalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_capitalid();
}
inline const ::std::string& QueryOrderRsp::capitalid() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryOrderRsp.CapitalId)
  return capitalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRsp::set_capitalid(const ::std::string& value) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryOrderRsp.CapitalId)
}
inline void QueryOrderRsp::set_capitalid(const char* value) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryOrderRsp.CapitalId)
}
inline void QueryOrderRsp::set_capitalid(const char* value, size_t size) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryOrderRsp.CapitalId)
}
inline ::std::string* QueryOrderRsp::mutable_capitalid() {
  set_has_capitalid();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryOrderRsp.CapitalId)
  return capitalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrderRsp::release_capitalid() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryOrderRsp.CapitalId)
  clear_has_capitalid();
  return capitalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRsp::set_allocated_capitalid(::std::string* capitalid) {
  if (capitalid != NULL) {
    set_has_capitalid();
  } else {
    clear_has_capitalid();
  }
  capitalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capitalid);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryOrderRsp.CapitalId)
}

// -------------------------------------------------------------------

// DealItem

// required string DealNo = 1;
inline bool DealItem::has_dealno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DealItem::set_has_dealno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DealItem::clear_has_dealno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DealItem::clear_dealno() {
  dealno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealno();
}
inline const ::std::string& DealItem::dealno() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.DealNo)
  return dealno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_dealno(const ::std::string& value) {
  set_has_dealno();
  dealno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.DealNo)
}
inline void DealItem::set_dealno(const char* value) {
  set_has_dealno();
  dealno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DealItem.DealNo)
}
inline void DealItem::set_dealno(const char* value, size_t size) {
  set_has_dealno();
  dealno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DealItem.DealNo)
}
inline ::std::string* DealItem::mutable_dealno() {
  set_has_dealno();
  // @@protoc_insertion_point(field_mutable:dzhyun.DealItem.DealNo)
  return dealno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DealItem::release_dealno() {
  // @@protoc_insertion_point(field_release:dzhyun.DealItem.DealNo)
  clear_has_dealno();
  return dealno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_allocated_dealno(::std::string* dealno) {
  if (dealno != NULL) {
    set_has_dealno();
  } else {
    clear_has_dealno();
  }
  dealno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealno);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DealItem.DealNo)
}

// optional string DealTime = 2;
inline bool DealItem::has_dealtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DealItem::set_has_dealtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DealItem::clear_has_dealtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DealItem::clear_dealtime() {
  dealtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealtime();
}
inline const ::std::string& DealItem::dealtime() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.DealTime)
  return dealtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_dealtime(const ::std::string& value) {
  set_has_dealtime();
  dealtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.DealTime)
}
inline void DealItem::set_dealtime(const char* value) {
  set_has_dealtime();
  dealtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DealItem.DealTime)
}
inline void DealItem::set_dealtime(const char* value, size_t size) {
  set_has_dealtime();
  dealtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DealItem.DealTime)
}
inline ::std::string* DealItem::mutable_dealtime() {
  set_has_dealtime();
  // @@protoc_insertion_point(field_mutable:dzhyun.DealItem.DealTime)
  return dealtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DealItem::release_dealtime() {
  // @@protoc_insertion_point(field_release:dzhyun.DealItem.DealTime)
  clear_has_dealtime();
  return dealtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_allocated_dealtime(::std::string* dealtime) {
  if (dealtime != NULL) {
    set_has_dealtime();
  } else {
    clear_has_dealtime();
  }
  dealtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealtime);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DealItem.DealTime)
}

// optional string ProductCode = 3;
inline bool DealItem::has_productcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DealItem::set_has_productcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DealItem::clear_has_productcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DealItem::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productcode();
}
inline const ::std::string& DealItem::productcode() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.ProductCode)
  return productcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_productcode(const ::std::string& value) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.ProductCode)
}
inline void DealItem::set_productcode(const char* value) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DealItem.ProductCode)
}
inline void DealItem::set_productcode(const char* value, size_t size) {
  set_has_productcode();
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DealItem.ProductCode)
}
inline ::std::string* DealItem::mutable_productcode() {
  set_has_productcode();
  // @@protoc_insertion_point(field_mutable:dzhyun.DealItem.ProductCode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DealItem::release_productcode() {
  // @@protoc_insertion_point(field_release:dzhyun.DealItem.ProductCode)
  clear_has_productcode();
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_allocated_productcode(::std::string* productcode) {
  if (productcode != NULL) {
    set_has_productcode();
  } else {
    clear_has_productcode();
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DealItem.ProductCode)
}

// optional string ProductName = 4;
inline bool DealItem::has_productname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DealItem::set_has_productname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DealItem::clear_has_productname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DealItem::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productname();
}
inline const ::std::string& DealItem::productname() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.ProductName)
  return productname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_productname(const ::std::string& value) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.ProductName)
}
inline void DealItem::set_productname(const char* value) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DealItem.ProductName)
}
inline void DealItem::set_productname(const char* value, size_t size) {
  set_has_productname();
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DealItem.ProductName)
}
inline ::std::string* DealItem::mutable_productname() {
  set_has_productname();
  // @@protoc_insertion_point(field_mutable:dzhyun.DealItem.ProductName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DealItem::release_productname() {
  // @@protoc_insertion_point(field_release:dzhyun.DealItem.ProductName)
  clear_has_productname();
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    set_has_productname();
  } else {
    clear_has_productname();
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DealItem.ProductName)
}

// optional string BuyOrSell = 5;
inline bool DealItem::has_buyorsell() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DealItem::set_has_buyorsell() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DealItem::clear_has_buyorsell() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DealItem::clear_buyorsell() {
  buyorsell_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyorsell();
}
inline const ::std::string& DealItem::buyorsell() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.BuyOrSell)
  return buyorsell_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_buyorsell(const ::std::string& value) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.BuyOrSell)
}
inline void DealItem::set_buyorsell(const char* value) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DealItem.BuyOrSell)
}
inline void DealItem::set_buyorsell(const char* value, size_t size) {
  set_has_buyorsell();
  buyorsell_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DealItem.BuyOrSell)
}
inline ::std::string* DealItem::mutable_buyorsell() {
  set_has_buyorsell();
  // @@protoc_insertion_point(field_mutable:dzhyun.DealItem.BuyOrSell)
  return buyorsell_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DealItem::release_buyorsell() {
  // @@protoc_insertion_point(field_release:dzhyun.DealItem.BuyOrSell)
  clear_has_buyorsell();
  return buyorsell_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_allocated_buyorsell(::std::string* buyorsell) {
  if (buyorsell != NULL) {
    set_has_buyorsell();
  } else {
    clear_has_buyorsell();
  }
  buyorsell_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyorsell);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DealItem.BuyOrSell)
}

// optional string OpenOrClose = 6;
inline bool DealItem::has_openorclose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DealItem::set_has_openorclose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DealItem::clear_has_openorclose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DealItem::clear_openorclose() {
  openorclose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openorclose();
}
inline const ::std::string& DealItem::openorclose() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.OpenOrClose)
  return openorclose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_openorclose(const ::std::string& value) {
  set_has_openorclose();
  openorclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.OpenOrClose)
}
inline void DealItem::set_openorclose(const char* value) {
  set_has_openorclose();
  openorclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.DealItem.OpenOrClose)
}
inline void DealItem::set_openorclose(const char* value, size_t size) {
  set_has_openorclose();
  openorclose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.DealItem.OpenOrClose)
}
inline ::std::string* DealItem::mutable_openorclose() {
  set_has_openorclose();
  // @@protoc_insertion_point(field_mutable:dzhyun.DealItem.OpenOrClose)
  return openorclose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DealItem::release_openorclose() {
  // @@protoc_insertion_point(field_release:dzhyun.DealItem.OpenOrClose)
  clear_has_openorclose();
  return openorclose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DealItem::set_allocated_openorclose(::std::string* openorclose) {
  if (openorclose != NULL) {
    set_has_openorclose();
  } else {
    clear_has_openorclose();
  }
  openorclose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openorclose);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.DealItem.OpenOrClose)
}

// optional int64 DealAmount = 7;
inline bool DealItem::has_dealamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DealItem::set_has_dealamount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DealItem::clear_has_dealamount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DealItem::clear_dealamount() {
  dealamount_ = GOOGLE_LONGLONG(0);
  clear_has_dealamount();
}
inline ::google::protobuf::int64 DealItem::dealamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.DealAmount)
  return dealamount_;
}
inline void DealItem::set_dealamount(::google::protobuf::int64 value) {
  set_has_dealamount();
  dealamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.DealAmount)
}

// optional int64 DealPrice = 8;
inline bool DealItem::has_dealprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DealItem::set_has_dealprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DealItem::clear_has_dealprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DealItem::clear_dealprice() {
  dealprice_ = GOOGLE_LONGLONG(0);
  clear_has_dealprice();
}
inline ::google::protobuf::int64 DealItem::dealprice() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.DealPrice)
  return dealprice_;
}
inline void DealItem::set_dealprice(::google::protobuf::int64 value) {
  set_has_dealprice();
  dealprice_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.DealPrice)
}

// optional int64 Fee = 9;
inline bool DealItem::has_fee() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DealItem::set_has_fee() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DealItem::clear_has_fee() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DealItem::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
  clear_has_fee();
}
inline ::google::protobuf::int64 DealItem::fee() const {
  // @@protoc_insertion_point(field_get:dzhyun.DealItem.Fee)
  return fee_;
}
inline void DealItem::set_fee(::google::protobuf::int64 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.DealItem.Fee)
}

// -------------------------------------------------------------------

// QueryDealRsp

// required int64 RspNo = 1;
inline bool QueryDealRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDealRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDealRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDealRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 QueryDealRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryDealRsp.RspNo)
  return rspno_;
}
inline void QueryDealRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.QueryDealRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool QueryDealRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDealRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDealRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDealRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& QueryDealRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryDealRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDealRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryDealRsp.RspDesc)
}
inline void QueryDealRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryDealRsp.RspDesc)
}
inline void QueryDealRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryDealRsp.RspDesc)
}
inline ::std::string* QueryDealRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryDealRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryDealRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryDealRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDealRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryDealRsp.RspDesc)
}

// repeated .dzhyun.DealItem DealList = 3;
inline int QueryDealRsp::deallist_size() const {
  return deallist_.size();
}
inline void QueryDealRsp::clear_deallist() {
  deallist_.Clear();
}
inline const ::dzhyun::DealItem& QueryDealRsp::deallist(int index) const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryDealRsp.DealList)
  return deallist_.Get(index);
}
inline ::dzhyun::DealItem* QueryDealRsp::mutable_deallist(int index) {
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryDealRsp.DealList)
  return deallist_.Mutable(index);
}
inline ::dzhyun::DealItem* QueryDealRsp::add_deallist() {
  // @@protoc_insertion_point(field_add:dzhyun.QueryDealRsp.DealList)
  return deallist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dzhyun::DealItem >*
QueryDealRsp::mutable_deallist() {
  // @@protoc_insertion_point(field_mutable_list:dzhyun.QueryDealRsp.DealList)
  return &deallist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dzhyun::DealItem >&
QueryDealRsp::deallist() const {
  // @@protoc_insertion_point(field_list:dzhyun.QueryDealRsp.DealList)
  return deallist_;
}

// optional string CapitalId = 4;
inline bool QueryDealRsp::has_capitalid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryDealRsp::set_has_capitalid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryDealRsp::clear_has_capitalid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryDealRsp::clear_capitalid() {
  capitalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_capitalid();
}
inline const ::std::string& QueryDealRsp::capitalid() const {
  // @@protoc_insertion_point(field_get:dzhyun.QueryDealRsp.CapitalId)
  return capitalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDealRsp::set_capitalid(const ::std::string& value) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.QueryDealRsp.CapitalId)
}
inline void QueryDealRsp::set_capitalid(const char* value) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.QueryDealRsp.CapitalId)
}
inline void QueryDealRsp::set_capitalid(const char* value, size_t size) {
  set_has_capitalid();
  capitalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.QueryDealRsp.CapitalId)
}
inline ::std::string* QueryDealRsp::mutable_capitalid() {
  set_has_capitalid();
  // @@protoc_insertion_point(field_mutable:dzhyun.QueryDealRsp.CapitalId)
  return capitalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryDealRsp::release_capitalid() {
  // @@protoc_insertion_point(field_release:dzhyun.QueryDealRsp.CapitalId)
  clear_has_capitalid();
  return capitalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDealRsp::set_allocated_capitalid(::std::string* capitalid) {
  if (capitalid != NULL) {
    set_has_capitalid();
  } else {
    clear_has_capitalid();
  }
  capitalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capitalid);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.QueryDealRsp.CapitalId)
}

// -------------------------------------------------------------------

// CounterSettleRsp

// required int64 RspNo = 1;
inline bool CounterSettleRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CounterSettleRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CounterSettleRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CounterSettleRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 CounterSettleRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.CounterSettleRsp.RspNo)
  return rspno_;
}
inline void CounterSettleRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CounterSettleRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool CounterSettleRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CounterSettleRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CounterSettleRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CounterSettleRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& CounterSettleRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.CounterSettleRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CounterSettleRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.CounterSettleRsp.RspDesc)
}
inline void CounterSettleRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.CounterSettleRsp.RspDesc)
}
inline void CounterSettleRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CounterSettleRsp.RspDesc)
}
inline ::std::string* CounterSettleRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.CounterSettleRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CounterSettleRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.CounterSettleRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CounterSettleRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CounterSettleRsp.RspDesc)
}

// optional string SettleTime = 3;
inline bool CounterSettleRsp::has_settletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CounterSettleRsp::set_has_settletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CounterSettleRsp::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CounterSettleRsp::clear_settletime() {
  settletime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settletime();
}
inline const ::std::string& CounterSettleRsp::settletime() const {
  // @@protoc_insertion_point(field_get:dzhyun.CounterSettleRsp.SettleTime)
  return settletime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CounterSettleRsp::set_settletime(const ::std::string& value) {
  set_has_settletime();
  settletime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.CounterSettleRsp.SettleTime)
}
inline void CounterSettleRsp::set_settletime(const char* value) {
  set_has_settletime();
  settletime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.CounterSettleRsp.SettleTime)
}
inline void CounterSettleRsp::set_settletime(const char* value, size_t size) {
  set_has_settletime();
  settletime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.CounterSettleRsp.SettleTime)
}
inline ::std::string* CounterSettleRsp::mutable_settletime() {
  set_has_settletime();
  // @@protoc_insertion_point(field_mutable:dzhyun.CounterSettleRsp.SettleTime)
  return settletime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CounterSettleRsp::release_settletime() {
  // @@protoc_insertion_point(field_release:dzhyun.CounterSettleRsp.SettleTime)
  clear_has_settletime();
  return settletime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CounterSettleRsp::set_allocated_settletime(::std::string* settletime) {
  if (settletime != NULL) {
    set_has_settletime();
  } else {
    clear_has_settletime();
  }
  settletime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settletime);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.CounterSettleRsp.SettleTime)
}

// optional int64 Status = 4;
inline bool CounterSettleRsp::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CounterSettleRsp::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CounterSettleRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CounterSettleRsp::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::int64 CounterSettleRsp::status() const {
  // @@protoc_insertion_point(field_get:dzhyun.CounterSettleRsp.Status)
  return status_;
}
inline void CounterSettleRsp::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.CounterSettleRsp.Status)
}

// -------------------------------------------------------------------

// TradeRuleRsp

// required int64 RspNo = 1;
inline bool TradeRuleRsp::has_rspno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeRuleRsp::set_has_rspno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeRuleRsp::clear_has_rspno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeRuleRsp::clear_rspno() {
  rspno_ = GOOGLE_LONGLONG(0);
  clear_has_rspno();
}
inline ::google::protobuf::int64 TradeRuleRsp::rspno() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.RspNo)
  return rspno_;
}
inline void TradeRuleRsp::set_rspno(::google::protobuf::int64 value) {
  set_has_rspno();
  rspno_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.RspNo)
}

// optional string RspDesc = 2;
inline bool TradeRuleRsp::has_rspdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeRuleRsp::set_has_rspdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeRuleRsp::clear_has_rspdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeRuleRsp::clear_rspdesc() {
  rspdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rspdesc();
}
inline const ::std::string& TradeRuleRsp::rspdesc() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.RspDesc)
  return rspdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeRuleRsp::set_rspdesc(const ::std::string& value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.RspDesc)
}
inline void TradeRuleRsp::set_rspdesc(const char* value) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TradeRuleRsp.RspDesc)
}
inline void TradeRuleRsp::set_rspdesc(const char* value, size_t size) {
  set_has_rspdesc();
  rspdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TradeRuleRsp.RspDesc)
}
inline ::std::string* TradeRuleRsp::mutable_rspdesc() {
  set_has_rspdesc();
  // @@protoc_insertion_point(field_mutable:dzhyun.TradeRuleRsp.RspDesc)
  return rspdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeRuleRsp::release_rspdesc() {
  // @@protoc_insertion_point(field_release:dzhyun.TradeRuleRsp.RspDesc)
  clear_has_rspdesc();
  return rspdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeRuleRsp::set_allocated_rspdesc(::std::string* rspdesc) {
  if (rspdesc != NULL) {
    set_has_rspdesc();
  } else {
    clear_has_rspdesc();
  }
  rspdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspdesc);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TradeRuleRsp.RspDesc)
}

// optional string UpdateTime = 3;
inline bool TradeRuleRsp::has_updatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeRuleRsp::set_has_updatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeRuleRsp::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeRuleRsp::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updatetime();
}
inline const ::std::string& TradeRuleRsp::updatetime() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.UpdateTime)
  return updatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeRuleRsp::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.UpdateTime)
}
inline void TradeRuleRsp::set_updatetime(const char* value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TradeRuleRsp.UpdateTime)
}
inline void TradeRuleRsp::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TradeRuleRsp.UpdateTime)
}
inline ::std::string* TradeRuleRsp::mutable_updatetime() {
  set_has_updatetime();
  // @@protoc_insertion_point(field_mutable:dzhyun.TradeRuleRsp.UpdateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeRuleRsp::release_updatetime() {
  // @@protoc_insertion_point(field_release:dzhyun.TradeRuleRsp.UpdateTime)
  clear_has_updatetime();
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeRuleRsp::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    set_has_updatetime();
  } else {
    clear_has_updatetime();
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TradeRuleRsp.UpdateTime)
}

// optional int64 TradeRate = 4;
inline bool TradeRuleRsp::has_traderate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeRuleRsp::set_has_traderate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeRuleRsp::clear_has_traderate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeRuleRsp::clear_traderate() {
  traderate_ = GOOGLE_LONGLONG(0);
  clear_has_traderate();
}
inline ::google::protobuf::int64 TradeRuleRsp::traderate() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.TradeRate)
  return traderate_;
}
inline void TradeRuleRsp::set_traderate(::google::protobuf::int64 value) {
  set_has_traderate();
  traderate_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.TradeRate)
}

// optional int64 MinTradeFee = 5;
inline bool TradeRuleRsp::has_mintradefee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeRuleRsp::set_has_mintradefee() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeRuleRsp::clear_has_mintradefee() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeRuleRsp::clear_mintradefee() {
  mintradefee_ = GOOGLE_LONGLONG(0);
  clear_has_mintradefee();
}
inline ::google::protobuf::int64 TradeRuleRsp::mintradefee() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.MinTradeFee)
  return mintradefee_;
}
inline void TradeRuleRsp::set_mintradefee(::google::protobuf::int64 value) {
  set_has_mintradefee();
  mintradefee_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.MinTradeFee)
}

// optional int64 MaxPosAmount = 6;
inline bool TradeRuleRsp::has_maxposamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeRuleRsp::set_has_maxposamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeRuleRsp::clear_has_maxposamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeRuleRsp::clear_maxposamount() {
  maxposamount_ = GOOGLE_LONGLONG(0);
  clear_has_maxposamount();
}
inline ::google::protobuf::int64 TradeRuleRsp::maxposamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.MaxPosAmount)
  return maxposamount_;
}
inline void TradeRuleRsp::set_maxposamount(::google::protobuf::int64 value) {
  set_has_maxposamount();
  maxposamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.MaxPosAmount)
}

// optional int64 MaxOrderAmount = 7;
inline bool TradeRuleRsp::has_maxorderamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeRuleRsp::set_has_maxorderamount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeRuleRsp::clear_has_maxorderamount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeRuleRsp::clear_maxorderamount() {
  maxorderamount_ = GOOGLE_LONGLONG(0);
  clear_has_maxorderamount();
}
inline ::google::protobuf::int64 TradeRuleRsp::maxorderamount() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.MaxOrderAmount)
  return maxorderamount_;
}
inline void TradeRuleRsp::set_maxorderamount(::google::protobuf::int64 value) {
  set_has_maxorderamount();
  maxorderamount_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.MaxOrderAmount)
}

// optional string SettleTime = 8;
inline bool TradeRuleRsp::has_settletime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeRuleRsp::set_has_settletime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeRuleRsp::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeRuleRsp::clear_settletime() {
  settletime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settletime();
}
inline const ::std::string& TradeRuleRsp::settletime() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.SettleTime)
  return settletime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeRuleRsp::set_settletime(const ::std::string& value) {
  set_has_settletime();
  settletime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.SettleTime)
}
inline void TradeRuleRsp::set_settletime(const char* value) {
  set_has_settletime();
  settletime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dzhyun.TradeRuleRsp.SettleTime)
}
inline void TradeRuleRsp::set_settletime(const char* value, size_t size) {
  set_has_settletime();
  settletime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dzhyun.TradeRuleRsp.SettleTime)
}
inline ::std::string* TradeRuleRsp::mutable_settletime() {
  set_has_settletime();
  // @@protoc_insertion_point(field_mutable:dzhyun.TradeRuleRsp.SettleTime)
  return settletime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeRuleRsp::release_settletime() {
  // @@protoc_insertion_point(field_release:dzhyun.TradeRuleRsp.SettleTime)
  clear_has_settletime();
  return settletime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeRuleRsp::set_allocated_settletime(::std::string* settletime) {
  if (settletime != NULL) {
    set_has_settletime();
  } else {
    clear_has_settletime();
  }
  settletime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settletime);
  // @@protoc_insertion_point(field_set_allocated:dzhyun.TradeRuleRsp.SettleTime)
}

// optional int64 StopTrade = 9;
inline bool TradeRuleRsp::has_stoptrade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeRuleRsp::set_has_stoptrade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeRuleRsp::clear_has_stoptrade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeRuleRsp::clear_stoptrade() {
  stoptrade_ = GOOGLE_LONGLONG(0);
  clear_has_stoptrade();
}
inline ::google::protobuf::int64 TradeRuleRsp::stoptrade() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.StopTrade)
  return stoptrade_;
}
inline void TradeRuleRsp::set_stoptrade(::google::protobuf::int64 value) {
  set_has_stoptrade();
  stoptrade_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.StopTrade)
}

// optional int64 TradeRule = 10;
inline bool TradeRuleRsp::has_traderule() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeRuleRsp::set_has_traderule() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeRuleRsp::clear_has_traderule() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeRuleRsp::clear_traderule() {
  traderule_ = GOOGLE_LONGLONG(0);
  clear_has_traderule();
}
inline ::google::protobuf::int64 TradeRuleRsp::traderule() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.TradeRule)
  return traderule_;
}
inline void TradeRuleRsp::set_traderule(::google::protobuf::int64 value) {
  set_has_traderule();
  traderule_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.TradeRule)
}

// optional int64 MarginRate = 11;
inline bool TradeRuleRsp::has_marginrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeRuleRsp::set_has_marginrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TradeRuleRsp::clear_has_marginrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TradeRuleRsp::clear_marginrate() {
  marginrate_ = GOOGLE_LONGLONG(0);
  clear_has_marginrate();
}
inline ::google::protobuf::int64 TradeRuleRsp::marginrate() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.MarginRate)
  return marginrate_;
}
inline void TradeRuleRsp::set_marginrate(::google::protobuf::int64 value) {
  set_has_marginrate();
  marginrate_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.MarginRate)
}

// optional int64 ForceCloseRate = 12;
inline bool TradeRuleRsp::has_forcecloserate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeRuleRsp::set_has_forcecloserate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TradeRuleRsp::clear_has_forcecloserate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TradeRuleRsp::clear_forcecloserate() {
  forcecloserate_ = GOOGLE_LONGLONG(0);
  clear_has_forcecloserate();
}
inline ::google::protobuf::int64 TradeRuleRsp::forcecloserate() const {
  // @@protoc_insertion_point(field_get:dzhyun.TradeRuleRsp.ForceCloseRate)
  return forcecloserate_;
}
inline void TradeRuleRsp::set_forcecloserate(::google::protobuf::int64 value) {
  set_has_forcecloserate();
  forcecloserate_ = value;
  // @@protoc_insertion_point(field_set:dzhyun.TradeRuleRsp.ForceCloseRate)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dzhyun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dzhyun_2ecounter_2eproto__INCLUDED
